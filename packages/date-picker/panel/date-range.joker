<template>
    <div
        class="@(['jk-popper', 'jk-picker-date-range-panel', { 'has-sidebar': props.shortcuts }])"
        transition-name="jk-zoom-in-top"
        ref="popper"
        append-to="body">
        <div class="body-wrapper">
            @if(props.shortcuts) {
                <div class="sidebar">
                    @for(let item of props.shortcuts) {
                        <button type="button" @click="handleShortcutClick(item)">@item.text</button>
                    }
                </div>
            }
            <div class="body">
                <div class="item">
                    @if(showTime) {
                        <div class="time-panel">
                            选择时间：
                            <JokerTimePicker size="mini" value="@startTime" @change="handleStartTimeChange" />
                        </div>
                    }
                    <div class="header @(model.currentView==='year'||model.currentView ==='month'?'bordered':'')">
                        <button
                            type="button"
                            @click="leftPrevYear"
                            aria-label="前一年"
                            class="prev-btn jk-icon-d-arrow-left"></button>
                        <button
                            type="button"
                            @click="leftPrevMonth"
                            aria-label="上一月"
                            class="prev-btn jk-icon-arrow-left"></button>
                        @if(props.unlinkPanels) {
                            <button
                                type="button"
                                @click="leftNextYear"
                                aria-label="后一年"
                                class="next-btn jk-icon-d-arrow-right"></button>
                            <button
                                type="button"
                                @click="leftNextMonth"
                                aria-label="下一月"
                                class="next-btn jk-icon-arrow-right"></button>
                        }
                        <span class="label">@leftLabel</span>
                    </div>
                    <div class="content">
                        <JokerDateTable
                            isRange
                            date="@model.leftDate"
                            disabledDate="@props.disabledDate"
                            cellClassName="@props.cellClassName"
                            showWeekNumber="@props.showWeekNumber"
                            minDate="@model.minDate"
                            maxDate="@model.maxDate"
                            rangeState="@model.rangeState"
                            @pick="handleDatePick"
                            @changerange="handleDateChangeRange"
                        />
                    </div>
                </div>
                <div class="item">
                    @if(showTime) {
                        <div class="time-panel">
                            选择时间：
                            <JokerTimePicker size="mini" value="@endTime" @change="handleEndTimeChange" />
                        </div>
                    }
                    <div class="header @(model.currentView==='year'||model.currentView ==='month'?'bordered':'')">
                        @if(props.unlinkPanels) {
                            <button
                                type="button"
                                @click="rightPrevYear"
                                aria-label="前一年"
                                class="prev-btn jk-icon-d-arrow-left"></button>
                            <button
                                type="button"
                                @click="rightPrevMonth"
                                aria-label="上一月"
                                class="prev-btn jk-icon-arrow-left"></button>
                        }
                        <button
                            type="button"
                            @click="rightNextYear"
                            aria-label="后一年"
                            class="next-btn jk-icon-d-arrow-right"></button>
                        <button
                            type="button"
                            @click="rightNextMonth"
                            aria-label="下一月"
                            class="next-btn jk-icon-arrow-right"></button>
                        <span class="label">@rightLabel</span>
                    </div>
                    <div class="content">
                        <JokerDateTable
                            isRange
                            date="@model.rightDate"
                            disabledDate="@props.disabledDate"
                            cellClassName="@props.cellClassName"
                            showWeekNumber="@props.showWeekNumber"
                            minDate="@model.minDate"
                            maxDate="@model.maxDate"
                            rangeState="@model.rangeState"
                            @pick="handleDatePick"
                            @changerange="handleDateChangeRange"
                        />
                    </div>
                </div>
            </div>
        </div>
        @if(showTime) {
            <div class="footer">
                <JokerButton disabled="@(!(model.minDate && model.maxDate))" size="small" @click="handleConfirm">
                    确定
                </JokerButton>
            </div>
        }
    </div>
</template>
<script>
import { VNode } from "@joker.front/core";
import { PickerPanel } from "./base";
import JokerButton from "../../button/index.joker";
import JokerDateTable from "../base/date-table.joker";
import JokerTimePicker from "../time-picker";

import { Shortcut, addDate, formatAsFormatAndType, parseAsFormatAndType, setTime, subtractDate } from "../utils";

export default class extends PickerPanel<{
    shortcuts: Shortcut[];
    format: string;
    valueFormat: string;
    value: Array<string>;
    defaultValue: string;
    showWeekNumber: boolean;
    disabledDate: (date: Date) => boolean;
    cellClassName: (date: Date) => string;
    unlinkPanels: boolean;
    type: "daterange" | "datetimerange";
}> {
    model = {
        value: [] as (Date | string)[],
        leftDate: new Date(),
        rightDate: addDate(new Date(), 1, "M"),
        minDate: undefined as Date | undefined,
        maxDate: undefined as Date | undefined,
        rangeState: {
            selecting: false
        }
    };

    components = {
        JokerButton,
        JokerTimePicker,
        JokerDateTable
    };

    created() {
        this.initModelDate();

        this.$watch(
            () => [this.props.value, this.props.defaultValue],
            () => {
                this.initModelDate();
            }
        );
    }

    //#region  property
    get leftYear() {
        return this.model.leftDate.getFullYear();
    }

    get leftMonth() {
        return this.model.leftDate.getMonth();
    }

    get rightYear() {
        return this.model.rightDate.getFullYear();
    }

    get rightMonth() {
        return this.model.rightDate.getMonth();
    }

    get leftLabel() {
        return `${this.leftYear} 年 ${this.leftMonth + 1} 月`;
    }

    get rightLabel() {
        return `${this.rightYear} 年 ${this.rightMonth + 1} 月`;
    }
    get startTime() {
        if (this.model.minDate) {
            return formatAsFormatAndType(this.model.minDate, "HH:mm:ss", "datetime");
        } else {
            return "00:00:00";
        }
    }
    get endTime() {
        if (this.model.maxDate) {
            return formatAsFormatAndType(this.model.maxDate, "HH:mm:ss", "datetime");
        } else {
            return "00:00:00";
        }
    }

    get dateType() {
        return this.props.type === "datetimerange" ? "datetime" : "date";
    }

    get showTime() {
        return this.props.type?.includes("time");
    }
    //#endregion

    //#region methods
    initModelDate() {
        if (this.props.value) {
            this.model.minDate = parseAsFormatAndType(this.props.value[0], this.props.valueFormat, this.dateType);
            this.model.maxDate = parseAsFormatAndType(this.props.value[1], this.props.valueFormat, this.dateType);

            //只要有一个时间，即可初始化面板
            if (this.model.minDate) {
                this.model.leftDate = this.model.minDate;

                if (this.props.unlinkPanels && this.model.maxDate) {
                    let minDateYear = this.model.minDate.getFullYear();
                    let minDateMonth = this.model.minDate.getMonth();
                    let maxDateYear = this.model.maxDate.getFullYear();
                    let maxDateMonth = this.model.maxDate.getMonth();
                    this.model.rightDate =
                        minDateYear === maxDateYear && minDateMonth === maxDateMonth
                            ? addDate(this.model.maxDate, 1, "M")
                            : this.model.maxDate;
                } else {
                    this.model.rightDate = addDate(this.model.leftDate, 1, "M");
                }
            }
        } else {
            this.model.minDate = undefined;
            this.model.maxDate = undefined;

            this.model.leftDate = this.calcDefaultValue()[0];
            this.model.rightDate = this.calcDefaultValue()[1];
        }
    }

    isValidValue(val: (Date | string)[]) {
        let value = [...val];
        if (typeof value[0] === "string") {
            value[0] = parseAsFormatAndType(value[0], this.props.valueFormat, this.dateType);
        }

        if (typeof value[1] === "string") {
            value[1] = parseAsFormatAndType(value[1], this.props.valueFormat, this.dateType);
        }

        return (
            Array.isArray(value) &&
            value &&
            value[0] &&
            value[1] &&
            //@ts-ignore
            value[0].getTime() <= value[1].getTime() &&
            //只验证开始、结束两个端即可
            //@ts-ignore
            (this.props.disabledDate ? !this.props.disabledDate(value[0]) && !this.props.disabledDate(value[1]) : true)
        );
    }

    triggerChange(val: Date[], close = true) {
        if (this.isValidValue(val)) {
            this.model.value = val;

            this.$trigger("pick", {
                value: this.model.value,
                close: close
            });
        }
    }

    private calcDefaultValue() {
        if (Array.isArray(this.props.defaultValue)) {
            return [
                parseAsFormatAndType(this.props.defaultValue[0], this.props.valueFormat, this.dateType),
                parseAsFormatAndType(this.props.defaultValue[1], this.props.valueFormat, this.dateType)
            ];
        } else if (this.props.defaultValue) {
            let minDate = parseAsFormatAndType(this.props.defaultValue, this.props.valueFormat, this.dateType);
            return [minDate, addDate(minDate, 1, "M")];
        } else {
            return [new Date(), addDate(new Date(), 1, "M")];
        }
    }

    //#region  nav date
    leftPrevYear() {
        this.model.leftDate = subtractDate(this.model.leftDate, 1, "y");
        if (!this.props.unlinkPanels) {
            this.model.rightDate = addDate(this.model.leftDate, 1, "M");
        }
    }
    leftPrevMonth() {
        this.model.leftDate = subtractDate(this.model.leftDate, 1, "M");
        if (!this.props.unlinkPanels) {
            this.model.rightDate = addDate(this.model.leftDate, 1, "M");
        }
    }
    leftNextYear() {
        this.model.leftDate = addDate(this.model.leftDate, 1, "y");
    }
    leftNextMonth() {
        this.model.leftDate = addDate(this.model.leftDate, 1, "M");
    }

    rightPrevYear() {
        this.model.rightDate = subtractDate(this.model.rightDate, 1, "y");
    }
    rightPrevMonth() {
        this.model.rightDate = subtractDate(this.model.rightDate, 1, "M");
    }
    rightNextYear() {
        if (!this.props.unlinkPanels) {
            this.model.leftDate = addDate(this.model.leftDate, 1, "y");
            this.model.rightDate = addDate(this.model.leftDate, 1, "M");
        } else {
            this.model.rightDate = addDate(this.model.rightDate, 1, "y");
        }
    }
    rightNextMonth() {
        if (!this.props.unlinkPanels) {
            this.model.leftDate = addDate(this.model.leftDate, 1, "M");
            this.model.rightDate = addDate(this.model.leftDate, 1, "M");
        } else {
            this.model.rightDate = addDate(this.model.rightDate, 1, "M");
        }
    }
    //#endregion

    //#endregion

    //#region event
    handleStartTimeChange(e: VNode.Event<string>) {
        this.model.minDate = setTime(this.model.minDate || this.model.leftDate, e.data);
    }

    handleEndTimeChange(e: VNode.Event<string>) {
        this.model.maxDate = setTime(this.model.maxDate || this.model.rightDate, e.data);
    }

    handleDatePick(e: VNode.Event<{ minDate?: Date; maxDate?: Date }>) {
        if (e.data.minDate) {
            e.data.minDate = setTime(e.data.minDate, this.startTime);
        }

        if (e.data.maxDate) {
            e.data.maxDate = setTime(e.data.maxDate, this.startTime);
        }

        this.model.minDate = e.data.minDate;
        this.model.maxDate = e.data.maxDate;

        if (this.model.minDate && this.model.maxDate) {
            //daterange 时选中两个自动关闭
            this.triggerChange([this.model.minDate, this.model.maxDate], this.props.type === "daterange");
        }
    }

    handleConfirm() {
        if (this.model.minDate && this.model.maxDate) {
            this.triggerChange([this.model.minDate, this.model.maxDate], true);
        }
    }
    handleDateChangeRange(
        e: VNode.Event<{
            minDate?: Date;
            maxDate?: Date;
        }>
    ) {
        this.model.minDate = e.data.minDate;
        this.model.maxDate = e.data.maxDate;
    }
    handleShortcutClick(e: VNode.Event, shortcut: Shortcut) {
        shortcut.onClick?.((val) => {
            if (val) {
                this.triggerChange(val, false);
            }
        });
    }
    //#endregion
}
</script>

<style scoped lang="scss">
.jk-picker-date-range-panel {
    width: 646px;
    color: var(--jk-color-text-regular);
    border: 1px solid var(--jk-border-color-light);
    box-shadow: var(--jk-box-shadow-light);
    background: #fff;
    border-radius: 2px;
    margin: 5px 0;
    user-select: none;
    box-sizing: border-box;

    &.has-sidebar {
        width: 756px;
    }

    .body-wrapper {
        display: flex;
        .sidebar {
            width: 110px;
            border-right: solid 1px #e4e4e4;
            box-sizing: border-box;
            padding-top: 6px;
            overflow: auto;

            button {
                display: block;
                width: 100%;
                border: 0;
                background-color: transparent;
                line-height: 28px;
                font-size: 14px;
                color: var(--jk-color-text-regular);
                padding-left: 12px;
                text-align: left;
                outline: none;
                cursor: pointer;

                &:hover,
                &:active {
                    color: var(--jk-color-primary);
                }
            }
        }
        .body {
            flex: 1;
            display: flex;
            .item {
                flex: 1;
                .time-panel {
                    margin: 5px 15px;
                    font-size: 12px;
                }
                &:first-child {
                    border-right: solid 1px var(--jk-border-color-lighter);
                }
                .header {
                    margin: 12px;
                    text-align: center;

                    .label {
                        display: block;
                        margin: 0 50px;
                        font-size: 16px;
                        font-weight: 500;
                        padding: 0 5px;
                        line-height: 22px;
                        text-align: center;
                        cursor: pointer;
                        color: var(--jk-color-text-regular);
                    }

                    button {
                        font-size: 12px;
                        color: var(--jk-color-text-primary);
                        border: 0;
                        background: transparent;
                        cursor: pointer;
                        outline: none;
                        margin-top: 5px;

                        &:hover {
                            color: var(--jk-color-primary);
                        }

                        &.prev-btn {
                            float: left;
                        }

                        &.next-btn {
                            float: right;
                        }
                    }
                }

                .content {
                    position: relative;
                    margin: 15px;
                }
            }
        }
    }

    .footer {
        border-top: solid 1px #e4e4e4;
        padding: 4px;
        text-align: right;
    }
}
</style>