<template>
    <div class="jk-popper jk-picker-time-panel" transition-name="jk-zoom-in-top" ref="popper" append-to="body">
        <div class="content">
            <JokerTimeSpinner
                ref="timeSpinner"
                @change="handleChange"
                @select-range="handleSelectRange"
                date="@model.date"
                showSeconds="@showSeconds"
                valueFormat="@props.valueFormat"
                selectableRange="@props.selectableRange"></JokerTimeSpinner>
        </div>
        <div class="footer">
            <JokerLink @click.stop="handleCancel">
                @getValueByLang("cancel")
            </JokerLink>
            <JokerLink type="primary" @click.stop="handleConfirm">
                @getValueByLang("confirm")
            </JokerLink>
        </div>
    </div>
</template>
<script>
import { PickerPanel } from "./base";
import JokerTimeSpinner from "../base/time-spinner.joker";
import JokerLink from "../../link/index.joker";
import { VNode } from "@joker.front/core";
import { TimeMode, parseTime, validateTimeInRange } from "../utils";
import { getValueByLang } from "../../utils/lang";

export default class extends PickerPanel<{
    format: string;
    valueFormat: string;
    value: string;
    defaultValue: string;
    selectableRange: Array<string | string[]>;
}> {
    getValueByLang = getValueByLang;
    propsOption = {
        valueFormat: "HH:mm:ss",
        format: "HH:mm:ss",
        minTime: "-1:-1",
        maxTime: "100:100"
    };

    model = {
        date: { hours: 0, minutes: 0, seconds: 0 } as TimeMode
    };

    components = {
        JokerLink,
        JokerTimeSpinner
    };

    oldVal?: string;

    created() {
        this.oldVal = this.props.value;

        this.initModelDate();

        this.$watch(
            () => this.props.value,
            () => {
                this.initModelDate();
            }
        );
    }
    selectRangeMapping: Record<keyof TimeMode, number[]> = {
        hours: [0, 2],
        minutes: [3, 5],
        seconds: [6, 8]
    };

    mounted() {
        this.$trigger("select-range", { range: this.selectRangeMapping.hours });
    }
    initModelDate() {
        if (this.props.value) {
            this.model.date = parseTime(this.props.value, this.props.valueFormat!);
        } else if (this.props.defaultValue) {
            this.model.date = parseTime(this.props.defaultValue, this.props.valueFormat!);
        } else {
            let nowDate = new Date();
            this.model.date = parseTime(
                `${nowDate.getHours()}:${nowDate.getMinutes()}:${nowDate.getSeconds()}`,
                "HH:mm:ss"
            );
        }
    }

    get showSeconds() {
        return this.props.format?.includes("ss");
    }

    isValidValue(val: string) {
        return validateTimeInRange(val, this.props.format!, this.props.selectableRange);
    }

    handleChange(e: VNode.Event<TimeMode>) {
        this.model.date = e.data!;

        this.$trigger("pick", { value: e.data });
    }

    //pick 对接事件，用于键盘导航
    navigateItem(e: VNode.Event) {
        this.$getRef("timeSpinner")?.component.navigateItem(e);
    }

    handleSelectRange(e: VNode.Event<keyof TimeMode>) {
        this.$trigger("select-range", { range: this.selectRangeMapping[e.data] });
    }

    handleCancel() {
        this.$trigger("pick", { value: this.oldVal, close: true });
    }

    handleConfirm() {
        this.$trigger("pick", { value: this.model.date, close: true });
    }
}
</script>

<style scoped lang="scss">
.jk-picker-time-panel {
    color: var(--jk-color-text-regular);
    border: 1px solid var(--jk-border-color-light);
    box-shadow: var(--jk-box-shadow-light);
    background: #fff;
    border-radius: 2px;
    margin: 5px 0;
    user-select: none;
    box-sizing: border-box;
    width: 190px;

    .footer {
        border-top: 1px solid #e4e4e4;
        padding: 4px;
        height: 36px;
        line-height: 25px;
        text-align: right;
        box-sizing: border-box;
        text-align: right;

        :deep(.jk-link) {
            margin-right: 10px;
        }
    }
}
</style>