<template>
    <div class="jk-alpha-slider" ref="container">
        <div class="bar" ref="bar" @click.self="barClick" style="background:@background"></div>
        <div class="thumb" ref="thumb" style="left:@(model.thumbLeft+'px')"></div>
    </div>
</template>
<script>
import { Component, VNode } from "@joker.front/core";
import { Color } from "@joker.front/shared";
import { draggable } from "../utils/draggable";

export default class extends Component<{ color: Color }> {
    model = {
        thumbLeft: 0
    };
    get background() {
        if (this.props.color && this.props.color.value) {
            let rgb = this.props.color.toRgb();

            return `linear-gradient(to right,rgba(${rgb.r},${rgb.g},${rgb.b}, 0) 0%, rgba(${rgb.r},${rgb.g},${rgb.b}, 1) 100%)`;
        }

        return "none";
    }

    getThumbLeft() {
        let el = this.$getRef<VNode.Element>("container")?.output;
        let thumb = this.$getRef<VNode.Element>("thumb")?.output;
        let alpha = this.props.color?.a!;

        return Math.round((alpha * (el.offsetWidth - thumb.offsetWidth / 2)) / 100);
    }

    mounted() {
        let thumb = this.$getRef<VNode.Element>("thumb")?.output;
        let bar = this.$getRef<VNode.Element>("bar")?.output;

        let dragConfig = {
            drag: (e: MouseEvent) => {
                this.handleDrag(e);
            },
            end: (e: MouseEvent) => {
                this.handleDrag(e);
            }
        };

        draggable(thumb, dragConfig);
        draggable(bar, dragConfig);

        this.$watch(
            () => this.props.color?.value,
            () => {
                this.model.thumbLeft = this.getThumbLeft();
            }
        );

        this.model.thumbLeft = this.getThumbLeft();
    }

    barClick(e: VNode.Event) {
        this.handleDrag(e.event);
    }

    handleDrag(e: MouseEvent) {
        let el: HTMLElement = this.$getRef<VNode.Element>("container")?.output;
        let thumb = this.$getRef<VNode.Element>("thumb")?.output;

        let rect = el.getBoundingClientRect();

        let left = e.clientX - rect.left;
        left = Math.max(thumb.offsetWidth / 2, left);
        left = Math.min(left, rect.width - thumb.offsetWidth / 2);

        let hue = Math.round(((left - thumb.offsetWidth / 2) / (rect.width - thumb.offsetWidth)) * 100);

        this.props.color?.setVal("a", hue);
    }
}
</script>

<style lang="scss" scoped>
@use "../../theme/var.scss";
.jk-alpha-slider {
    position: relative;
    box-sizing: border-box;
    width: 280px;
    height: 12px;
    background: var.$transparent-background;
    margin: 8px 0;
    .bar {
        position: relative;
        background: linear-gradient(to right, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 1) 100%);
        height: 100%;
    }

    .thumb {
        position: absolute;
        cursor: pointer;
        box-sizing: border-box;
        left: 0;
        top: 0;
        width: 4px;
        height: 100%;
        border-radius: 1px;
        background: var(--jk-background-color-default);
        border: 1px solid #f0f0f0;
        box-shadow: 0 0 2px rgba(0, 0, 0, 0.6);
        z-index: 1;
    }
}
</style>