<template>
    <li
        role="menuitem"
        id="@props.node.id"
        tabindex="@(props.node.disabled ? null : -1)"
        aria-expanded="@inActivePath"
        class="@({
            'jk-cascader-node': true,
            'in-active-path': inActivePath,
            'is-active': isChecked,
            'is-disabled': props.node.disabled,
            'is-custom': $sections.default
        })"
        @click="handleClick"
        @mouseenter="handleMouseEnter">
        @if(props.multiple) {
            <JokerCheckBox
                value="@props.node.checked"
                indeterminate="@props.node.indeterminate"
                disabled="@props.node.disabled"
                @change="handleCheckboxChange"
            />
        }
        else if(props.node.isLeaf && isChecked) {
            <i class="prefix jk-icon-check"></i>
        }
        <span class="label">
            @if($sections.default) {
                @RenderSection("default", props.node)
            }
            else {
                @props.node.label
            }
        </span>
        @if(props.node.loading) {
            <i class="postfix jk-icon-loading"></i>
        }
        else if(!props.node.isLeaf) {
            <i class="postfix jk-icon-arrow-right"></i>
        }
    </li>
</template>
<script>
import { Component, VNode, OBJECTPROXY_DEPID } from "@joker.front/core";
import JokerCheckBox from "../checkbox/checkbox.joker";

import { Node } from "./store";
import { componentName } from "../utils";
export default class extends Component<{
    multiple: boolean;
    node: Node;
    expandTrigger: string;
    lazy: boolean;
}> {
    get dropdown() {
        return this.$rootVNode?.closest((n) => {
            return n instanceof VNode.Component && n.component.name === componentName("cascader-dropdown");
        })!;
    }

    get cascader() {
        return this.$rootVNode?.closest((n) => {
            return n instanceof VNode.Component && n.component.name === componentName("cascader");
        })!;
    }

    get isChecked() {
        return this.props.node?.checked;
    }

    components = {
        JokerCheckBox
    };

    get inActivePath() {
        return this.isInPath(this.dropdown.component.model.activePath);
    }

    isInPath(pathNodes: Array<Node>): boolean {
        let selectedNode = pathNodes[this.props.node!.level - 1];
        if (!selectedNode) return false;
        return selectedNode.id === this.props.node?.id;
    }
    created() {
        //@ts-ignore
        let cascader = this.$root.closest((n) => {
            return n instanceof VNode.Component && n.component.name === componentName("cascader");
        });

        let section = cascader.component.$sections.default;
        this.$sections.default = section;
    }

    checkedChange() {
        this.dropdown.component.checkChange(this.props.node);
    }

    multiCheckChange(checked: boolean) {
        this.props.node?.doChecked(checked);

        this.cascader.component.refreshSelectedNode();
    }

    expand() {
        if (this.props.node?.disabled || this.props.node?.loading) return;

        if (this.props.lazy && !this.props.node?.loaded) {
            this.cascader.component.lazyLoad(this.props.node, () => {
                if (!this.props.node?.isLeaf) {
                    this.dropdown.component.handleExpand(this.props.node);
                }

                if (this.props.multiple) {
                    this.multiCheckChange(this.props.node?.isLeaf ? this.props.node.checked : false);
                }
            });
        } else {
            this.dropdown.component.handleExpand(this.props.node);
        }
    }

    handleClick() {
        if (this.props.node?.disabled) return;

        if (this.props.node?.isLeaf && !this.props.multiple) {
            this.checkedChange();
        } else {
            if (this.props.expandTrigger === "click") {
                this.expand();
            }
        }
    }

    handleCheckboxChange(e: VNode.Event<boolean>) {
        this.multiCheckChange(e.data!);
    }

    handleMouseEnter() {
        if (this.props.node?.disabled || this.props.expandTrigger === "click" || this.props.node?.isLeaf) return;

        this.expand();
    }
}
</script>

<style scoped lang="scss">
.jk-cascader-node {
    position: relative;
    display: flex;
    align-items: center;
    padding: 0 30px 0 20px;
    height: 34px;
    line-height: 34px;
    outline: none;

    &.in-active-path,
    &.is-active {
        color: var(--jk-color-primary);
        font-weight: bold;
    }

    &.is-custom {
        padding: 0 30px 0 0;
    }

    &:not(.is-disabled) {
        cursor: pointer;
        &:hover,
        &:focus {
            background: var(--jk-background-color-base);
        }
    }

    &.is-disabled {
        cursor: not-allowed;
        color: var(--jk-color-text-placeholder);
    }

    .prefix {
        position: absolute;
        right: 10px;
    }

    .label {
        flex: 1;
        padding: 0 10px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .postfix {
        position: absolute;
        right: 10px;
    }
}
</style>