<template>
    <div
        class="@(['jk-alert', typeClass, 'is-' + props.effect, props.class, { 'is-center': props.center }])"
        role="alert"
        style="display: @(model.visible?'flex':'none')">
        @if(props.showIcon) {
            <i class="@(['jk-alert-icon', iconClass, isBigIcon])"></i>
        }
        <div class="jk-alert-content">
            @if(props.title || $sections.title) {
                <span class="jk-alert-title    @isBoldTitle">
                    @RenderSection("title")
                    @if(!$sections.title) {
                        <span>@props.title</span>
                    }
                </span>
            }
            @if($sections.default && !props.description) {
                <p class="jk-alert-description">
                    @RenderSection()
                </p>
            }
            @if(props.description && !$sections.default) {
                <p class="jk-alert-description">
                    @props.description
                </p>
            }
            @if(props.closable) {
                <i class="jk-alert-closebtn    @(props.closeText?'is-customed':'jk-icon-close')" @click="close()">
                    @props.closeText
                </i>
            }
        </div>
    </div>
</template>
<script>
import { Component } from "@joker.front/core";

const TYPE_CLASSES_MAP = {
    success: "jk-icon-success",
    warning: "jk-icon-warning",
    error: "jk-icon-circle-close"
};

export default class extends Component<{
    title: string;
    description: string;
    type: string;
    icon: string;
    closable: boolean;
    closeText: string;
    class: string;
    showIcon: boolean;
    center: boolean;
    effect: string;
}> {
    propsOption = {
        type: "info",
        closable: true,
        effect: {
            default: "light",
            validator: function (value) {
                return ["light", "dark"].includes(value);
            }
        }
    };

    model = {
        visible: true
    };

    get typeClass() {
        return "jk-alert-" + this.props.type;
    }

    get iconClass() {
        return this.props.icon || TYPE_CLASSES_MAP[this.props.type] || "jk-icon-info";
    }

    get isBigIcon() {
        return this.props.description || this.$sections.default ? "is-big" : "";
    }

    get isBoldTitle() {
        return this.props.description || this.$sections.default ? "is-bold" : "";
    }

    close() {
        this.model.visible = false;
        this.$trigger("close");
    }
}
</script>

<style lang="scss" scoped>
.jk-alert {
    padding: 8px 16px;
    line-height: 1;
    box-sizing: border-box;
    border-radius: 4px;
    position: relative;
    background-color: var(--jk-background-color-default);
    overflow: hidden;
    opacity: 1;
    display: flex;
    align-items: center;
    transition: opacity 0.2s;
    .jk-alert-icon.is-big {
        font-size: 20px;
    }
    &.jk-alert-success {
        &.is-light {
            background-color: #f0f9eb;
            color: #67c23a;
            .jk-alert-description {
                color: #67c23a;
            }
        }
        &.is-dark {
            background-color: #67c23a;
            color: #fff;
            .jk-alert-description {
                color: #fff;
            }
        }
    }
    &.jk-alert-info {
        &.is-light {
            background-color: #f4f4f5;
            color: #909399;
            .jk-alert-description {
                color: #909399;
            }
        }
        &.is-dark {
            background-color: #909399;
            color: #fff;
            .jk-alert-description {
                color: #fff;
            }
        }
    }
    &.jk-alert-warning {
        &.is-light {
            background-color: #fdf6ec;
            color: #e6a23c;
            .jk-alert-description {
                color: #e6a23c;
            }
        }
        &.is-dark {
            background-color: #e6a23c;
            color: #fff;
            .jk-alert-description {
                color: #fff;
            }
        }
    }
    &.jk-alert-error {
        &.is-light {
            background-color: #fef0f0;
            color: #f56c6c;
            .jk-alert-description {
                color: #f56c6c;
            }
        }
        &.is-dark {
            background-color: #f56c6c;
            color: #fff;
            .jk-alert-description {
                color: #fff;
            }
        }
    }
    &.is-center {
        justify-content: center;
    }
    .jk-alert-content {
        display: table-cell;
        padding: 0 8px;
        .jk-alert-title {
            font-size: 13px;
            line-height: 18px;
            &.is-bold {
                font-weight: 700;
            }
        }
        .jk-alert-closebtn {
            font-size: 12px;
            opacity: 1;
            position: absolute;
            top: 12px;
            right: 15px;
            cursor: pointer;
            &.is-customed {
                font-style: normal;
                font-size: 13px;
                top: 9px;
            }
        }
        .jk-alert-description {
            font-size: 12px;
            margin: 5px 0 0;
        }
    }
    &.is-light .jk-alert-closebtn {
        color: #c0c4cc;
    }
}
</style>