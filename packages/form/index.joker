<template>
    <form class="jk-form  @(props.class||'')" @submit.prevent="submit" @reset.prevent="reset">
        @RenderSection()
    </form>
</template>
<script>
import { Component, ShallowObserver, VNode } from "@joker.front/core";
import { componentName } from "../utils";
import { CtrlItem } from "./form-ctrl";
import { logger } from "@joker.front/shared";
import { LOGTAG } from "../config";
import { Message } from "../message";
import { getValueByLang } from "../utils/lang";

export default class extends Component<{
    labelWidth: string;
    labelPosition: string;
    inline: boolean;
    size: string;
    class: string;

    showErrorMessage: (name: string, message: string, ctrl: Component<any>) => void | boolean;
    clearErrorMessage: () => void;
}> {
    isSubmit = false;

    name = componentName("form");

    actionBtn?: Component;

    async submit(e?: VNode.Event) {
        if (this.isSubmit) {
            logger.warn(LOGTAG, "The Form is being submitted. Please do not submit it repeatedly.");
            return;
        }

        this.$trigger("before-submit");

        this.isSubmit = true;

        let actionBtn: any = undefined;

        //设置loading
        if (e) {
            let btnVNode = e.event?.submitter?.JOKER_NODE as VNode.Node;
            if (btnVNode) {
                actionBtn = btnVNode.closest(
                    (m) => m instanceof VNode.Component && m.component.name === componentName("button")
                )?.component;
                if (actionBtn) {
                    actionBtn.model.loading = true;
                }
            } else {
                actionBtn = e.target?.closest(
                    (m) => m instanceof VNode.Component && m.component.name === componentName("button")
                )?.component;
            }
        }
        let self = this;
        function lastStep() {
            self.isSubmit = false;
            if (actionBtn) {
                actionBtn.model.loading = false;
                actionBtn = undefined;
            }
        }

        let validateResult = await this.validate().catch(lastStep);
        if (validateResult) {
            let formData = this.getData();
            lastStep();
            this.$trigger("submit", formData);
        } else {
            lastStep();
        }
    }

    getData() {
        let formData: Record<string, any> = {};

        for (let name in this.ctrls) {
            formData[name] = this.ctrls[name].ctrl.model.value;
        }

        return formData;
    }

    reset() {
        if (this.isSubmit) {
            Message({
                type: "warning",
                message: getValueByLang("submiting")
            });

            logger.warn(LOGTAG, "The Form is being submitted. Please do not submit it repeatedly.");
            return;
        }

        this.clearError();

        for (let name in this.ctrls) {
            let ctrl = this.ctrls[name].ctrl;
            this.cancelItemValidateDeffered(name);

            let value = ctrl.model.value;
            if (typeof value === "boolean") {
                ctrl.model.value = false;
            } else if (Array.isArray(value)) {
                ctrl.model.value = [];
            } else if (typeof value === "string") {
                ctrl.model.value = "";
            } else {
                ctrl.model.value = undefined;
            }
        }
    }

    registerFormCtrl(name: string, ctrl: { ctrl: Component; formItem: any }) {
        this.ctrls[name] = {
            ...ctrl,
            name,
            validateState: new ShallowObserver<"success" | "error" | "validating" | "">("")
        };
    }
    unRegisterFormCtrl(name: string, ctrl: Component) {
        if (this.ctrls[name].ctrl === ctrl) {
            delete this.ctrls[name];
        }
    }
    ctrls: Record<string, CtrlItem> = {};

    cancelItemValidateDeffered(name: string) {
        let item = this.ctrls[name];
        if (item?._validateDefferred) {
            item._validateDefferred.cancal = true;
            //取消时只返回name
            item._validateDefferred.resolve({ name, error: "cancel validate" });
            item._validateDefferred = undefined;
            //暂时重置状态
            item.validateState.value = "";
        }
    }

    async validate(ctrlName?: string | string[]) {
        let validateKeys: string[] | undefined;
        if (ctrlName) {
            validateKeys = [ctrlName].flat();
        }

        let validateArray = [];

        for (let name in this.ctrls) {
            if (validateKeys === undefined || validateKeys.length === 0 || validateKeys.includes(name)) {
                validateArray.push(async () => await this.validateItem(name, this.ctrls[name]));
            }
        }

        return new Promise((resolve, reject) => {
            if (validateArray.length) {
                let defArray = [];

                for (let exc of validateArray) {
                    defArray.push(exc());
                }

                Promise.all(defArray)
                    .then((results: any[]) => {
                        if (results.some((m) => m !== undefined)) {
                            let error: Record<string, string> = {};

                            for (let item of results) {
                                if (item) {
                                    error[item.name] = item.error;
                                }
                            }

                            reject(error);
                        } else {
                            resolve(true);
                        }
                    })
                    .catch(() => {
                        reject("form validate error");
                    });
            } else {
                resolve(true);
            }
        });
    }

    async _validateCtrlItem(ctrl: CtrlItem) {
        ctrl.validateState.value = "validating";

        if ("beforeValidate" in ctrl.ctrl && typeof ctrl.ctrl.beforeValidate === "function") {
            await ctrl.ctrl.beforeValidate();
        }

        let value = ctrl.ctrl.model.value;

        //通用验证
        let eMsg = "";

        //自身验证
        if ("ctrlValidate" in ctrl.ctrl && typeof ctrl.ctrl.ctrlValidate === "function") {
            eMsg = await ctrl.ctrl.ctrlValidate(value);
        }

        if (!eMsg) {
            //自定义验证
            if (ctrl.ctrl.props.validate) {
                if (typeof ctrl.ctrl.props.validate === "function") {
                    eMsg = await ctrl.ctrl.props.validate(value, ctrl);
                } else if (Array.isArray(ctrl.ctrl.props.validate)) {
                    for (let item of ctrl.ctrl.props.validate.filter(Boolean)) {
                        if (item && typeof item === "function") {
                            eMsg = await item(value, ctrl);
                            if (eMsg) break;
                        } else {
                            logger.error(
                                LOGTAG,
                                `Form validation: There is an incorrect validation rule configuration for ${ctrl.name}. The validation method does not exist or is not a function.`,
                                item
                            );
                        }
                    }
                } else {
                    logger.error(
                        LOGTAG,
                        `Form validation: There is an incorrect validation rule configuration for ${ctrl.name}. The validation method does not exist or is not a function.`,
                        ctrl.ctrl.props.validate
                    );
                }
            }
        }

        if (eMsg) {
            ctrl.validateState.value = "error";
            return eMsg;
        }

        ctrl.validateState.value = "success";
    }

    private validateItem(name: string, ctrl: CtrlItem) {
        this.cancelItemValidateDeffered(name);

        this.clearError(name);
        return new Promise((resolve) => {
            let self = this;
            ctrl._validateDefferred = {
                resolve,
                cancal: false,
                active: async function () {
                    let validateResut = await self._validateCtrlItem(ctrl).catch((e) => {
                        if (e?.type === "cancel validate") {
                            return;
                        }
                        if (e?.message) {
                            let errMsg = "validate error:" + e?.message;
                            self.showError(name, errMsg);

                            logger.error(LOGTAG, "A forced exception occurred during Form validate inspection.", e);
                        }
                        resolve({ name, error: e?.[name] || e?.message });
                    });

                    if (this.cancal) {
                        ctrl._validateDefferred = undefined;
                        return;
                    }

                    if (validateResut) {
                        self.showError(name, validateResut);
                        resolve({ name, error: validateResut });
                    } else {
                        resolve(undefined);
                    }

                    ctrl._validateDefferred = undefined;
                }
            };

            //start
            ctrl._validateDefferred.active();
        });
    }

    clearError(nameOrCtrl?: string | Component) {
        if (nameOrCtrl === undefined) {
            //clearAll

            for (let name in this.ctrls) {
                this.clearItemError(this.ctrls[name]);
            }

            return;
        }
        let ctrl = this.getCtrlItem(nameOrCtrl);

        if (!ctrl) return;

        this.clearItemError(ctrl);
    }

    clearItemError(ctrl: CtrlItem) {
        //非success 重置
        if (ctrl.validateState.value !== "success") {
            ctrl.validateState.value = "";
        }

        //自定义错误处理
        let customClearErrorMessage = this.props.clearErrorMessage;

        if (customClearErrorMessage) {
            customClearErrorMessage();
            return;
        }
        let formItem = ctrl.formItem;
        if (formItem) {
            formItem.clearErrorMessage();
        }
    }

    showError(nameOrCtrl: string | Component, message: string) {
        let ctrl = this.getCtrlItem(nameOrCtrl);

        if (!ctrl) {
            logger.warn(LOGTAG, `The form control for displaying error messages was not found in the Form.`);
            return;
        }

        ctrl.validateState.value = "error";

        //自定义错误处理
        let customShowErrorMessage = this.props.showErrorMessage;

        if (customShowErrorMessage) {
            if (customShowErrorMessage(ctrl.name, message, ctrl.ctrl) !== false) return;
        }

        if (ctrl.formItem) {
            //使用form-item 做错误信息展示
            ctrl.formItem.showErrorMessage(message);
        } else {
            //使用message做错误提示
            Message.error(message);
        }
    }

    getCtrlItem(nameOrCtrl: string | Component) {
        if (typeof nameOrCtrl === "string") {
            return this.ctrls[nameOrCtrl];
        } else if ("name" in nameOrCtrl.props && nameOrCtrl.props.name && typeof nameOrCtrl.props.name === "string") {
            return this.ctrls[nameOrCtrl.props.name];
        }
    }
}
</script>

