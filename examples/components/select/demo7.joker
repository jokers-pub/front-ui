<template>
    <DemoRow>
        <jk-select filterable>
            <jk-option label="Apple" value="1" />
            <jk-option label="Banana" value="2" />
            <jk-option label="Cherry" value="3" />
            <jk-option label="Date" value="4" />
        </jk-select>
    </DemoRow>
    <DemoRow>
        <jk-select
            placeholder="Asynchronous query search"
            filterable
            remote
            remoteMethod="@queryData"
            loading="@model.loading">
            @for(let item of model.options) {
                <jk-option label="@item.label" value="@item.value" />
            }
        </jk-select>
    </DemoRow>
    <DemoRow>
        <jk-select placeholder="Please select (can create new value)" filterable allowCreate @new="handleCreatNew">
            <jk-option label="Apple" value="1" />
            <jk-option label="Banana" value="2" />
            <jk-option label="Cherry" value="3" />
            <jk-option label="Date" value="4" />
        </jk-select>
    </DemoRow>
</template>

<script>
import { Component, VNode } from "@joker.front/core";
import { sleep } from "@joker.front/shared";
import { Message } from "../../../src";

export default class extends Component {
    model: {
        options: Array<{ label: string; value: string }>;
        loading: boolean;
    } = {
        options: [],
        loading: false
    };

    async queryData(keyword: string) {
        if (keyword) {
            this.model.loading = true;
            let data = [
                { label: "Apple", value: "1" },
                { label: "Banana", value: "2" },
                { label: "Cherry", value: "3" },
                { label: "Date", value: "4" }
            ];

            // Simulate request time-consuming
            await sleep(1000);

            this.model.options = data.filter((m) => {
                return m.label.startsWith(keyword);
            });

            this.model.loading = false;
        }
    }
    handleCreatNew(e: VNode.Event<string>) {
        Message.info("The New event is triggered, creating a new item: " + e.data);
    }
}
</script>