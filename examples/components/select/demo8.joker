<template>
    <div class="container">
        <DemoRow>
            <jk-select multiple filterable>
                <jk-option label="Apple" value="1" />
                <jk-option label="Banana" value="2" />
                <jk-option label="Cherry" value="3" />
                <jk-option label="Date" value="4" />
            </jk-select>
        </DemoRow>
        <DemoRow>
            <jk-select
                placeholder="Asynchronous query search"
                multiple
                filterable
                remote
                remoteMethod="@queryData"
                loading="@model.loading">
                @for(let item of model.options) {
                    <jk-option label="@item.label" value="@item.value" />
                }
            </jk-select>
        </DemoRow>
        <DemoRow>
            <jk-select placeholder="Please select (can add new)" multiple filterable allowCreate>
                <jk-option label="Apple" value="1" />
                <jk-option label="Banana" value="2" />
                <jk-option label="Cherry" value="3" />
                <jk-option label="Date" value="4" />
            </jk-select>
        </DemoRow>
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import { sleep } from "@joker.front/shared";

export default class extends Component {
    model = {
        options: [],
        loading: false
    };

    async queryData(keyword) {
        if (!keyword) return;
        this.model.loading = true;
        const data = [
            { label: "Apple", value: "1" },
            { label: "Banana", value: "2" },
            { label: "Cherry", value: "3" },
            { label: "Date", value: "4" },
            { label: "Eggplant", value: "5" },
            { label: "Fig", value: "6" },
            { label: "Grape", value: "7" },
            { label: "Honeydew", value: "8" },
            { label: "Kiwi", value: "9" },
            { label: "Lemon", value: "10" },
            { label: "Mango", value: "11" },
            { label: "Orange", value: "12" }
        ];

        // Simulate request time-consuming
        await sleep(1000);

        this.model.options = data.filter((m) => {
            return m.label.startsWith(keyword);
        });

        this.model.loading = false;
    }
}
</script>
<style lang="scss" scoped>
.container {
    :deep(.jk-select) {
        width: 240px;
    }
}
</style>