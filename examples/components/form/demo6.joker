<template>
    <jk-form ref="form" @submit="handleFormSubmit" label-width="140px">
        <jk-form-item label="Age">
            <jk-input
                name="age"
                status-icon
                validate="@([Global.isRequired(), Global.isInt(), validateAge])"
                placeholder="Please enter your age"
            />
        </jk-form-item>
        <jk-form-item label="New Password">
            <jk-input
                name="pwd"
                ref="pwd"
                validate="@([Global.isRequired()])"
                placeholder="Please enter your new password"
            />
        </jk-form-item>
        <jk-form-item label="Confirm Password">
            <jk-input
                name="confirmPwd"
                validate="@([Global.isRequired(), validateConfirmPwd])"
                placeholder="Please confirm your password"
            />
        </jk-form-item>
        <jk-form-item>
            <jk-button type="primary" nativeType="submit">Submit</jk-button>
        </jk-form-item>
    </jk-form>
</template>
<script>
import { Component, VNode } from "@joker.front/core";
import { sleep } from "@joker.front/shared";

export default class extends Component {
    async validateAge(value: string) {
        // Simulate a request to implement asynchronous validation
        await sleep(1500);

        // Custom validation is performed last, no need to consider non - empty && positive integer
        let age = parseInt(value);

        if (age < 22) {
            return "You are too young. Come back after you are 22.";
        }

        if (age > 30) {
            return "You are mature enough and don't need to know more.";
        }
    }
    validateConfirmPwd(value) {
        let pwd = this.$getRef("pwd")?.component.value;

        if (pwd !== value) {
            return "The two passwords do not match.";
        }
    }

    async handleFormSubmit(e: VNode.Event) {
        console.log("Verification succeeded", e.data);
    }
}
</script>