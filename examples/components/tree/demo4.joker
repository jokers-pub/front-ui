<template>
    <DemoRow>
        <jk-tree ref="tree" data="@treeData" icon-class="jk-icon-arrow-right" default-expand-all show-checkbox>
            @section("default", node) {
                <div class="node-item">
                    <div class="label">
                        <span class="icon @getNodeIcon(node)"></span>@node.label
                    </div>
                    <div class="option">
                        <jk-link type="primary" @click.stop="appendNode(node)">Add</jk-link>
                        <jk-link type="danger" @click.stop="removeNode(node)">Delete</jk-link>
                    </div>
                </div>
            }
        </jk-tree>
    </DemoRow>
    <jk-button @click="handleClick">Reset</jk-button>
</template>
<script>
import { Component, VNode } from "@joker.front/core";
import { TreeNode } from "../../../packages/tree/store/node";

export default class extends Component {
    treeData = [
        {
            label: "Level 1 - 1",
            children: [
                {
                    label: "Level 2 - 1-1",
                    children: [
                        {
                            label: "Level 3 - 1-1-1"
                        }
                    ]
                }
            ]
        },
        {
            label: "Level 1 - 2",
            children: [
                {
                    label: "Level 2 - 2-1",
                    children: [
                        {
                            label: "Level 3 - 2-1-1"
                        }
                    ]
                },
                {
                    label: "Level 2 - 2-2",
                    children: [
                        {
                            label: "Level 3 - 2-2-1"
                        },
                        {
                            label: "Level 3 - 2-2-2"
                        },
                        {
                            label: "Level 3 - 2-2-3"
                        }
                    ]
                }
            ]
        },
        {
            label: "Level 1 - 3",
            children: [
                {
                    label: "Level 2 - 3-1"
                },
                {
                    label: "Level 2 - 3-2",
                    children: [
                        {
                            label: "Level 3 - 3-2-1"
                        }
                    ]
                }
            ]
        }
    ];

    getNodeIcon(node: TreeNode) {
        if (node.level === 1) {
            return "jk-icon-food";
        } else if (node.level === 2) {
            return "jk-icon-cpu";
        } else {
            return "jk-icon-connection";
        }
    }

    appendNode(e: VNode.Event, node: TreeNode) {
        let child = node.insterChild({
            label: "Test adding node " + (node.level + 1)
        });

        // Since it is dynamically added, for the checkbox, you need to set the checkbox once to refresh the tree.
        // This line of code is only for the demo to run.
        // Generally, there will not be a dynamic tree with checkboxes.
        child.setChecked(false);
    }

    removeNode(e: VNode.Event, node: TreeNode) {
        node.remove();
    }

    handleClick() {
        this.$getRef("tree").component.reload();
    }
}
</script>

<style lang="scss" scoped>
.node-item {
    display: flex;
    flex: 1;

    font-size: 14px;
    .label {
        flex: 1;
        overflow: hidden;
    }

    .icon {
        margin-right: 8px;
    }

    .option {
        :deep(.jk-link) {
            margin-right: 10px;
        }
    }
}
</style>