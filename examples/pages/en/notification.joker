<template>
    <div ref="container" class="joker-demo-container">
        <h2>Notification</h2>
        <p>
            A notification bubble that appears floating in the corner of the page, displaying global notification messages.
        </p>
        <h3>Basic Usage</h3>
        <p>
            A versatile notification bar, the Notification component provides notification functionality through the
            <code>Notification</code>
            method, which accepts an
            <code>options</code>
            literal parameter. At its simplest, you can set the
            <code>title</code>
            and
            <code>message</code>
            fields to configure the notification's heading and content. By default, the Notification component will automatically close after a certain period, but the
            <code>duration</code>
            parameter can be used to control the timeout interval. Notably, setting it to
            <code>0</code>
            will disable auto-closing. Note:
            <code>duration</code>
            accepts a
            <code>Number</code>
            in milliseconds, with a default value of
            <code>4500</code>
            .
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo1)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-button @click=&quot;open&quot;&gt;Can close automatically&lt;/jk-button&gt;
    &lt;jk-button @click=&quot;open1&quot;&gt;Will not close automatically&lt;/jk-button&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { Notification } from &quot;../../../src&quot;;
export default class extends Component {
    open() {
        Notification({ title: &quot;Prompt&quot;, message: &quot;I'm a prompt&quot; });
    }
    open1() {
        Notification({
            title: &quot;Prompt&quot;,
            message: &quot;I'm a prompt&quot;,
            duration: 0,
            onClick: () =&gt; {
                alert(&quot;You clicked me&quot;);
            }
        });
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Contextual Notifications</h3>
        <p>
            Notifications with icons, typically used to display system messages categorized as &quot;success,&quot; &quot;warning,&quot; &quot;info,&quot; or &quot;error.&quot;
        </p>
        <p>
            The Notification component provides four predefined types:
            <code>success</code>
            ,
            <code>warning</code>
            ,
            <code>info</code>
            , and
            <code>error</code>
            . These can be set via the
            <code>type</code>
            field—any other values will be ignored. Additionally, methods are registered for each type, allowing direct invocation (as in
            <code>open3</code>
            and
            <code>open4</code>
            ) without explicitly setting the
            <code>type</code>
            field.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo2)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-button @click=&quot;open1&quot;&gt;Success&lt;/jk-button&gt;
    &lt;jk-button @click=&quot;open2&quot;&gt;Warning&lt;/jk-button&gt;
    &lt;jk-button @click=&quot;open3&quot;&gt;Info&lt;/jk-button&gt;
    &lt;jk-button @click=&quot;open4&quot;&gt;Error&lt;/jk-button&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { Notification } from &quot;../../../src&quot;;
export default class extends Component {
    open1() {
        Notification({
            type: &quot;success&quot;,
            title: &quot;Prompt&quot;,
            message: &quot;I'm a prompt&quot;
        });
    }
    open2() {
        Notification({
            type: &quot;warning&quot;,
            title: &quot;Prompt&quot;,
            message: &quot;I'm a prompt&quot;
        });
    }
    open3() {
        Notification.info({
            title: &quot;Prompt&quot;,
            message: &quot;I'm a prompt&quot;
        });
    }
    open4() {
        Notification.error({
            title: &quot;Prompt&quot;,
            message: &quot;I'm a prompt&quot;
        });
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Custom Position</h3>
        <p>
            Notifications can appear from any of the four corners of the screen. Use the
            <code>position</code>
            attribute to define the popup location, supporting four options:
            <code>top-right</code>
            ,
            <code>top-left</code>
            ,
            <code>bottom-right</code>
            , and
            <code>bottom-left</code>
            (default:
            <code>top-right</code>
            ).
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo3)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-button @click=&quot;open1&quot;&gt;Top right&lt;/jk-button&gt;
    &lt;jk-button @click=&quot;open2&quot;&gt;Bottom right&lt;/jk-button&gt;
    &lt;jk-button @click=&quot;open3&quot;&gt;Bottom left&lt;/jk-button&gt;
    &lt;jk-button @click=&quot;open4&quot;&gt;Top left&lt;/jk-button&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { Notification } from &quot;../../../src&quot;;
export default class extends Component {
    open1() {
        Notification({
            // Default
            position: &quot;top-right&quot;,
            title: &quot;Prompt&quot;,
            message: &quot;I'm a prompt&quot;
        });
    }
    open2() {
        Notification({
            position: &quot;bottom-right&quot;,
            title: &quot;Prompt&quot;,
            message: &quot;I'm a prompt&quot;
        });
    }
    open3() {
        Notification({
            position: &quot;bottom-left&quot;,
            title: &quot;Prompt&quot;,
            message: &quot;I'm a prompt&quot;
        });
    }
    open4() {
        Notification({
            position: &quot;top-left&quot;,
            title: &quot;Prompt&quot;,
            message: &quot;I'm a prompt&quot;
        });
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Offset</h3>
        <p>
            Apply an offset to adjust the notification's position. The Notification component supports setting an offset distance via the
            <code>offset</code>
            field, shifting notifications away from the screen edge. Note: All active Notification instances should share the same offset value at any given time.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo4)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-button @click=&quot;open&quot;&gt;Offset warning&lt;/jk-button&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { Notification } from &quot;../../../src&quot;;
export default class extends Component {
    open() {
        Notification({
            offset: 100,
            title: &quot;Prompt&quot;,
            message: &quot;I'm a prompt&quot;
        });
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>HTML Fragments</h3>
        <p>
            The
            <code>message</code>
            attribute supports HTML fragments when the
            <code>useHtml</code>
            property is set to
            <code>true</code>
            , treating the content as markup rather than plain text.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo5)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-button @click=&quot;open&quot;&gt;Pop up an HTML warning&lt;/jk-button&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { Notification } from &quot;../../../src&quot;;

export default class extends Component {
    open() {
        Notification({
            title: &quot;Prompt&quot;,
            type: &quot;success&quot;,
            useHtml: true,
            message: &quot;Successfully received &lt;span style='color:red'&gt;3,000&lt;/span&gt; yuan transferred from Zhang San&quot;
        });
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <div class="warning">
            <p>
                Although the
                <code>message</code>
                property supports HTML fragments, dynamically rendering arbitrary HTML on a website is highly dangerous due to the risk of
                <a href="https://en.wikipedia.org/wiki/Cross-site_scripting" target="_blank">XSS attacks</a>
                . When enabling
                <code>useHtml</code>
                , ensure the
                <code>message</code>
                content is trustworthy, and
                <strong>never</strong>
                assign user-submitted data to this attribute.
            </p>
        </div>
        <blockquote>
            <p>
                The Notification component provides a
                <code>closeAll</code>
                method to clear all active messages at specific business moments.
            </p>
        </blockquote>
        <h3>Options</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Parameter</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Accepted Values</th>
                    <th>Default</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>title</td>
                    <td>Notification title</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>message</td>
                    <td>Notification text content</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>useHtml</td>
                    <td>
                        Whether to treat
                        <code>message</code>
                        as HTML markup
                    </td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>type</td>
                    <td>Notification type, ignored if not a predefined value</td>
                    <td>string</td>
                    <td>success/warning/info/error</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>iconClass</td>
                    <td>
                        Custom icon class name (overridden if
                        <code>type</code>
                        is set)
                    </td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>customClass</td>
                    <td>Custom CSS class for the notification</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>duration</td>
                    <td>
                        Display duration in milliseconds. Set to
                        <code>0</code>
                        to disable auto-close
                    </td>
                    <td>number</td>
                    <td>—</td>
                    <td>4500</td>
                </tr>
                <tr>
                    <td>position</td>
                    <td>Notification popup position</td>
                    <td>string</td>
                    <td>top-right/top-left/bottom-right/bottom-left</td>
                    <td>top-right</td>
                </tr>
                <tr>
                    <td>closable</td>
                    <td>Whether to show the close button</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>true</td>
                </tr>
                <tr>
                    <td>onClose</td>
                    <td>Callback function when notification closes</td>
                    <td>function</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>onClick</td>
                    <td>Callback function when notification is clicked</td>
                    <td>function</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>offset</td>
                    <td>Offset distance from the screen edge (consistent for all active instances)</td>
                    <td>number</td>
                    <td>—</td>
                    <td>0</td>
                </tr>
            </tbody>
        </table>
        <h3>Methods</h3>
        <p>
            Invoking
            <code>Notification</code>
            returns the current notification instance. To manually close it, call the
            <code>close</code>
            method.
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Method</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>close</td>
                    <td>Closes the current Notification instance</td>
                </tr>
            </tbody>
        </table>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo5 from "../../components/notification/demo5.joker";
import DEMO_JOKER_demo4 from "../../components/notification/demo4.joker";
import DEMO_JOKER_demo3 from "../../components/notification/demo3.joker";
import DEMO_JOKER_demo2 from "../../components/notification/demo2.joker";
import DEMO_JOKER_demo1 from "../../components/notification/demo1.joker";
export default class extends Component {
    components = {
        BottomNav,
        DEMO_JOKER_demo5,
        DEMO_JOKER_demo4,
        DEMO_JOKER_demo3,
        DEMO_JOKER_demo2,
        DEMO_JOKER_demo1
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>