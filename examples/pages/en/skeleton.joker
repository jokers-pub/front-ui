<template>
    <div ref="container" class="joker-demo-container">
        <h2>Skeleton Screen</h2>
        <p>
            Display skeleton placeholders during content loading for better visual experience than traditional loading indicators in certain scenarios.
        </p>
        <h3>Basic Usage</h3>
        <p>Basic skeleton screen effect.</p>
        <DemoContainer component="@(components.DEMO_JOKER_demo1)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-skeleton /&gt;
&lt;/template&gt;
</code></pre>
        </DemoContainer>
        <h3>Additional Parameters</h3>
        <p>
            Configure the number of skeleton paragraphs to better simulate the actual rendering effect. The first line will render a paragraph header with 33% width.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo2)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-skeleton rows=&quot;6&quot; count=&quot;2&quot; /&gt;
&lt;/template&gt;
</code></pre>
        </DemoContainer>
        <h3>Animation Effect</h3>
        <p>Enable animated loading effect.</p>
        <DemoContainer component="@(components.DEMO_JOKER_demo3)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-skeleton rows=&quot;6&quot; animated /&gt;
&lt;/template&gt;
</code></pre>
        </DemoContainer>
        <h3>Custom Styles</h3>
        <p>
            The layout patterns provided by Joker-UI may not always meet requirements. You can define custom templates by using named slots.
        </p>
        <p>
            We provide different template units for useâ€”refer to the API documentation for available options. When designing templates, aim to closely match the actual DOM structure to prevent layout shifts caused by height discrepancies.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo4)">
            <pre><code class="language-html">
&lt;template&gt;
    &lt;jk-skeleton style=&quot;width: 240px&quot;&gt;
        @section(&quot;template&quot;) {
            &lt;jk-skeleton-item variant=&quot;image&quot; style=&quot;width: 240px; height: 240px;&quot; /&gt;
            &lt;div style=&quot;padding: 14px;&quot;&gt;
                &lt;jk-skeleton-item variant=&quot;p&quot; style=&quot;width: 50%&quot; /&gt;
                &lt;div style=&quot;display: flex; align-items: center; justify-content: space-between;margin-top: 16px&quot;&gt;
                    &lt;jk-skeleton-item variant=&quot;text&quot; style=&quot;margin-right: 16px;&quot; /&gt;
                    &lt;jk-skeleton-item variant=&quot;text&quot; style=&quot;width: 30%;&quot; /&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        }
    &lt;/jk-skeleton&gt;
&lt;/template&gt;
</code></pre>
        </DemoContainer>
        <h3>Loading State</h3>
        <p>
            After loading completes, the actual UI typically needs to be displayed. Control the rendering of the real DOM using the
            <code>loading</code>
            property, and use named slots to define the UI to be shown post-loading.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo5)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div style=&quot;width: 240px&quot;&gt;
        &lt;p&gt;
            &lt;label style=&quot;margin-right: 16px;&quot;&gt;Toggle Loading&lt;/label&gt;
            &lt;jk-switch value=&quot;@model.loading&quot; @change=&quot;switchChange&quot; /&gt;
        &lt;/p&gt;
        &lt;jk-skeleton style=&quot;width: 240px&quot; loading=&quot;@model.loading&quot; animated&gt;
            @section(&quot;template&quot;) {
                &lt;jk-skeleton-item variant=&quot;image&quot; style=&quot;width: 240px; height: 240px;&quot; /&gt;
                &lt;div style=&quot;padding: 14px;&quot;&gt;
                    &lt;jk-skeleton-item variant=&quot;h3&quot; style=&quot;width: 50%;&quot; /&gt;
                    &lt;div
                        style=&quot;display: flex; align-items: center; justify-content: space-between; margin-top: 16px; height: 16px;&quot;&gt;
                        &lt;jk-skeleton-item variant=&quot;text&quot; style=&quot;margin-right: 16px;&quot; /&gt;
                        &lt;jk-skeleton-item variant=&quot;text&quot; style=&quot;width: 30%;&quot; /&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            }
            &lt;img src=&quot;/static/skeleton/horse.png&quot; style=&quot;width:240px&quot; /&gt;
        &lt;/jk-skeleton&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = { loading: true };

    switchChange(e: VNode.Event) {
        this.model.loading = e.data!;
    }
}
&lt;/script&gt;

</code></pre>
        </DemoContainer>
        <h3>Rendering Multiple Items</h3>
        <p>
            Skeleton screens are commonly used to render lists while waiting for server data. The
            <code>count</code>
            property determines how many placeholder items are displayed.
        </p>
        <p>
            <strong>Note:</strong>
            Keep the
            <code>count</code>
            value as low as possible. Even placeholder UI elements can impact performance if excessive, and a higher count may prolong teardown time.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo6)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div style=&quot;width: 400px&quot;&gt;
        &lt;p&gt;
            &lt;jk-button @click=&quot;setLoading&quot;&gt;Click me to reload.&lt;/jk-button&gt;
        &lt;/p&gt;
        &lt;jk-skeleton style=&quot;width:400px&quot; loading=&quot;@model.loading&quot; animated count=&quot;3&quot;&gt;
            @section(&quot;template&quot;) {
                &lt;jk-skeleton-item variant=&quot;image&quot; style=&quot;width: 400px; height: 267px;&quot; /&gt;
                &lt;div style=&quot;padding: 14px;&quot;&gt;
                    &lt;jk-skeleton-item variant=&quot;h3&quot; style=&quot;width: 50%;&quot; /&gt;
                    &lt;div
                        style=&quot;display: flex; align-items: center; justify-content: space-between; margin-top: 16px; height: 16px;&quot;&gt;
                        &lt;jk-skeleton-item variant=&quot;text&quot; style=&quot;margin-right: 16px;&quot; /&gt;
                        &lt;jk-skeleton-item variant=&quot;text&quot; style=&quot;width: 30%;&quot; /&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            }
            @section(&quot;default&quot;) {
                &lt;img src=&quot;/static/skeleton/horse.png&quot; style=&quot;width:240px;margin-bottom:10px;&quot; /&gt;
                &lt;img src=&quot;/static/skeleton/tiger.png&quot; style=&quot;width:240px;margin-bottom:10px;&quot; /&gt;
                &lt;img src=&quot;/static/skeleton/rabbit.png&quot; style=&quot;width:240px;margin-bottom:10px;&quot; /&gt;
            }
        &lt;/jk-skeleton&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = { loading: false };
    setLoading() {
        this.model.loading = true;
        setTimeout(() =&gt; (this.model.loading = false), 2000);
    }
}
&lt;/script&gt;

</code></pre>
        </DemoContainer>
        <h3>Preventing Rendering Flicker</h3>
        <p>
            If API responses are extremely fast, the skeleton placeholder may briefly appear before real data loads, causing a flicker effect. Use the
            <code>throttle</code>
            property to mitigate this issue.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo7)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div style=&quot;width: 240px&quot;&gt;
        &lt;p&gt;
            &lt;label style=&quot;margin-right: 16px;&quot;&gt;Toggle Loading&lt;/label&gt;
            &lt;jk-switch value=&quot;@model.loading&quot; @change=&quot;switchChange&quot; /&gt;
        &lt;/p&gt;
        &lt;jk-skeleton style=&quot;width: 240px&quot; loading=&quot;@model.loading&quot; animated throttle=&quot;500&quot;&gt;
            @section(&quot;template&quot;) {
                &lt;jk-skeleton-item variant=&quot;image&quot; style=&quot;width: 240px; height: 240px;&quot; /&gt;
                &lt;div style=&quot;padding: 14px;&quot;&gt;
                    &lt;jk-skeleton-item variant=&quot;h3&quot; style=&quot;width: 50%;&quot; /&gt;
                    &lt;div
                        style=&quot;display: flex; align-items: center; justify-content: space-between; margin-top: 16px; height: 16px;&quot;&gt;
                        &lt;jk-skeleton-item variant=&quot;text&quot; style=&quot;margin-right: 16px;&quot; /&gt;
                        &lt;jk-skeleton-item variant=&quot;text&quot; style=&quot;width: 30%;&quot; /&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            }
            &lt;img src=&quot;/static/skeleton/horse.png&quot; style=&quot;width:240px&quot; /&gt;
        &lt;/jk-skeleton&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = { loading: true };

    switchChange(e: VNode.Event) {
        this.model.loading = e.data!;
    }
}
&lt;/script&gt;


</code></pre>
        </DemoContainer>
        <h3>Skeleton Attributes</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Parameter</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Options</th>
                    <th>Default</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>class</td>
                    <td>Custom CSS class</td>
                    <td>string</td>
                    <td>â€”</td>
                    <td>â€”</td>
                </tr>
                <tr>
                    <td>animated</td>
                    <td>Whether to enable animation</td>
                    <td>boolean</td>
                    <td>true / false</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>count</td>
                    <td>Number of template instances to render (keep low)</td>
                    <td>number</td>
                    <td>integer</td>
                    <td>1</td>
                </tr>
                <tr>
                    <td>loading</td>
                    <td>Whether to display skeleton placeholders</td>
                    <td>boolean</td>
                    <td>true / false</td>
                    <td>true</td>
                </tr>
                <tr>
                    <td>rows</td>
                    <td>Number of skeleton paragraphs</td>
                    <td>number</td>
                    <td>positive integer</td>
                    <td>4</td>
                </tr>
                <tr>
                    <td>throttle</td>
                    <td>Delay (ms) before rendering placeholder DOM</td>
                    <td>number</td>
                    <td>positive integer</td>
                    <td>0</td>
                </tr>
                <tr>
                    <td>style</td>
                    <td>Inline CSS styles</td>
                    <td>string</td>
                    <td>â€”</td>
                    <td>â€”</td>
                </tr>
            </tbody>
        </table>
        <h3>SkeletonItem Attributes</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Parameter</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Options</th>
                    <th>Default</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>variant</td>
                    <td>Placeholder element style</td>
                    <td>Enum (string)</td>
                    <td>p / h1 / h3 / text / caption / button / image / circle / rect</td>
                    <td>text</td>
                </tr>
                <tr>
                    <td>style</td>
                    <td>Inline CSS styles</td>
                    <td>string</td>
                    <td>â€”</td>
                    <td>â€”</td>
                </tr>
                <tr>
                    <td>class</td>
                    <td>Custom CSS class</td>
                    <td>string</td>
                    <td>â€”</td>
                    <td>â€”</td>
                </tr>
            </tbody>
        </table>
        <h3>Skeleton Slots</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>default</td>
                    <td>Displays actual UI content</td>
                </tr>
                <tr>
                    <td>template</td>
                    <td>Displays custom placeholder UI</td>
                </tr>
            </tbody>
        </table>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo7 from "../../components/skeleton/demo7.joker";
import DEMO_JOKER_demo6 from "../../components/skeleton/demo6.joker";
import DEMO_JOKER_demo5 from "../../components/skeleton/demo5.joker";
import DEMO_JOKER_demo4 from "../../components/skeleton/demo4.joker";
import DEMO_JOKER_demo3 from "../../components/skeleton/demo3.joker";
import DEMO_JOKER_demo2 from "../../components/skeleton/demo2.joker";
import DEMO_JOKER_demo1 from "../../components/skeleton/demo1.joker";
export default class extends Component {
    components = {
        BottomNav,
        DEMO_JOKER_demo7,
        DEMO_JOKER_demo6,
        DEMO_JOKER_demo5,
        DEMO_JOKER_demo4,
        DEMO_JOKER_demo3,
        DEMO_JOKER_demo2,
        DEMO_JOKER_demo1
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>