<template>
<div ref='container' class='joker-demo-container'>
<h2>AutoComplete</h2>
<p>Provides corresponding input suggestions based on the input content.</p>
<h3>Basic Usage</h3>
<p><code>autocomplete</code> is an input box component with input suggestions. <code>search-load</code> is a method attribute that returns input suggestions. In this method, when your input suggestion data is ready, you can return it to the <code>autocomplete</code> component through <code>callback(data)</code>.</p>
<DemoContainer component="@(components.DEMO_JOKER_demo1)">
<pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;demoContainer&quot;&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;span&gt;List input suggestions upon activation:&lt;/span&gt;
            &lt;jk-autocomplete
                placeholder=&quot;Please enter content&quot;
                searchLoad=&quot;@querString&quot;
                @change=&quot;handleChange&quot;&gt;&lt;/jk-autocomplete&gt;
        &lt;/div&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;span&gt;Match input suggestions after input:&lt;/span&gt;
            &lt;jk-autocomplete
                placeholder=&quot;Please enter content&quot;
                searchLoad=&quot;@querString&quot;
                triggerOnFocus=&quot;@false&quot;
                clearable
                @change=&quot;handleChange&quot;&gt;&lt;/jk-autocomplete&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { mock } from &quot;./mock&quot;;
import { sleep } from &quot;@joker.front/shared&quot;;
export default class extends Component {
    options = mock();

    async querString(keyword: string, cb: Function) {
        //模拟数据查询
        await sleep(1000);

        let result: any[] = [];

        for (let item of this.options) {
            if (item.value.toLowerCase().indexOf(keyword.toLowerCase()) &gt; -1) {
                result.push(item);
            }
        }

        cb(result);
    }
    handleChange(e: VNode.Event&lt;string&gt;) {
        alert(e.data);
    }
}
&lt;/script&gt;


&lt;style lang=&quot;scss&quot; scoped&gt;
.demoContainer {
    :deep(.jk-autocomplete) {
        width: 250px;
    }

    .row {
        padding: 30px 24px;
        overflow: hidden;
        border-bottom: 1px solid #eff2f6;

        span {
            font-size: 14px;
            color: #8492a6;
            line-height: 44px;
            font-size: 16px;
        }

        &amp;:last-child {
            border-bottom: none;
        }
    }
}
&lt;/style&gt;
</code></pre>
</DemoContainer>
<h3>Custom Template</h3>
<p>You can customize the display of input suggestions.
Use <code>section</code> to customize the template of input suggestions. The parameter is <code>item</code>, representing the current input suggestion object.</p>
<DemoContainer component="@(components.DEMO_JOKER_demo2)">
<pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;demoContainer&quot;&gt;
        &lt;DemoRow&gt;
            &lt;jk-autocomplete placeholder=&quot;Please enter content.&quot; searchLoad=&quot;@querString&quot;&gt;
                @section(&quot;default&quot;, item) {
                    &lt;p class=&quot;name&quot;&gt;
                        @item.value
                    &lt;/p&gt;
                    &lt;p class=&quot;addr&quot;&gt;
                        @item.address
                    &lt;/p&gt;
                }
                @section(&quot;suffix&quot;) {
                    &lt;i class=&quot;jk-icon-edit&quot;&gt;&lt;/i&gt;
                }
            &lt;/jk-autocomplete&gt;
        &lt;/DemoRow&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { mock } from &quot;./mock&quot;;
export default class extends Component {
    options = mock();

    async querString(keyword: string, cb: Function) {
        let result: any[] = [];

        for (let item of this.options) {
            if (item.value.toLowerCase().indexOf(keyword.toLowerCase()) &gt; -1) {
                result.push(item);
            }
        }

        cb(result);
    }
}
&lt;/script&gt;


&lt;style lang=&quot;scss&quot; scoped&gt;
.demoContainer {
    :deep(.jk-autocomplete) {
        width: 250px;
    }
}

p.name,
p.addr {
    margin: 0;
    padding: 0;
}
p.name {
    text-overflow: ellipsis;
    overflow: hidden;
}

p.addr {
    font-size: 12px;
    color: #b4b4b4;
    line-height: 20px;
}
&lt;/style&gt;
</code></pre>
</DemoContainer>
<h3>Autocomplete Attributes</h3>
<table class="mkd-table">
<thead>
<tr>
<th>Parameter</th>
<th>Description</th>
<th>Type</th>
<th>Optional Values</th>
<th>Default Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>placeholder</td>
<td>Placeholder text of the input box</td>
<td>string</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>disabled</td>
<td>Disable</td>
<td>boolean</td>
<td>—</td>
<td>false</td>
</tr>
<tr>
<td>value-key</td>
<td>The key name in the input suggestion object used for display</td>
<td>string</td>
<td>—</td>
<td>value</td>
</tr>
<tr>
<td>search-load</td>
<td>The method to return input suggestions. Only when your input suggestion data is resolved, return it by calling <code>callback(data:[])</code></td>
<td>Function(queryString, callback)</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>trigger-on-focus</td>
<td>Whether to display the suggestion list when the input box gets focus</td>
<td>boolean</td>
<td>—</td>
<td>true</td>
</tr>
<tr>
<td>class</td>
<td>Custom class style</td>
<td>string</td>
<td>-</td>
<td>-</td>
</tr>
</tbody>
</table>
<h3>Autocomplete Sections</h3>
<table class="mkd-table">
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>default</td>
<td>Customize input suggestions, with the parameter <code>{ item }</code></td>
</tr>
<tr>
<td>prefix</td>
<td>Content at the head of the input box</td>
</tr>
<tr>
<td>suffix</td>
<td>Content at the tail of the input box</td>
</tr>
<tr>
<td>prepend</td>
<td>Pre-placed content of the input box</td>
</tr>
<tr>
<td>append</td>
<td>Post-placed content of the input box</td>
</tr>
</tbody>
</table>
<h3>Events</h3>
<table class="mkd-table">
<thead>
<tr>
<th>Event Name</th>
<th>Description</th>
<th>Callback Parameters</th>
</tr>
</thead>
<tbody>
<tr>
<td>select</td>
<td>Triggered when clicking to select a suggested item</td>
<td>The selected suggested item</td>
</tr>
<tr>
<td>change</td>
<td>Triggered when the value of the Input changes</td>
<td>(value: string | number)</td>
</tr>
</tbody>
</table>
<h3>Methods</h3>
<table class="mkd-table">
<thead>
<tr>
<th>Method Name</th>
<th>Description</th>
<th>Parameter</th>
</tr>
</thead>
<tbody>
<tr>
<td>focus</td>
<td>Make the input get focus</td>
<td>-</td>
</tr>
</tbody>
</table>

<BottomNav />
</div>
</template>
<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo2 from '../../components/autocomplete/demo2.joker';
import DEMO_JOKER_demo1 from '../../components/autocomplete/demo1.joker';
export default class extends Component {
components={
BottomNav,
DEMO_JOKER_demo2,
DEMO_JOKER_demo1
}
mounted(){
let container= this.$getRef('container')?.output!;
container.querySelectorAll('pre code').forEach((el:HTMLElement) => {
        hljs.highlightElement(el);
      });
}
}
</script>