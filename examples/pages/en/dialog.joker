<template>
    <div ref="container" class="joker-demo-container">
        <h2>Dialog</h2>
        <p>
            Displays a dialog window while preserving current page state to present information and handle related operations.
        </p>
        <h3>Basic Usage</h3>
        <p>The Dialog component creates a customizable pop-up dialog for scenarios requiring higher flexibility.</p>
        <p>
            Control the dialog's visibility using the
            <code>open</code>
            /
            <code>close</code>
            component methods. A Dialog consists of two sections:
            <code>body</code>
            and
            <code>footer</code>
            , where the footer must be a named
            <code>section</code>
            with the slot name
            <code>footer</code>
            . The
            <code>title</code>
            property defines an optional header title (default: empty). This example also demonstrates the usage of
            <code>before-close</code>
            .
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo1)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-button @click=&quot;open&quot;&gt;Click to open Dialog&lt;/jk-button&gt;
        &lt;jk-button @click=&quot;open1&quot;&gt;Full-screen window&lt;/jk-button&gt;
        &lt;jk-button @click=&quot;open2&quot;&gt;Window with extremely long content&lt;/jk-button&gt;
        &lt;jk-dialog ref=&quot;dialog&quot; title=&quot;Basic display&quot; width=&quot;30%&quot; before-close=&quot;@dialogBeforeClose&quot;&gt;
            &lt;p&gt;I'm the content inside the dialog.&lt;/p&gt;
            &lt;jk-select&gt;
                &lt;jk-option label=&quot;Option 1&quot; value=&quot;1&quot;&gt;&lt;/jk-option&gt;
                &lt;jk-option label=&quot;Option 2&quot; value=&quot;2&quot;&gt;&lt;/jk-option&gt;
                &lt;jk-option label=&quot;Option 3&quot; value=&quot;3&quot;&gt;&lt;/jk-option&gt;
            &lt;/jk-select&gt;
            @section(&quot;footer&quot;) {
                &lt;jk-button @click=&quot;handleDialogCancelClick&quot;&gt;Cancel&lt;/jk-button&gt;
                &lt;jk-button type=&quot;primary&quot; @click=&quot;handleDialogConfirmClick&quot;&gt;OK&lt;/jk-button&gt;
            }
        &lt;/jk-dialog&gt;
    &lt;/DemoRow&gt;
    &lt;jk-dialog ref=&quot;dialog1&quot; fullscreen title=&quot;Full-screen display&quot;&gt;&lt;/jk-dialog&gt;
    &lt;jk-dialog ref=&quot;dialog2&quot; title=&quot;Window with extremely long content&quot;&gt;
        &lt;ul&gt;
            @for(let i = 0; i &lt; 100; i++) {
                &lt;li&gt;
                    I'm line @(i)
                    .
                &lt;/li&gt;
            }
        &lt;/ul&gt;
    &lt;/jk-dialog&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { MessageBox } from &quot;../../../src&quot;;

export default class extends Component {
    open() {
        this.$getRef(&quot;dialog&quot;)?.component.open();
    }
    open1() {
        this.$getRef(&quot;dialog1&quot;)?.component.open();
    }
    open2() {
        this.$getRef(&quot;dialog2&quot;)?.component.open();
    }
    dialogBeforeClose(close: Function) {
        MessageBox.confirm(&quot;Are you sure you want to close?&quot;, {
            title: &quot;Prompt&quot;,
            callback(action) {
                if (action === &quot;confirm&quot;) {
                    close();
                }
            }
        });
    }
    handleDialogCancelClick() {
        this.$getRef(&quot;dialog&quot;)?.component.close();
    }

    handleDialogConfirmClick() {
        this.$getRef(&quot;dialog&quot;)?.component.close();
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <blockquote>
            <p>
                <code>before-close</code>
                only takes effect when the user closes the Dialog by clicking the close icon or the modal backdrop.
            </p>
        </blockquote>
        <h3>Nested Dialog</h3>
        <p>
            To nest a Dialog inside another Dialog, set the
            <code>append-to</code>
            property to
            <code>body</code>
            .
        </p>
        <p>
            Nested Dialogs are generally discouraged. If multiple Dialogs must coexist, keep them at the same hierarchy level. For unavoidable nesting, the
            <code>append-to</code>
            property ensures proper layering by appending the inner Dialog to the
            <code>&lt;body&gt;</code>
            element.
            <strong>
                Refer to core documentation for details on
                <code>append-to</code>
            </strong>
            .
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo2)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-button @click=&quot;open&quot;&gt;Open Window&lt;/jk-button&gt;
        &lt;jk-dialog ref=&quot;dialog&quot; title=&quot;Level 1 Window&quot;&gt;
            &lt;p&gt;I'm the content of the outer level 1 window.&lt;/p&gt;
            &lt;jk-dialog ref=&quot;dialog2&quot; title=&quot;Level 2 Nested Window&quot; width=&quot;30%&quot;&gt;
                &lt;p&gt;I'm the content inside the dialog (by default, all windows use append-to=&amp;quot;body&amp;quot;).&lt;/p&gt;
            &lt;/jk-dialog&gt;
            @section(&quot;footer&quot;) {
                &lt;jk-button type=&quot;primary&quot; @click=&quot;openChildren1&quot;&gt;Open Parallel Child Window&lt;/jk-button&gt;
                &lt;jk-button type=&quot;warning&quot; @click=&quot;openChildren2&quot;&gt;Open Nested Child Window&lt;/jk-button&gt;
            }
        &lt;/jk-dialog&gt;
        &lt;jk-dialog ref=&quot;dialog1&quot; title=&quot;Level 2 Parallel Window&quot; width=&quot;30%&quot;&gt;
            &lt;p&gt;I'm the content inside the dialog (parallel window, it's recommended to use it like this).&lt;/p&gt;
        &lt;/jk-dialog&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;

export default class extends Component {
    open() {
        this.$getRef(&quot;dialog&quot;)?.component.open();
    }
    openChildren1() {
        this.$getRef(&quot;dialog1&quot;)?.component.open();
    }
    openChildren2() {
        this.$getRef(&quot;dialog2&quot;)?.component.open();
    }
}
&lt;/script&gt;


</code></pre>
        </DemoContainer>
        <blockquote>
            <p>
                Note:
                <code>append-to</code>
                only affects DOM output structure, not the VNode hierarchy. The component still follows the development-time parent-child lifecycle and destruction mechanisms without requiring manual intervention.
            </p>
        </blockquote>
        <h3>Centered Layout</h3>
        <p>
            Enable horizontal centering for the header and footer by setting
            <code>center</code>
            to
            <code>true</code>
            . Note:
            <code>center</code>
            only applies to these sections. Dialog content can be freely structured; for centering content, apply custom CSS as needed.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo3)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-button @click=&quot;open&quot;&gt;Click to open Dialog&lt;/jk-button&gt;
        &lt;jk-dialog ref=&quot;dialog&quot; center title=&quot;Basic Display&quot; width=&quot;30%&quot;&gt;
            &lt;p&gt;I'm the content inside the dialog.&lt;/p&gt;
            @section(&quot;footer&quot;) {
                &lt;jk-button @click=&quot;handleDialogCancelClick&quot;&gt;Cancel&lt;/jk-button&gt;
                &lt;jk-button type=&quot;primary&quot; @click=&quot;handleDialogConfirmClick&quot;&gt;OK&lt;/jk-button&gt;
            }
        &lt;/jk-dialog&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;

export default class extends Component {
    open() {
        this.$getRef(&quot;dialog&quot;)?.component.open();
    }

    handleDialogCancelClick() {
        this.$getRef(&quot;dialog&quot;)?.component.close();
    }

    handleDialogConfirmClick() {
        this.$getRef(&quot;dialog&quot;)?.component.close();
    }
}
&lt;/script&gt;


</code></pre>
        </DemoContainer>
        <blockquote>
            <p>
                Dialog content is lazily renderedâ€”default slots are not mounted to the DOM until the first opening. For DOM operations or
                <code>ref</code>
                access, perform them in the
                <code>open</code>
                event callback.
            </p>
        </blockquote>
        <h3>Draggable Dialog</h3>
        <p>
            Enable free dragging by setting the
            <code>draggable</code>
            property.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo4)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-button @click=&quot;open&quot;&gt;Click to open Dialog&lt;/jk-button&gt;
        &lt;jk-dialog ref=&quot;dialog&quot; draggable title=&quot;Basic Display&quot; width=&quot;30%&quot;&gt;
            &lt;p&gt;I'm the content inside the dialog.&lt;/p&gt;
            @section(&quot;footer&quot;) {
                &lt;jk-button @click=&quot;handleDialogCancelClick&quot;&gt;Cancel&lt;/jk-button&gt;
                &lt;jk-button type=&quot;primary&quot; @click=&quot;handleDialogConfirmClick&quot;&gt;OK&lt;/jk-button&gt;
            }
        &lt;/jk-dialog&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    open() {
        this.$getRef(&quot;dialog&quot;)?.component.open();
    }

    handleDialogCancelClick() {
        this.$getRef(&quot;dialog&quot;)?.component.close();
    }

    handleDialogConfirmClick() {
        this.$getRef(&quot;dialog&quot;)?.component.close();
    }
}
&lt;/script&gt;


</code></pre>
        </DemoContainer>
        <h3>Attributes</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Parameter</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Options</th>
                    <th>Default</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>title</td>
                    <td>Dialog title (can also be set via named slot, see below)</td>
                    <td>string</td>
                    <td>â€”</td>
                    <td>â€”</td>
                </tr>
                <tr>
                    <td>width</td>
                    <td>Dialog width</td>
                    <td>string</td>
                    <td>â€”</td>
                    <td>50%</td>
                </tr>
                <tr>
                    <td>fullscreen</td>
                    <td>Whether the Dialog is fullscreen</td>
                    <td>boolean</td>
                    <td>â€”</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>modal</td>
                    <td>Whether a modal backdrop is shown</td>
                    <td>boolean</td>
                    <td>â€”</td>
                    <td>true</td>
                </tr>
                <tr>
                    <td>custom-class</td>
                    <td>Custom CSS class for Dialog</td>
                    <td>string</td>
                    <td>â€”</td>
                    <td>â€”</td>
                </tr>
                <tr>
                    <td>close-on-click-modal</td>
                    <td>Whether clicking the backdrop closes the Dialog</td>
                    <td>boolean</td>
                    <td>â€”</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>close-on-press-escape</td>
                    <td>Whether pressing ESC closes the Dialog</td>
                    <td>boolean</td>
                    <td>â€”</td>
                    <td>true</td>
                </tr>
                <tr>
                    <td>closable</td>
                    <td>Whether to show the close button</td>
                    <td>boolean</td>
                    <td>â€”</td>
                    <td>true</td>
                </tr>
                <tr>
                    <td>before-close</td>
                    <td>
                        Callback before closing (halts closing until
                        <code>done</code>
                        is called)
                    </td>
                    <td>function(done)</td>
                    <td>â€”</td>
                    <td>â€”</td>
                </tr>
                <tr>
                    <td>center</td>
                    <td>Whether to center header and footer</td>
                    <td>boolean</td>
                    <td>â€”</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>destroyOnClose</td>
                    <td>Whether to destroy inner content on close</td>
                    <td>boolean</td>
                    <td>â€”</td>
                    <td>true</td>
                </tr>
                <tr>
                    <td>draggable</td>
                    <td>Whether dragging is enabled</td>
                    <td>boolean</td>
                    <td>â€”</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>allowOutOfBounds</td>
                    <td>Whether dragging outside viewport is allowed</td>
                    <td>boolean</td>
                    <td>â€”</td>
                    <td>false</td>
                </tr>
            </tbody>
        </table>
        <h3>Slots</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>default</td>
                    <td>Main content of the Dialog</td>
                </tr>
                <tr>
                    <td>title</td>
                    <td>Content for the title section</td>
                </tr>
                <tr>
                    <td>footer</td>
                    <td>Content for the action buttons</td>
                </tr>
            </tbody>
        </table>
        <h3>Methods</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Method</th>
                    <th>Description</th>
                    <th>Parameters</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>open</td>
                    <td>Opens the Dialog</td>
                    <td>â€”</td>
                </tr>
                <tr>
                    <td>close</td>
                    <td>Closes the Dialog</td>
                    <td>â€”</td>
                </tr>
            </tbody>
        </table>
        <h3>Events</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Event</th>
                    <th>Description</th>
                    <th>Parameters</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>open</td>
                    <td>Triggered when Dialog opens</td>
                    <td>â€”</td>
                </tr>
                <tr>
                    <td>opened</td>
                    <td>Triggered after opening animation</td>
                    <td>â€”</td>
                </tr>
                <tr>
                    <td>close</td>
                    <td>Triggered when Dialog closes</td>
                    <td>â€”</td>
                </tr>
                <tr>
                    <td>closed</td>
                    <td>Triggered after closing animation</td>
                    <td>â€”</td>
                </tr>
            </tbody>
        </table>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo4 from "../../components/dialog/demo4.joker";
import DEMO_JOKER_demo3 from "../../components/dialog/demo3.joker";
import DEMO_JOKER_demo2 from "../../components/dialog/demo2.joker";
import DEMO_JOKER_demo1 from "../../components/dialog/demo1.joker";
export default class extends Component {
    components = {
        BottomNav,
        DEMO_JOKER_demo4,
        DEMO_JOKER_demo3,
        DEMO_JOKER_demo2,
        DEMO_JOKER_demo1
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>