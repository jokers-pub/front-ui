<template>
    <div ref="container" class="joker-demo-container">
        <h2>Carousel</h2>
        <p>A component that cyclically displays images, text, or other content within limited space.</p>
        <h3>Basic Usage</h3>
        <p>Widely applicable basic usage.</p>
        <p>
            By combining the
            <code>jk-carousel</code>
            and
            <code>jk-carousel-item</code>
            tags, you can create a Carousel. Slide content can be anything and should be placed within
            <code>jk-carousel-item</code>
            tags. By default, hovering over the bottom indicators triggers a slide switch. Setting the
            <code>trigger</code>
            property to
            <code>click</code>
            enables switching via click.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo1)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;carouselDemo1&quot;&gt;
        &lt;span class=&quot;demonstration&quot;&gt;Default: Trigger on Hover&lt;/span&gt;
        &lt;jk-carousel height=&quot;150px&quot;&gt;
            @for(let item of model.list) {
                &lt;jk-carousel-item&gt;
                    &lt;div class=&quot;item small&quot;&gt;
                        @item
                    &lt;/div&gt;
                &lt;/jk-carousel-item&gt;
            }
        &lt;/jk-carousel&gt;
    &lt;/div&gt;
    &lt;div class=&quot;carouselDemo1&quot;&gt;
        &lt;span class=&quot;demonstration&quot;&gt;Trigger on Click&lt;/span&gt;
        &lt;jk-carousel trigger=&quot;click&quot; height=&quot;150px&quot;&gt;
            @for(let item of model.list) {
                &lt;jk-carousel-item&gt;
                    &lt;div class=&quot;item small&quot;&gt;
                        @item
                    &lt;/div&gt;
                &lt;/jk-carousel-item&gt;
            }
        &lt;/jk-carousel&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        list: [1, 2, 3, 4]
    };
}
&lt;/script&gt;
&lt;style lang=&quot;scss&quot;&gt;
.carouselDemo1 {
    padding: 30px;
    text-align: center;
    border-right: 1px solid #eff2f6;
    display: inline-block;
    width: 49%;
    box-sizing: border-box;
    .demonstration {
        display: block;
        color: #8492a6;
        font-size: 14px;
        margin-bottom: 20px;
    }
    .jk-carousel-item .item {
        color: #475669;
        font-size: 14px;
        opacity: 0.75;
        line-height: 150px;
        margin: 0;
    }

    .jk-carousel-item:nth-child(2n) {
        background-color: #99a9bf;
    }

    .jk-carousel-item:nth-child(2n + 1) {
        background-color: #d3dce6;
    }
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Indicators</h3>
        <p>Allows positioning indicators outside the container.</p>
        <p>
            The
            <code>indicatorPosition</code>
            property defines the position of indicators. By default, they display inside the carousel. Setting it to
            <code>outside</code>
            displays them externally, while
            <code>none</code>
            hides indicators entirely.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo2)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;carouselDemo2&quot;&gt;
        &lt;jk-carousel indicatorPosition=&quot;outside&quot;&gt;
            @for(let item of model.list) {
                &lt;jk-carousel-item&gt;
                    &lt;div class=&quot;item small&quot;&gt;
                        @item
                    &lt;/div&gt;
                &lt;/jk-carousel-item&gt;
            }
        &lt;/jk-carousel&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = { list: [1, 2, 3, 4] };
}
&lt;/script&gt;

&lt;style lang=&quot;scss&quot;&gt;
.carouselDemo2 {
    text-align: center;
    display: inline-block;
    width: 100%;
    box-sizing: border-box;
    .jk-carousel-item .item {
        color: #475669;
        font-size: 18px;
        opacity: 0.75;
        line-height: 300px;
        margin: 0;
    }

    .jk-carousel-item:nth-child(2n) {
        background-color: #99a9bf;
    }

    .jk-carousel-item:nth-child(2n + 1) {
        background-color: #d3dce6;
    }
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Navigation Arrows</h3>
        <p>Controls when navigation arrows are displayed.</p>
        <p>
            The
            <code>arrow</code>
            property determines the display timing of navigation arrows. By default (
            <code>hover</code>
            ), arrows appear only on hover. Setting it to
            <code>always</code>
            keeps them visible, while
            <code>never</code>
            permanently hides them.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo3)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;carouselDemo3&quot;&gt;
        &lt;jk-carousel interval=&quot;5000&quot; arrow=&quot;always&quot;&gt;
            @for(let item of model.list) {
                &lt;jk-carousel-item&gt;
                    &lt;div class=&quot;item small&quot;&gt;
                        @item
                    &lt;/div&gt;
                &lt;/jk-carousel-item&gt;
            }
        &lt;/jk-carousel&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = { list: [1, 2, 3, 4] };
}
&lt;/script&gt;

&lt;style lang=&quot;scss&quot;&gt;
.carouselDemo3 {
    text-align: center;
    display: inline-block;
    width: 100%;
    box-sizing: border-box;
    .jk-carousel-item .item {
        color: #475669;
        font-size: 18px;
        opacity: 0.75;
        line-height: 300px;
        margin: 0;
    }

    .jk-carousel-item:nth-child(2n) {
        background-color: #99a9bf;
    }

    .jk-carousel-item:nth-child(2n + 1) {
        background-color: #d3dce6;
    }
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Card Style</h3>
        <p>Recommended when horizontal space is ample but vertical space is limited.</p>
        <p>
            Enable card mode by setting the
            <code>type</code>
            property to
            <code>card</code>
            . The key interaction difference is the ability to switch slides by directly clicking on adjacent cards.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo4)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;carouselDemo4&quot;&gt;
        &lt;jk-carousel interval=&quot;4000&quot; type=&quot;card&quot; height=&quot;200px&quot;&gt;
            @for(let item of model.list) {
                &lt;jk-carousel-item&gt;
                    &lt;div class=&quot;item small&quot;&gt;
                        @item
                    &lt;/div&gt;
                &lt;/jk-carousel-item&gt;
            }
        &lt;/jk-carousel&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = { list: [1, 2, 3, 4, 5, 6] };
}
&lt;/script&gt;

&lt;style lang=&quot;scss&quot;&gt;
.carouselDemo4 {
    text-align: center;
    display: inline-block;
    width: 100%;
    box-sizing: border-box;
    .jk-carousel-item .item {
        color: #475669;
        font-size: 14px;
        opacity: 0.75;
        line-height: 200px;
        margin: 0;
    }

    .jk-carousel-item:nth-child(2n) {
        background-color: #99a9bf;
    }

    .jk-carousel-item:nth-child(2n + 1) {
        background-color: #d3dce6;
    }
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Direction</h3>
        <p>
            By default,
            <code>direction</code>
            is
            <code>horizontal</code>
            . Set it to
            <code>vertical</code>
            for a vertically oriented carousel.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo5)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;carouselDemo5&quot;&gt;
        &lt;jk-carousel height=&quot;200px&quot; direction=&quot;vertical&quot; autoplay=&quot;@false&quot;&gt;
            @for(let item of model.list) {
                &lt;jk-carousel-item&gt;
                    &lt;div class=&quot;item small&quot;&gt;
                        @item
                    &lt;/div&gt;
                &lt;/jk-carousel-item&gt;
            }
        &lt;/jk-carousel&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = { list: [1, 2, 3] };
}
&lt;/script&gt;

&lt;style lang=&quot;scss&quot;&gt;
.carouselDemo5 {
    text-align: center;
    display: inline-block;
    width: 100%;
    box-sizing: border-box;
    .jk-carousel-item .item {
        color: #475669;
        font-size: 14px;
        opacity: 0.75;
        line-height: 200px;
        margin: 0;
    }

    .jk-carousel-item:nth-child(2n) {
        background-color: #99a9bf;
    }

    .jk-carousel-item:nth-child(2n + 1) {
        background-color: #d3dce6;
    }
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Carousel Attributes</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Parameter</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Optional Values</th>
                    <th>Default</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>height</td>
                    <td>Height of the carousel</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>class</td>
                    <td>Custom CSS class</td>
                    <td>string</td>
                    <td>-</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>initialIndex</td>
                    <td>Index of initially active slide (0-based)</td>
                    <td>number</td>
                    <td>—</td>
                    <td>0</td>
                </tr>
                <tr>
                    <td>trigger</td>
                    <td>Trigger method for indicators</td>
                    <td>string</td>
                    <td>click</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>autoplay</td>
                    <td>Whether to autoplay slides</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>true</td>
                </tr>
                <tr>
                    <td>interval</td>
                    <td>Autoplay interval (milliseconds)</td>
                    <td>number</td>
                    <td>-</td>
                    <td>3000</td>
                </tr>
                <tr>
                    <td>indicatorPosition</td>
                    <td>Position of indicators</td>
                    <td>string</td>
                    <td>outside/none</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>arrow</td>
                    <td>Display timing for navigation arrows</td>
                    <td>string</td>
                    <td>always/hover/never</td>
                    <td>hover</td>
                </tr>
                <tr>
                    <td>type</td>
                    <td>Carousel style</td>
                    <td>string</td>
                    <td>card</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>loop</td>
                    <td>Whether to loop slides</td>
                    <td>boolean</td>
                    <td>-</td>
                    <td>true</td>
                </tr>
                <tr>
                    <td>direction</td>
                    <td>Display orientation</td>
                    <td>string</td>
                    <td>horizontal/vertical</td>
                    <td>horizontal</td>
                </tr>
            </tbody>
        </table>
        <h3>Carousel Events</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Event Name</th>
                    <th>Description</th>
                    <th>Callback Parameters</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>change</td>
                    <td>Triggers on slide change</td>
                    <td>Index of new active slide, index of previous slide</td>
                </tr>
            </tbody>
        </table>
        <h3>Carousel Methods</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Method</th>
                    <th>Description</th>
                    <th>Parameters</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>setActiveItem</td>
                    <td>Manually switch slides</td>
                    <td>
                        Target slide index (0-based) or
                        <code>name</code>
                        value of corresponding
                        <code>jk-carousel-item</code>
                    </td>
                </tr>
                <tr>
                    <td>prev</td>
                    <td>Go to previous slide</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>next</td>
                    <td>Go to next slide</td>
                    <td>-</td>
                </tr>
            </tbody>
        </table>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo5 from "../../components/carousel/demo5.joker";
import DEMO_JOKER_demo4 from "../../components/carousel/demo4.joker";
import DEMO_JOKER_demo3 from "../../components/carousel/demo3.joker";
import DEMO_JOKER_demo2 from "../../components/carousel/demo2.joker";
import DEMO_JOKER_demo1 from "../../components/carousel/demo1.joker";
export default class extends Component {
    components = {
        BottomNav,
        DEMO_JOKER_demo5,
        DEMO_JOKER_demo4,
        DEMO_JOKER_demo3,
        DEMO_JOKER_demo2,
        DEMO_JOKER_demo1
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>