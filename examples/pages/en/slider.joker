<template>
    <div ref="container" class="joker-demo-container">
        <h2>Slider</h2>
        <p>Select within a fixed range by dragging the slider.</p>
        <h3>Basic Usage</h3>
        <p>
            When dragging the slider, display the current value. Customize the initial value of the slider by setting the bound value.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo1)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;span&gt;Default:&lt;/span&gt;
        &lt;jk-slider&gt;&lt;/jk-slider&gt;
    &lt;/div&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;span&gt;Default value:&lt;/span&gt;
        &lt;jk-slider value=&quot;30&quot;&gt;&lt;/jk-slider&gt;
    &lt;/div&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;span&gt;Hide Tooltip:&lt;/span&gt;
        &lt;jk-slider value=&quot;30&quot; showTooltip=&quot;@false&quot;&gt;&lt;/jk-slider&gt;
    &lt;/div&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;span&gt;Format Tooltip:&lt;/span&gt;
        &lt;jk-slider value=&quot;30&quot; formatTooltip=&quot;@formatTooltip&quot;&gt;&lt;/jk-slider&gt;
    &lt;/div&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;span&gt;Default value:&lt;/span&gt;
        &lt;jk-slider value=&quot;30&quot; disabled&gt;&lt;/jk-slider&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    formatTooltip(val: number) {
        return val + &quot;%&quot;;
    }
}
&lt;/script&gt;
&lt;style scoped lang=&quot;scss&quot;&gt;
.row {
    padding: 30px 24px;
    overflow: hidden;
    border-bottom: 1px solid #eff2f6;

    span {
        font-size: 14px;
        color: #8492a6;
        line-height: 44px;
        font-size: 16px;
    }

    :deep(.jk-slider) {
        float: right;
        width: 70%;
        margin-right: 20px;
    }

    &amp;:last-child {
        border-bottom: none;
    }
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Discrete Values</h3>
        <p>
            Options can be discrete. Changing the value of
            <code>step</code>
            can change the step size. Setting the
            <code>show-stops</code>
            property can display breakpoints.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo2)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;span&gt;Do not show breakpoints:&lt;/span&gt;
        &lt;jk-slider step=&quot;10&quot;&gt;&lt;/jk-slider&gt;
    &lt;/div&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;span&gt;Show breakpoints:&lt;/span&gt;
        &lt;jk-slider step=&quot;10&quot; showStops&gt;&lt;/jk-slider&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;style scoped lang=&quot;scss&quot;&gt;
.row {
    padding: 30px 24px;
    overflow: hidden;
    border-bottom: 1px solid #eff2f6;

    span {
        font-size: 14px;
        color: #8492a6;
        line-height: 44px;
        font-size: 16px;
    }

    :deep(.jk-slider) {
        float: right;
        width: 70%;
        margin-right: 20px;
    }

    &amp;:last-child {
        border-bottom: none;
    }
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>With Input Box</h3>
        <p>
            Set the precise value through the input box. Setting the
            <code>show-input</code>
            property will display an input box on the right.
        </p>
        <blockquote>
            <p>
                When
                <code>range</code>
                or
                <code>show-input</code>
                is set, the
                <code>show-input</code>
                property will not take effect.
            </p>
        </blockquote>
        <DemoContainer component="@(components.DEMO_JOKER_demo3)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-slider show-input /&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-slider show-input value=&quot;30&quot; showStops step=&quot;10&quot; /&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;
</code></pre>
        </DemoContainer>
        <h3>Range Selection</h3>
        <p>
            Supports selecting a certain numerical range. Setting
            <code>range</code>
            enables range selection. At this time, the bound value is an array, and its elements are the minimum and maximum boundary values respectively.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo4)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-slider max=&quot;10&quot; range&gt;&lt;/jk-slider&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-slider max=&quot;10&quot; value=&quot;@([0, 0])&quot; range&gt;&lt;/jk-slider&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-slider max=&quot;10&quot; value=&quot;@([3, 6])&quot; range&gt;&lt;/jk-slider&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-slider max=&quot;10&quot; value=&quot;@([2, 4])&quot; range showStops&gt;&lt;/jk-slider&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-slider max=&quot;10&quot; value=&quot;@([1, 3])&quot; range showStops disabled&gt;&lt;/jk-slider&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;

</code></pre>
        </DemoContainer>
        <h3>Vertical Mode</h3>
        <p>
            Setting
            <code>vertical</code>
            can make the Slider in vertical mode. At this time, the
            <code>height</code>
            property must be set.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo5)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;ul class=&quot;demoContainer&quot;&gt;
        &lt;li&gt;
            &lt;jk-slider vertical height=&quot;200px&quot; /&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;jk-slider vertical value=&quot;30&quot; height=&quot;200px&quot; /&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;jk-slider vertical value=&quot;2&quot; step=&quot;2&quot; max=&quot;10&quot; showStops height=&quot;200px&quot; /&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;jk-slider vertical value=&quot;@([2, 6])&quot; step=&quot;2&quot; range max=&quot;10&quot; showStops height=&quot;200px&quot; /&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;jk-slider vertical disabled value=&quot;@([2, 6])&quot; step=&quot;2&quot; range max=&quot;10&quot; showStops height=&quot;200px&quot; /&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/template&gt;

&lt;style scoped lang=&quot;scss&quot;&gt;
.demoContainer {
    display: flex;

    li {
        padding: 0 30px;
        list-style: none;
    }
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Display Marks</h3>
        <p>
            Setting the
            <code>marks</code>
            property can display marks.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo6)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-slider
            range
            value=&quot;@([30, 60])&quot;
            marks=&quot;@({
                0: '0°C',
                8: '8°C',
                37: '37°C',
                50: {
                    style: {
                        color: 'red'
                    },
                    label: '50%'
                }
            })&quot;
        /&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-slider
            range
            height=&quot;250px&quot;
            vertical
            value=&quot;@([30, 60])&quot;
            marks=&quot;@({
                0: '0°C',
                8: '8°C',
                37: '37°C',
                50: {
                    style: {
                        color: 'red'
                    },
                    label: '50%'
                }
            })&quot;
        /&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;
</code></pre>
        </DemoContainer>
        <h3>Attributes</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Parameter</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Optional Values</th>
                    <th>Default Value</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>value</td>
                    <td>Value</td>
                    <td>number or number[]</td>
                    <td>—</td>
                    <td>0</td>
                </tr>
                <tr>
                    <td>class</td>
                    <td>Custom class style</td>
                    <td>string</td>
                    <td>-</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>min</td>
                    <td>Minimum value</td>
                    <td>number</td>
                    <td>—</td>
                    <td>0</td>
                </tr>
                <tr>
                    <td>max</td>
                    <td>Maximum value</td>
                    <td>number</td>
                    <td>—</td>
                    <td>100</td>
                </tr>
                <tr>
                    <td>disabled</td>
                    <td>Whether to disable</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>step</td>
                    <td>Step size</td>
                    <td>number</td>
                    <td>—</td>
                    <td>1</td>
                </tr>
                <tr>
                    <td>show-input</td>
                    <td>Whether to display the input box, only valid in non-range selection</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>show-input-controls</td>
                    <td>Whether to display the control buttons of the input box when the input box is displayed</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>true</td>
                </tr>
                <tr>
                    <td>input-size</td>
                    <td>The size of the input box, please refer to the input API for details</td>
                    <td>string</td>
                    <td>large / medium / small / mini</td>
                    <td>small</td>
                </tr>
                <tr>
                    <td>show-stops</td>
                    <td>Whether to display breakpoints</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>show-tooltip</td>
                    <td>Whether to display the tooltip</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>true</td>
                </tr>
                <tr>
                    <td>format-tooltip</td>
                    <td>Format the tooltip message</td>
                    <td>function(value)</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>range</td>
                    <td>Whether it is range selection</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>vertical</td>
                    <td>Whether it is in vertical mode</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>height</td>
                    <td>The height of the Slider, required in vertical mode</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>label</td>
                    <td>Screen reader label</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>marks</td>
                    <td>
                        Marks. The type of key must be number and the value should be within the closed interval
                        <code>[min, max]</code>
                        . Each mark can be set with a separate style
                    </td>
                    <td>object</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
            </tbody>
        </table>
        <h3>Events</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Event Name</th>
                    <th>Description</th>
                    <th>Callback Parameters</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>change</td>
                    <td>
                        Triggered when the value changes (when dragging with the mouse, it is only triggered after releasing the mouse)
                    </td>
                    <td>The changed value</td>
                </tr>
                <tr>
                    <td>input</td>
                    <td>
                        This event overrides the trigger timing of
                        <code>change</code>
                        .
                        <code>input</code>
                        will also be triggered when the slider is dragged
                    </td>
                    <td>The changed value</td>
                </tr>
            </tbody>
        </table>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo6 from "../../components/slider/demo6.joker";
import DEMO_JOKER_demo5 from "../../components/slider/demo5.joker";
import DEMO_JOKER_demo4 from "../../components/slider/demo4.joker";
import DEMO_JOKER_demo3 from "../../components/slider/demo3.joker";
import DEMO_JOKER_demo2 from "../../components/slider/demo2.joker";
import DEMO_JOKER_demo1 from "../../components/slider/demo1.joker";
export default class extends Component {
    components = {
        BottomNav,
        DEMO_JOKER_demo6,
        DEMO_JOKER_demo5,
        DEMO_JOKER_demo4,
        DEMO_JOKER_demo3,
        DEMO_JOKER_demo2,
        DEMO_JOKER_demo1
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>