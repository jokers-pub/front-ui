<template>
    <div ref="container" class="joker-demo-container">
        <h2>Slider Component</h2>
        <p>Use a slider to select values within a fixed range.</p>
        <h3>Basic Usage</h3>
        <p>
            Display the current value while dragging the slider. Customize the initial value by binding it to a variable.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo1)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;span&gt;Default:&lt;/span&gt;
        &lt;jk-slider&gt;&lt;/jk-slider&gt;
    &lt;/div&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;span&gt;Default value:&lt;/span&gt;
        &lt;jk-slider value=&quot;30&quot;&gt;&lt;/jk-slider&gt;
    &lt;/div&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;span&gt;Hide Tooltip:&lt;/span&gt;
        &lt;jk-slider value=&quot;30&quot; showTooltip=&quot;@false&quot;&gt;&lt;/jk-slider&gt;
    &lt;/div&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;span&gt;Format Tooltip:&lt;/span&gt;
        &lt;jk-slider value=&quot;30&quot; formatTooltip=&quot;@formatTooltip&quot;&gt;&lt;/jk-slider&gt;
    &lt;/div&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;span&gt;Default value:&lt;/span&gt;
        &lt;jk-slider value=&quot;30&quot; disabled&gt;&lt;/jk-slider&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    formatTooltip(val: number) {
        return val + &quot;%&quot;;
    }
}
&lt;/script&gt;
&lt;style scoped lang=&quot;scss&quot;&gt;
.row {
    padding: 30px 24px;
    overflow: hidden;
    border-bottom: 1px solid #eff2f6;

    span {
        font-size: 14px;
        color: #8492a6;
        line-height: 44px;
        font-size: 16px;
    }

    :deep(.jk-slider) {
        float: right;
        width: 70%;
        margin-right: 20px;
    }

    &amp;:last-child {
        border-bottom: none;
    }
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Discrete Values</h3>
        <p>
            Options can be discrete. Adjust the
            <code>step</code>
            property to change the step size. Enable the
            <code>show-stops</code>
            attribute to display breakpoints.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo2)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;span&gt;Do not show breakpoints:&lt;/span&gt;
        &lt;jk-slider step=&quot;10&quot;&gt;&lt;/jk-slider&gt;
    &lt;/div&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;span&gt;Show breakpoints:&lt;/span&gt;
        &lt;jk-slider step=&quot;10&quot; showStops&gt;&lt;/jk-slider&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;style scoped lang=&quot;scss&quot;&gt;
.row {
    padding: 30px 24px;
    overflow: hidden;
    border-bottom: 1px solid #eff2f6;

    span {
        font-size: 14px;
        color: #8492a6;
        line-height: 44px;
        font-size: 16px;
    }

    :deep(.jk-slider) {
        float: right;
        width: 70%;
        margin-right: 20px;
    }

    &amp;:last-child {
        border-bottom: none;
    }
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>With Input Box</h3>
        <p>
            Set precise values via an input box. Enable the
            <code>show-input</code>
            property to display an input box on the right.
        </p>
        <blockquote>
            <p>
                When
                <code>range</code>
                or
                <code>show-input</code>
                is enabled, the
                <code>show-input</code>
                property will not take effect.
            </p>
        </blockquote>
        <DemoContainer component="@(components.DEMO_JOKER_demo3)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-slider show-input /&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-slider show-input value=&quot;30&quot; showStops step=&quot;10&quot; /&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;
</code></pre>
        </DemoContainer>
        <h3>Range Selection</h3>
        <p>
            Supports selecting a value range. Enable
            <code>range</code>
            to activate range selection, where the bound value becomes an array containing the minimum and maximum boundary values.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo4)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-slider max=&quot;10&quot; range&gt;&lt;/jk-slider&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-slider max=&quot;10&quot; value=&quot;@([0, 0])&quot; range&gt;&lt;/jk-slider&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-slider max=&quot;10&quot; value=&quot;@([3, 6])&quot; range&gt;&lt;/jk-slider&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-slider max=&quot;10&quot; value=&quot;@([2, 4])&quot; range showStops&gt;&lt;/jk-slider&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-slider max=&quot;10&quot; value=&quot;@([1, 3])&quot; range showStops disabled&gt;&lt;/jk-slider&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;

</code></pre>
        </DemoContainer>
        <h3>Vertical Mode</h3>
        <p>
            Set
            <code>vertical</code>
            to transform the slider into vertical mode. The
            <code>height</code>
            attribute must be specified in this case.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo5)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;ul class=&quot;demoContainer&quot;&gt;
        &lt;li&gt;
            &lt;jk-slider vertical height=&quot;200px&quot; /&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;jk-slider vertical value=&quot;30&quot; height=&quot;200px&quot; /&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;jk-slider vertical value=&quot;2&quot; step=&quot;2&quot; max=&quot;10&quot; showStops height=&quot;200px&quot; /&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;jk-slider vertical value=&quot;@([2, 6])&quot; step=&quot;2&quot; range max=&quot;10&quot; showStops height=&quot;200px&quot; /&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;jk-slider vertical disabled value=&quot;@([2, 6])&quot; step=&quot;2&quot; range max=&quot;10&quot; showStops height=&quot;200px&quot; /&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/template&gt;

&lt;style scoped lang=&quot;scss&quot;&gt;
.demoContainer {
    display: flex;

    li {
        padding: 0 30px;
        list-style: none;
    }
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Display Markers</h3>
        <p>
            Use the
            <code>marks</code>
            property to display markers.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo6)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-slider
            range
            value=&quot;@([30, 60])&quot;
            marks=&quot;@({
                0: '0°C',
                8: '8°C',
                37: '37°C',
                50: {
                    style: {
                        color: 'red'
                    },
                    label: '50%'
                }
            })&quot;
        /&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-slider
            range
            height=&quot;250px&quot;
            vertical
            value=&quot;@([30, 60])&quot;
            marks=&quot;@({
                0: '0°C',
                8: '8°C',
                37: '37°C',
                50: {
                    style: {
                        color: 'red'
                    },
                    label: '50%'
                }
            })&quot;
        /&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;
</code></pre>
        </DemoContainer>
        <h3>Attributes</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Attribute</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Accepted Values</th>
                    <th>Default</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>value</td>
                    <td>The slider value</td>
                    <td>number / number[]</td>
                    <td>—</td>
                    <td>0</td>
                </tr>
                <tr>
                    <td>class</td>
                    <td>Custom CSS class</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>min</td>
                    <td>Minimum value</td>
                    <td>number</td>
                    <td>—</td>
                    <td>0</td>
                </tr>
                <tr>
                    <td>max</td>
                    <td>Maximum value</td>
                    <td>number</td>
                    <td>—</td>
                    <td>100</td>
                </tr>
                <tr>
                    <td>disabled</td>
                    <td>Whether the slider is disabled</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>step</td>
                    <td>Step size</td>
                    <td>number</td>
                    <td>—</td>
                    <td>1</td>
                </tr>
                <tr>
                    <td>show-input</td>
                    <td>Display an input box (only effective in non-range mode)</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>show-input-controls</td>
                    <td>Whether to show control buttons for the input box (when enabled)</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>true</td>
                </tr>
                <tr>
                    <td>input-size</td>
                    <td>Input box size; refer to the input component's API for details</td>
                    <td>string</td>
                    <td>large / medium / small / mini</td>
                    <td>small</td>
                </tr>
                <tr>
                    <td>show-stops</td>
                    <td>Display breakpoints</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>show-tooltip</td>
                    <td>Display tooltip</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>true</td>
                </tr>
                <tr>
                    <td>format-tooltip</td>
                    <td>Format tooltip message</td>
                    <td>function(value)</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>range</td>
                    <td>Enable range selection</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>vertical</td>
                    <td>Enable vertical mode</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>height</td>
                    <td>Slider height (required in vertical mode)</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>label</td>
                    <td>Screen reader label</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>marks</td>
                    <td>
                        Markers (keys must be numbers within
                        <code>[min, max]</code>
                        ; each marker can have custom styling)
                    </td>
                    <td>object</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
            </tbody>
        </table>
        <h3>Events</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Event Name</th>
                    <th>Description</th>
                    <th>Callback Parameters</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>change</td>
                    <td>Triggered when the value changes (only after releasing the mouse when dragging)</td>
                    <td>Updated value</td>
                </tr>
                <tr>
                    <td>input</td>
                    <td>
                        Fires continuously while dragging the slider (overrides
                        <code>change</code>
                        timing)
                    </td>
                    <td>Updated value</td>
                </tr>
            </tbody>
        </table>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo6 from "../../components/slider/demo6.joker";
import DEMO_JOKER_demo5 from "../../components/slider/demo5.joker";
import DEMO_JOKER_demo4 from "../../components/slider/demo4.joker";
import DEMO_JOKER_demo3 from "../../components/slider/demo3.joker";
import DEMO_JOKER_demo2 from "../../components/slider/demo2.joker";
import DEMO_JOKER_demo1 from "../../components/slider/demo1.joker";
export default class extends Component {
    components = {
        BottomNav,
        DEMO_JOKER_demo6,
        DEMO_JOKER_demo5,
        DEMO_JOKER_demo4,
        DEMO_JOKER_demo3,
        DEMO_JOKER_demo2,
        DEMO_JOKER_demo1
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>