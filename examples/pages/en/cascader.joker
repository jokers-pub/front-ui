<template>
    <div ref="container" class="joker-demo-container">
        <h2>Cascader</h2>
        <p>
            When a dataset has clear hierarchical relationships, the cascader can be used to view and select level by level.
        </p>
        <h3>Basic Usage</h3>
        <p>
            There are two ways to trigger submenu expansion. Simply specify the options array via the
            <code>options</code>
            property of Cascader to render a cascading selector. The trigger method for expanding submenus can be defined via
            <code>props.expandTrigger</code>
            .
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo1)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;demoContainer&quot;&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;span&gt;Default click:&lt;/span&gt;
            &lt;jk-cascader options=&quot;@options&quot; value=&quot;@model.value&quot; @change=&quot;handleChange&quot;&gt;&lt;/jk-cascader&gt;
        &lt;/div&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;span&gt;Trigger on hover:&lt;/span&gt;
            &lt;jk-cascader
                options=&quot;@options&quot;
                value=&quot;@model.value&quot;
                @change=&quot;handleChange&quot;
                expandTrigger=&quot;hover&quot;&gt;&lt;/jk-cascader&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { mock } from &quot;./mock&quot;;
export default class extends Component {
    options = mock();
    model = {
        value: &quot;&quot;
    };
    handleChange(e: VNode.Event) {
        this.model.value = e.data!;
    }
}
&lt;/script&gt;
&lt;style lang=&quot;scss&quot; scoped&gt;
.demoContainer {
    :deep(.jk-cascader) {
        width: 250px;
    }

    .row {
        padding: 30px 24px;
        overflow: hidden;
        border-bottom: 1px solid #eff2f6;

        span {
            font-size: 14px;
            color: #8492a6;
            line-height: 44px;
            font-size: 16px;
        }

        &amp;:last-child {
            border-bottom: none;
        }
    }
}
&lt;/style&gt;

</code></pre>
        </DemoContainer>
        <h3>Disabled Options</h3>
        <p>
            Declare a disabled option by setting the
            <code>disabled</code>
            field in the data source. In this example, the first element in the array specified by
            <code>options</code>
            contains the
            <code>disabled: true</code>
            key-value pair, making it disabled. By default, Cascader checks whether the
            <code>disabled</code>
            field for each item in the data is
            <code>true</code>
            . If your data uses a different field name to represent disabled status, you can specify it via the
            <code>props.disabled</code>
            property (see the API table below). Similarly, the field names for
            <code>value</code>
            ,
            <code>label</code>
            , and
            <code>children</code>
            can also be customized in the same way.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo2)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;demoContainer&quot;&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;span&gt;Component disabled:&lt;/span&gt;
            &lt;jk-cascader disabled options=&quot;@options&quot; value=&quot;@model.value&quot; @change=&quot;handleChange&quot;&gt;&lt;/jk-cascader&gt;
        &lt;/div&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;span&gt;Option disabled:&lt;/span&gt;
            &lt;jk-cascader options=&quot;@options&quot; value=&quot;@model.value&quot; @change=&quot;handleChange&quot;&gt;&lt;/jk-cascader&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { mock } from &quot;./mock&quot;;
import { deepClone } from &quot;@joker.front/shared&quot;;

export default class extends Component {
    options!: any;
    model = {
        value: &quot;&quot;
    };
    created() {
        this.options = mock();

        this.options[0].disabled = true;
    }
    handleChange(e: VNode.Event) {
        this.model.value = e.data!;
    }
}
&lt;/script&gt;
&lt;style lang=&quot;scss&quot; scoped&gt;
.demoContainer {
    :deep(.jk-cascader) {
        width: 250px;
    }

    .row {
        padding: 30px 24px;
        overflow: hidden;
        border-bottom: 1px solid #eff2f6;

        span {
            font-size: 14px;
            color: #8492a6;
            line-height: 44px;
            font-size: 16px;
        }

        &amp;:last-child {
            border-bottom: none;
        }
    }
}
&lt;/style&gt;

</code></pre>
        </DemoContainer>
        <h3>Clearable</h3>
        <p>
            Set the input box to be clearable via the
            <code>clearable</code>
            property.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo3)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;demoContainer&quot;&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;span&gt;Clearable:&lt;/span&gt;
            &lt;jk-cascader clearable options=&quot;@options&quot;&gt;&lt;/jk-cascader&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { mock } from &quot;./mock&quot;;
export default class extends Component {
    options = mock();
}
&lt;/script&gt;


&lt;style lang=&quot;scss&quot; scoped&gt;
.demoContainer {
    :deep(.jk-cascader) {
        width: 250px;
    }

    .row {
        padding: 30px 24px;
        overflow: hidden;
        border-bottom: 1px solid #eff2f6;

        span {
            font-size: 14px;
            color: #8492a6;
            line-height: 44px;
            font-size: 16px;
        }

        &amp;:last-child {
            border-bottom: none;
        }
    }
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Show Last Level Only</h3>
        <p>
            You can choose to display only the label of the last level of the selected item in the input box, rather than the full path. The
            <code>show-all-levels</code>
            property defines whether to show the complete path. Setting it to
            <code>false</code>
            will display only the last level.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo4)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;demoContainer&quot;&gt;
        &lt;DemoRow&gt;
            &lt;jk-cascader options=&quot;@options&quot; showAllLevels=&quot;@false&quot;&gt;&lt;/jk-cascader&gt;
        &lt;/DemoRow&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { mock } from &quot;./mock&quot;;
export default class extends Component {
    options = mock();
}
&lt;/script&gt;


&lt;style lang=&quot;scss&quot; scoped&gt;
.demoContainer {
    :deep(.jk-cascader) {
        width: 250px;
    }

    .row {
        padding: 30px 24px;
        overflow: hidden;
        border-bottom: 1px solid #eff2f6;

        span {
            font-size: 14px;
            color: #8492a6;
            line-height: 44px;
            font-size: 16px;
        }

        &amp;:last-child {
            border-bottom: none;
        }
    }
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Multiple Selection</h3>
        <p>
            Enable multi-select mode by setting
            <code>multiple = true</code>
            .
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo5)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;demoContainer&quot;&gt;
        &lt;DemoRow&gt;
            &lt;jk-cascader multiple options=&quot;@options&quot;&gt;&lt;/jk-cascader&gt;
        &lt;/DemoRow&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { mock } from &quot;./mock&quot;;
export default class extends Component {
    options = mock();
}
&lt;/script&gt;


&lt;style lang=&quot;scss&quot; scoped&gt;
.demoContainer {
    :deep(.jk-cascader) {
        width: 320px;
    }
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Dynamic Loading</h3>
        <p>Dynamically load options for a level when it is selected.</p>
        <p>
            Enable dynamic loading via
            <code>lazy</code>
            , and specify the method to load the data source using
            <code>lazyload</code>
            . The
            <code>lazyload</code>
            method has two parameters: the first parameter
            <code>node</code>
            is the currently clicked node, and the second
            <code>resolve</code>
            is the callback for when data loading is complete (must be called). To more accurately display the node state, you can also add a flag indicating whether the node is a leaf node (default field is
            <code>leaf</code>
            , which can be modified via
            <code>props.leaf</code>
            ). Otherwise, it will simply determine if the node is a leaf based on whether it has child nodes.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo6)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;demoContainer&quot;&gt;
        &lt;DemoRow&gt;
            &lt;jk-cascader lazy lazyLoad=&quot;@lazyLoad&quot;&gt;&lt;/jk-cascader&gt;
        &lt;/DemoRow&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { sleep } from &quot;@joker.front/shared&quot;;

export default class extends Component {
    id = 0;
    async lazyLoad(node: any, resolve: Function) {
        let level = node.level;

        //模拟请求耗时
        await sleep(500);

        if (node.nodeData?.value === 3) {
            resolve([]);
            return;
        }

        // 通过调用resolve将子节点数据返回，通知组件数据加载完成
        resolve(
            Array.from({ length: level + 1 }).map(() =&gt; ({
                value: ++this.id,
                label: `选项${this.id}`,
                leaf: level &gt;= 2
            }))
        );
    }
}
&lt;/script&gt;


&lt;style lang=&quot;scss&quot; scoped&gt;
.demoContainer {
    :deep(.jk-cascader) {
        width: 320px;
    }
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Searchable</h3>
        <p>Quickly search and select options.</p>
        <p>
            Set
            <code>filterable</code>
            to
            <code>true</code>
            to enable the search function. By default, it matches nodes whose
            <code>label</code>
            (or
            <code>label</code>
            of all parent nodes, determined by
            <code>show-all-levels</code>
            ) contains the input value. You can also use
            <code>filter-method</code>
            to customize the search logic, which accepts a function with two parameters: the first is the node
            <code>node</code>
            , and the second is the search keyword
            <code>keyword</code>
            . Return a boolean to indicate whether there is a match.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo7)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;demoContainer&quot;&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;span&gt;Single selection with search:&lt;/span&gt;
            &lt;jk-cascader filterable options=&quot;@options&quot;&gt;&lt;/jk-cascader&gt;
        &lt;/div&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;span&gt;Multiple selection with search:&lt;/span&gt;
            &lt;jk-cascader filterable multiple options=&quot;@options&quot;&gt;&lt;/jk-cascader&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { mock } from &quot;./mock&quot;;
export default class extends Component {
    options = mock();
}
&lt;/script&gt;
&lt;style lang=&quot;scss&quot; scoped&gt;
.demoContainer {
    :deep(.jk-cascader) {
        width: 250px;
    }

    .row {
        padding: 30px 24px;
        overflow: hidden;
        border-bottom: 1px solid #eff2f6;

        span {
            font-size: 14px;
            color: #8492a6;
            line-height: 44px;
            font-size: 16px;
        }

        &amp;:last-child {
            border-bottom: none;
        }
    }
}
&lt;/style&gt;

</code></pre>
        </DemoContainer>
        <h3>Custom Node Content</h3>
        <p>
            You can customize the content of option nodes via
            <code>section</code>
            for the cascader's options. The named slot (
            <code>section</code>
            ) passes two fields:
            <code>node</code>
            and
            <code>data</code>
            , representing the current node's Node object and data, respectively.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo8)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;demoContainer&quot;&gt;
        &lt;DemoRow&gt;
            &lt;jk-cascader options=&quot;@option&quot; error&gt;
                @section(&quot;default&quot;, node) {
                    &lt;span&gt;@node.label&lt;/span&gt;
                    &lt;span style=&quot;padding-left:5px; color:red&quot;&gt;（@(node.children.length)）&lt;/span&gt;
                }
            &lt;/jk-cascader&gt;
        &lt;/DemoRow&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { mock } from &quot;./mock&quot;;

export default class extends Component {
    option = mock();
}
&lt;/script&gt;

&lt;style lang=&quot;scss&quot; scoped&gt;
.demoContainer {
    :deep(.jk-cascader) {
        width: 320px;
    }
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Cascader Attributes</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Parameter</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Options</th>
                    <th>Default</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>value</td>
                    <td>Binding value for the selected item</td>
                    <td>-</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>options</td>
                    <td>
                        Data source for options. Field names can be configured via
                        <code>Props</code>
                    </td>
                    <td>array</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>props</td>
                    <td>Configuration options. See the table below for details</td>
                    <td>object</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>class</td>
                    <td>Custom class styling</td>
                    <td>string</td>
                    <td>-</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>size</td>
                    <td>Size</td>
                    <td>string</td>
                    <td>medium / small / mini</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>placeholder</td>
                    <td>Placeholder text for the input field</td>
                    <td>string</td>
                    <td>—</td>
                    <td>Select</td>
                </tr>
                <tr>
                    <td>disabled</td>
                    <td>Whether disabled</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>clearable</td>
                    <td>Whether the selection is clearable</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>show-all-levels</td>
                    <td>Whether to show the full path of the selected value in the input field</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>true</td>
                </tr>
                <tr>
                    <td>separator</td>
                    <td>Separator for option levels</td>
                    <td>string</td>
                    <td>—</td>
                    <td>Slash ('/')</td>
                </tr>
                <tr>
                    <td>filterable</td>
                    <td>Whether options are searchable</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>filter-method</td>
                    <td>
                        Custom search logic. The first parameter is the node
                        <code>node</code>
                        , and the second is the keyword
                        <code>keyword</code>
                        . Return a boolean to indicate a match.
                    </td>
                    <td>function(node, keyword)</td>
                    <td>-</td>
                    <td>-</td>
                </tr>
            </tbody>
        </table>
        <h3>Cascader Events</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Event Name</th>
                    <th>Description</th>
                    <th>Callback Parameters</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>change</td>
                    <td>Triggered when the selected node changes</td>
                    <td>Value of the selected node</td>
                </tr>
            </tbody>
        </table>
        <h3>Cascader Slot</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>default</td>
                    <td>
                        Custom content for option nodes, parameters:{node}
                    </td>
                </tr>
            </tbody>
        </table>
        <h3>Props</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Parameter</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Options</th>
                    <th>Default</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>expandTrigger</td>
                    <td>Method for expanding submenus</td>
                    <td>string</td>
                    <td>click / hover</td>
                    <td>click</td>
                </tr>
                <tr>
                    <td>multiple</td>
                    <td>Whether multiple selection is allowed</td>
                    <td>boolean</td>
                    <td>-</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>emitPath</td>
                    <td>
                        Whether to return an array of values from each level of the selected node's path. If false, only the node's value is returned.
                    </td>
                    <td>boolean</td>
                    <td>-</td>
                    <td>true</td>
                </tr>
                <tr>
                    <td>lazy</td>
                    <td>
                        Whether to load child nodes dynamically. Requires the
                        <code>lazyLoad</code>
                        method.
                    </td>
                    <td>boolean</td>
                    <td>-</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>lazyLoad</td>
                    <td>
                        Method for dynamically loading data. Only works when
                        <code>lazy</code>
                        is true.
                    </td>
                    <td>
                        function(node, resolve), where
                        <code>node</code>
                        is the currently clicked node, and
                        <code>resolve</code>
                        is the callback for completed loading (must be called).
                    </td>
                    <td>-</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>value</td>
                    <td>Key name for the option's value field</td>
                    <td>string</td>
                    <td>—</td>
                    <td>value</td>
                </tr>
                <tr>
                    <td>label</td>
                    <td>Key name for the option's label field</td>
                    <td>string</td>
                    <td>—</td>
                    <td>label</td>
                </tr>
                <tr>
                    <td>children</td>
                    <td>Key name for the option's child options field</td>
                    <td>string</td>
                    <td>—</td>
                    <td>children</td>
                </tr>
                <tr>
                    <td>disabled</td>
                    <td>Key name for the option's disabled state field</td>
                    <td>string</td>
                    <td>—</td>
                    <td>disabled</td>
                </tr>
                <tr>
                    <td>leaf</td>
                    <td>Key name for the flag indicating whether the option is a leaf node</td>
                    <td>string</td>
                    <td>—</td>
                    <td>leaf</td>
                </tr>
            </tbody>
        </table>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo8 from "../../components/cascader/demo8.joker";
import DEMO_JOKER_demo7 from "../../components/cascader/demo7.joker";
import DEMO_JOKER_demo6 from "../../components/cascader/demo6.joker";
import DEMO_JOKER_demo5 from "../../components/cascader/demo5.joker";
import DEMO_JOKER_demo4 from "../../components/cascader/demo4.joker";
import DEMO_JOKER_demo3 from "../../components/cascader/demo3.joker";
import DEMO_JOKER_demo2 from "../../components/cascader/demo2.joker";
import DEMO_JOKER_demo1 from "../../components/cascader/demo1.joker";
export default class extends Component {
    components = {
        BottomNav,
        DEMO_JOKER_demo8,
        DEMO_JOKER_demo7,
        DEMO_JOKER_demo6,
        DEMO_JOKER_demo5,
        DEMO_JOKER_demo4,
        DEMO_JOKER_demo3,
        DEMO_JOKER_demo2,
        DEMO_JOKER_demo1
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>