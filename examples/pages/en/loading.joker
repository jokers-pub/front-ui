<template>
    <div ref="container" class="joker-demo-container">
        <h2>Loading</h2>
        <p>Display animations while data is being loaded.</p>
        <h3>Regional Display</h3>
        <p>
            You can specify the display host of the loading by configuring the
            <code>target</code>
            attribute.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo1)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div ref=&quot;target&quot; style=&quot;background:var(--jk-color-primary);width:200px;height:200px;&quot;&gt;&lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { Loading } from &quot;../../../src/index&quot;;
export default class extends Component {
    mounted() {
        Loading({
            target: this.$getRef(&quot;target&quot;)?.output
        });
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Full-screen Display</h3>
        <p>
            Set
            <code>fullscreen</code>
            or specify
            <code>target</code>
            as
            <strong>body</strong>
            to achieve full-screen loading.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo2)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-button @click=&quot;showLoading()&quot;&gt;Full-screen loading&lt;/jk-button&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { Loading } from &quot;../../../src/index&quot;;
export default class extends Component {
    showLoading() {
        let $loading = Loading({
            fullscreen: true
        });

        setTimeout(() =&gt; {
            $loading.close();
        }, 2000);
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <blockquote>
            <p>
                Please note that there can only be one full-screen loading. If triggered repeatedly, it will return the previous uncompleted loading operation component.
            </p>
        </blockquote>
        <p>
            It should be noted that full-screen loading called as a service is a singleton: if you call full-screen loading again before the previous full-screen loading is closed, a new loading instance will not be created, but the existing full-screen loading instance will be returned:
        </p>
        <pre><code class="language-js">let loading1 = Loading({ fullscreen: true });
let loading2 = Loading({ fullscreen: true });
console.log(loading1 === loading2); // true
</code></pre>
        <p>
            At this time, calling the
            <code>close</code>
            method of either of them can close this full-screen loading.
        </p>
        <h3>Customization</h3>
        <p>You can customize the loading text, icon, and background color.</p>
        <DemoContainer component="@(components.DEMO_JOKER_demo3)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div ref=&quot;target&quot; class=&quot;container&quot;&gt;&lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { Loading } from &quot;../../../src&quot;;

export default class extends Component {
    mounted() {
        Loading({
            target: this.$getRef(&quot;target&quot;)?.output,
            customClass: &quot;custom&quot;,
            spinner: &quot;jk-icon-loading&quot;,
            text: &quot;Customize the Loading text.&quot;
        });
    }
}
&lt;/script&gt;

&lt;style scoped lang=&quot;scss&quot;&gt;
.container {
    background: var(--jk-color-primary);
    height: 200px;

    :deep(.custom) {
        background: rgba(0, 0, 0, 0.6);
    }
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Options</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Parameter</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Optional Values</th>
                    <th>Default Value</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>target</td>
                    <td>
                        The DOM node that the Loading needs to cover. You can pass in a DOM object or a string; if a string is passed in, it will be used as a parameter to
                        <code>document.querySelector</code>
                        to obtain the corresponding DOM node.
                    </td>
                    <td>Element / string / VNode.Node; VNode nodes are supported</td>
                    <td>—</td>
                    <td>document.body</td>
                </tr>
                <tr>
                    <td>fullscreen</td>
                    <td>Whether it is full-screen</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>true</td>
                </tr>
                <tr>
                    <td>text</td>
                    <td>The loading text displayed below the loading icon</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>spinner</td>
                    <td>Custom loading icon class name</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>customClass</td>
                    <td>Custom class name of the Loading</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
            </tbody>
        </table>
        <h3>Methods</h3>
        <p>
            Calling
            <code>Loading</code>
            will return the current Loading instance. If you need to manually close the instance, you can call its
            <code>close</code>
            method.
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Method Name</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>close</td>
                    <td>Close the current Loading</td>
                </tr>
            </tbody>
        </table>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo3 from "../../components/loading/demo3.joker";
import DEMO_JOKER_demo2 from "../../components/loading/demo2.joker";
import DEMO_JOKER_demo1 from "../../components/loading/demo1.joker";
export default class extends Component {
    components = {
        BottomNav,
        DEMO_JOKER_demo3,
        DEMO_JOKER_demo2,
        DEMO_JOKER_demo1
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>