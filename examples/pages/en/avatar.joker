<template>
<div ref='container' class='joker-demo-container'>
<h2>Avatar 头像</h2>
<p>用图标、图片或者字符的形式展示用户或事物信息。</p>
<h3>基础用法</h3>
<p>通过 shape 和 size 设置头像的形状和大小。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo1)">
<pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-row&gt;
            &lt;jk-col span=&quot;12&quot;&gt;
                &lt;div class=&quot;sub-title&quot;&gt;circle&lt;/div&gt;
                &lt;jk-row align=&quot;middle&quot; type=&quot;flex&quot;&gt;
                    &lt;jk-col span=&quot;6&quot;&gt;
                        &lt;jk-avatar size=&quot;@(50)&quot; circle src=&quot;@model.circleUrl&quot;&gt;&lt;/jk-avatar&gt;
                    &lt;/jk-col&gt;
                    @for(let item of model.sizeList) {
                        &lt;jk-col span=&quot;6&quot;&gt;
                            &lt;jk-avatar size=&quot;@item&quot; circle src=&quot;@model.circleUrl&quot;&gt;&lt;/jk-avatar&gt;
                        &lt;/jk-col&gt;
                    }
                &lt;/jk-row&gt;
            &lt;/jk-col&gt;
            &lt;jk-col span=&quot;12&quot;&gt;
                &lt;div class=&quot;sub-title&quot;&gt;square&lt;/div&gt;
                &lt;jk-row align=&quot;middle&quot; type=&quot;flex&quot;&gt;
                    &lt;jk-col span=&quot;6&quot;&gt;
                        &lt;jk-avatar size=&quot;@(50)&quot; shape src=&quot;@model.squareUrl&quot;&gt;&lt;/jk-avatar&gt;
                    &lt;/jk-col&gt;
                    @for(let item of model.sizeList) {
                        &lt;jk-col span=&quot;6&quot;&gt;
                            &lt;jk-avatar size=&quot;@item&quot; shape src=&quot;@model.squareUrl&quot;&gt;&lt;/jk-avatar&gt;
                        &lt;/jk-col&gt;
                    }
                &lt;/jk-row&gt;
            &lt;/jk-col&gt;
        &lt;/jk-row&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        circleUrl: &quot;https://picsum.photos/120&quot;,
        squareUrl: &quot;https://picsum.photos/120&quot;,
        sizeList: [&quot;large&quot;, &quot;medium&quot;, &quot;small&quot;]
    };
}
&lt;/script&gt;
&lt;style scoped&gt;
.sub-title {
    text-align: center;
    margin-bottom: 10px;
    font-size: 14px;
    color: #8492a6;
}
&lt;/style&gt;
</code></pre>
</DemoContainer>
<h3>展示类型</h3>
<p>支持三种类型：图标、图片和字符</p>
<DemoContainer component="@(components.DEMO_JOKER_demo2)">
<pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;demo-type&quot;&gt;
        &lt;div&gt;
            &lt;jk-avatar icon=&quot;jk-icon-user&quot;&gt;&lt;/jk-avatar&gt;
        &lt;/div&gt;
        &lt;div&gt;
            &lt;jk-avatar src=&quot;/static/avatar/people.png&quot;&gt;&lt;/jk-avatar&gt;
        &lt;/div&gt;
        &lt;div&gt;
            &lt;jk-avatar text=&quot;user&quot;&gt;&lt;/jk-avatar&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;style lang=&quot;scss&quot; scoped&gt;
.demo-type {
    display: flex;
    &gt; div {
        flex: 1;
        text-align: center;
        &amp;:not(:last-child) {
            border-right: 1px solid rgba(224, 230, 237, 0.5);
        }
    }
}
&lt;/style&gt;
</code></pre>
</DemoContainer>
<h3>图片加载失败的 fallback 行为</h3>
<p>当展示类型为图片的时候，图片加载失败的 fallback 行为</p>
<DemoContainer component="@(components.DEMO_JOKER_demo3)">
<pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;demo-type&quot;&gt;
        &lt;jk-avatar size=&quot;@(60)&quot; src=&quot;https://empty&quot; error=&quot;@errorHandler&quot;&gt;
            &lt;img src=&quot;/static/avatar/empty.png&quot; /&gt;
        &lt;/jk-avatar&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    errorHandler() {
        return true;
    }
}
&lt;/script&gt;

&lt;style lang=&quot;scss&quot;&gt;
.demo-type {
    display: flex;
}
&lt;/style&gt;
</code></pre>
</DemoContainer>
<h3>图片如何适应容器框</h3>
<p>当展示类型为图片的时候，使用 fit 属性定义图片如何适应容器框，同原生 object-fit。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo4)">
<pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;demo-fit&quot;&gt;
        @for(let item of model.fits) {
            &lt;div class=&quot;block&quot;&gt;
                &lt;span class=&quot;title&quot;&gt;@item&lt;/span&gt;
                &lt;jk-avatar shape=&quot;square&quot; size=&quot;@(100)&quot; fit=&quot;@item&quot; src=&quot;/static/avatar/landscape.png&quot;&gt;&lt;/jk-avatar&gt;
            &lt;/div&gt;
        }
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        fits: [&quot;fill&quot;, &quot;contain&quot;, &quot;cover&quot;, &quot;none&quot;, &quot;scale-down&quot;]
    };
}
&lt;/script&gt;

&lt;style lang=&quot;scss&quot; scoped&gt;
.demo-fit {
    display: flex;
    text-align: center;
    justify-content: space-between;
    .block {
        flex: 1;
        display: flex;
        flex-direction: column;
        flex-grow: 0;
        .title {
            margin-bottom: 10px;
            font-size: 14px;
            color: #8492a6;
        }
    }
}
&lt;/style&gt;
</code></pre>
</DemoContainer>
<h3>Attributes</h3>
<table class="mkd-table">
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
<th>可选值</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>icon</td>
<td>设置头像的图标类型，参考 Icon 组件</td>
<td>string</td>
<td>-</td>
<td>—</td>
</tr>
<tr>
<td>size</td>
<td>设置头像的大小</td>
<td>number/string</td>
<td>number/large/medium/small</td>
<td>large</td>
</tr>
<tr>
<td>shape</td>
<td>设置头像的形状</td>
<td>string</td>
<td>circle/square</td>
<td>circle</td>
</tr>
<tr>
<td>src</td>
<td>图片头像的资源地址</td>
<td>string</td>
<td>—</td>
<td>-</td>
</tr>
<tr>
<td>srcSet</td>
<td>以逗号分隔的一个或多个字符串列表表明一系列用户代理使用的可能的图像</td>
<td>string</td>
<td>—</td>
<td>true</td>
</tr>
<tr>
<td>alt</td>
<td>描述图像的替换文本</td>
<td>string</td>
<td>—</td>
<td>-</td>
</tr>
<tr>
<td>fit</td>
<td>当展示类型为图片的时候，设置图片如何适应容器框</td>
<td>string</td>
<td>fill/contain/cover/none/scale-down</td>
<td>cover</td>
</tr>
<tr>
<td>class</td>
<td>自定义 class 样式</td>
<td>string</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>error</td>
<td>图片类头像加载失败的回调， 返回 false 会关闭组件默认的 fallback 行为</td>
<td>function</td>
<td>-</td>
<td>-</td>
</tr>
</tbody>
</table>
<h3>Event</h3>
<table class="mkd-table">
<thead>
<tr>
<th>事件名</th>
<th>说明</th>
<th>参数</th>
</tr>
</thead>
<tbody>
<tr>
<td>click</td>
<td>头像点击触发</td>
<td>-</td>
</tr>
</tbody>
</table>
<h3>Section</h3>
<table class="mkd-table">
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>default</td>
<td>自定义头像展示内容</td>
</tr>
</tbody>
</table>

<BottomNav />
</div>
</template>
<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo4 from '../../components/avatar/demo4.joker';
import DEMO_JOKER_demo3 from '../../components/avatar/demo3.joker';
import DEMO_JOKER_demo2 from '../../components/avatar/demo2.joker';
import DEMO_JOKER_demo1 from '../../components/avatar/demo1.joker';
export default class extends Component {
components={
BottomNav,
DEMO_JOKER_demo4,
DEMO_JOKER_demo3,
DEMO_JOKER_demo2,
DEMO_JOKER_demo1
}
mounted(){
let container= this.$getRef('container')?.output!;
container.querySelectorAll('pre code').forEach((el:HTMLElement) => {
        hljs.highlightElement(el);
      });
}
}
</script>