<template>
    <div ref="container" class="joker-demo-container">
        <h2>Upload Button</h2>
        <p>Provides an interactive button for file selection.</p>
        <h3>Basic Usage</h3>
        <DemoContainer component="@(components.DEMO_JOKER_demo1)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-upload-btn @change=&quot;handleClick&quot; /&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { Message } from &quot;../../../src&quot;;

export default class extends Component {
    handleClick(e: VNode.Event&lt;Array&lt;File&gt;&gt;) {
        Message(`You have selected ${e.data.length} files.`);
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Multiple File Upload</h3>
        <p>
            Enable multi-file selection by configuring the
            <code>multiple</code>
            property.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo2)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-upload-btn multiple @change=&quot;handleClick&quot;&gt;Multiple file upload&lt;/jk-upload-btn&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-upload-btn multiple @change=&quot;handleClick&quot; maxFileCount=&quot;2&quot;&gt;Select up to 2 files&lt;/jk-upload-btn&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { Message } from &quot;../../../src&quot;;

export default class extends Component {
    handleClick(e: VNode.Event&lt;Array&lt;File&gt;&gt;) {
        Message(`You have selected ${e.data.length} files.`);
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Limit Selection Types</h3>
        <p>
            You can limit the upload types by configuring the
            <code>mimeType</code>
            property. This property can accept values of type
            <code>string</code>
            or
            <code>string[]</code>
            .
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo3)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-upload-btn @change=&quot;handleClick&quot; mimeType=&quot;image/png&quot; /&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { Message } from &quot;../../../src&quot;;

export default class extends Component {
    handleClick(e: VNode.Event&lt;Array&lt;File&gt;&gt;) {
        if (e.data.length) {
            Message(`You have selected the file ${e.data[0].name}`);
        }
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Limit File Size</h3>
        <p>
            Limit the maximum size of each file by configuring the
            <code>maxFileSize</code>
            property. The unit is
            <strong>kb</strong>
            .
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo4)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-upload-btn @change=&quot;handleClick&quot; maxFileSize=&quot;12&quot; /&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { Message } from &quot;../../../src&quot;;

export default class extends Component {
    handleClick(e: VNode.Event&lt;Array&lt;File&gt;&gt;) {
        if (e.data.length) {
            Message(`The size of the selected file: ${e.data[0].size / 1024} kb`);
        }
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Attributes</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Parameter</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Optional Values</th>
                    <th>Default Value</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>icon</td>
                    <td>Button icon</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>btnType</td>
                    <td>
                        Button type, corresponding to the
                        <code>type</code>
                        of
                        <code>jk-button</code>
                    </td>
                    <td>string</td>
                    <td>-</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>title</td>
                    <td>
                        Button text. If the
                        <code>default</code>
                        area is specified, setting this property is invalid
                    </td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>btnSize</td>
                    <td>
                        Button size, corresponding to the
                        <code>size</code>
                        of
                        <code>jk-button</code>
                    </td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>disabled</td>
                    <td>Whether to disable</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>multiple</td>
                    <td>Whether to enable multi-selection</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>maxFileCount</td>
                    <td>Maximum number of uploads</td>
                    <td>number</td>
                    <td>—</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>mimeType</td>
                    <td>
                        Limit file types, wildcards are supported, e.g.,
                        <strong>(image/*)</strong>
                    </td>
                    <td>string / string[]</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>maxFileSize</td>
                    <td>
                        Maximum size limit for a single file, unit is
                        <strong>kb</strong>
                    </td>
                    <td>number</td>
                    <td>—</td>
                    <td>-</td>
                </tr>
            </tbody>
        </table>
        <h3>Events</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Event Name</th>
                    <th>Description</th>
                    <th>Callback Parameters</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>change</td>
                    <td>Notification of value change</td>
                    <td>—</td>
                </tr>
            </tbody>
        </table>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo4 from "../../components/upload-btn/demo4.joker";
import DEMO_JOKER_demo3 from "../../components/upload-btn/demo3.joker";
import DEMO_JOKER_demo2 from "../../components/upload-btn/demo2.joker";
import DEMO_JOKER_demo1 from "../../components/upload-btn/demo1.joker";
export default class extends Component {
    components = {
        BottomNav,
        DEMO_JOKER_demo4,
        DEMO_JOKER_demo3,
        DEMO_JOKER_demo2,
        DEMO_JOKER_demo1
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>