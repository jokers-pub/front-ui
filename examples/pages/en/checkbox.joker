<template>
<div ref='container' class='joker-demo-container'>
<h2>Checkbox</h2>
<p>Allows multiple selections from a set of options.</p>
<h3>Basic Usage</h3>
<p>When used alone, it can represent the switch between two states. The content written in the label is the description after the Checkbox button.
In the <code>jk-checkbox</code> component, define the <code>value</code> binding variable. In a single Checkbox, the value of the default binding variable will be of type <code>Boolean</code>, and <code>true</code> when selected.</p>
<DemoContainer component="@(components.DEMO_JOKER_demo1)">
<pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-checkbox value=&quot;@model.value1&quot; @change=&quot;handleChange1&quot;&gt;备选项1&lt;/jk-checkbox&gt;
        &lt;jk-checkbox value=&quot;@model.value2&quot; @change=&quot;handleChange2&quot;&gt;备选项2&lt;/jk-checkbox&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;

&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
export default class extends Component {
    model = {
        value1: true,
        value2: false
    };
    handleChange1(e: VNode.Event) {
        console.log(e.data)
    }
    handleChange2(e: VNode.Event) {
        console.log(e.data)
    }
}
&lt;/script&gt;
</code></pre>
</DemoContainer>
<h3>Disabled State</h3>
<p>The state where the checkbox is unavailable.
Just set the <code>disabled</code> attribute in the <code>jk-checkbox</code> component. It accepts a <code>Boolean</code> value, with <code>true</code> indicating disabled.</p>
<DemoContainer component="@(components.DEMO_JOKER_demo2)">
<pre><code class="language-html">&lt;template&gt;
    &lt;jk-checkbox disabled value&gt;备选项1&lt;/jk-checkbox&gt;
    &lt;jk-checkbox disabled value=&quot;@false&quot;&gt;备选项2&lt;/jk-checkbox&gt;
&lt;/template&gt;
</code></pre>
</DemoContainer>
<h3>Checkbox Group</h3>
<p>Suitable for scenarios where multiple checkboxes are bound to the same array. The selected items in this group of options are represented by whether they are checked or not.
The <code>jk-checkbox-group</code> component can manage multiple checkboxes as a group. You only need to use <code>value</code> to bind an <code>Array</code>-type variable in the Group. The <code>label</code> attribute of the <code>jk-checkbox</code> is the value corresponding to this checkbox. If there is no content in the label, this attribute also serves as the description after the Checkbox button. The <code>label</code> corresponds to the element value in the array. If the specified value exists, it is in the selected state; otherwise, it is not selected.</p>
<DemoContainer component="@(components.DEMO_JOKER_demo3)">
<pre><code class="language-html">&lt;template&gt;
    &lt;jk-checkbox-group value=&quot;@model.checkList&quot;&gt;
        &lt;jk-checkbox label=&quot;复选框 A&quot;&gt;&lt;/jk-checkbox&gt;
        &lt;jk-checkbox label=&quot;复选框 B&quot;&gt;&lt;/jk-checkbox&gt;
        &lt;jk-checkbox label=&quot;复选框 C&quot;&gt;&lt;/jk-checkbox&gt;
        &lt;jk-checkbox label=&quot;禁用&quot; disabled&gt;&lt;/jk-checkbox&gt;
        &lt;jk-checkbox label=&quot;选中且禁用&quot; disabled&gt;&lt;/jk-checkbox&gt;
    &lt;/jk-checkbox-group&gt;
&lt;/template&gt;

&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
export default class extends Component {
    model = {
        checkList: [&quot;选中且禁用&quot;, &quot;复选框 A&quot;],
        checkAll: false,
        indeterminate: false
    };
}
&lt;/script&gt;
</code></pre>
</DemoContainer>
<h3>Indeterminate State</h3>
<p>The <code>indeterminate</code> attribute is used to represent the indeterminate state of the checkbox, generally used to achieve the effect of &quot;select all&quot;.</p>
<DemoContainer component="@(components.DEMO_JOKER_demo4)">
<pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-checkbox indeterminate=&quot;@model.indeterminate&quot; value=&quot;@model.checkAll&quot; @change=&quot;handleCheckAllChange&quot;&gt;
            全选
        &lt;/jk-checkbox&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-checkbox-group value=&quot;@model.checkedCities&quot; @change=&quot;handleGroupChange&quot;&gt;
            @for(let cityItem of model.cities) {
                &lt;jk-checkbox label=&quot;@cityItem&quot;&gt;&lt;/jk-checkbox&gt;
            }
        &lt;/jk-checkbox-group&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;

&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
export default class extends Component {
    model = {
        cities: [&quot;上海&quot;, &quot;北京&quot;, &quot;广州&quot;, &quot;深圳&quot;],
        checkedCities: [&quot;上海&quot;, &quot;北京&quot;],
        checkAll: false,
        indeterminate: true
    };
    handleCheckAllChange(e: VNode.Event) {
        this.model.checkedCities = e.data ? Object.assign([], this.model.cities) : [];
        this.model.indeterminate = false;
    }
    handleGroupChange(e: VNode.Event) {
        let checklength = this.model.checkedCities.length;
        let citieslength = this.model.cities.length;
        this.model.indeterminate = checklength &gt; 0 &amp;&amp; checklength &lt; citieslength;
        this.model.checkAll = checklength === citieslength;
    }
}
&lt;/script&gt;
</code></pre>
</DemoContainer>
<h3>Limit on the Number of Selectable Items</h3>
<p>The <code>min</code> and <code>max</code> attributes can be used to limit the number of items that can be checked.</p>
<DemoContainer component="@(components.DEMO_JOKER_demo5)">
<pre><code class="language-html">&lt;template&gt;
    &lt;jk-checkbox-group value=&quot;@model.checkedCities&quot; min=&quot;1&quot; max=&quot;2&quot;&gt;
        @for(let cityItem of model.cities) {
            &lt;jk-checkbox label=&quot;@cityItem&quot;&gt;&lt;/jk-checkbox&gt;
        }
    &lt;/jk-checkbox-group&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        cities: [&quot;上海&quot;, &quot;北京&quot;, &quot;广州&quot;, &quot;深圳&quot;],
        checkedCities: [&quot;上海&quot;, &quot;北京&quot;]
    };
}
&lt;/script&gt;
</code></pre>
</DemoContainer>
<h3>Button Style</h3>
<p>A set of checkboxes in button style.</p>
<DemoContainer component="@(components.DEMO_JOKER_demo6)">
<pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-checkbox-group value=&quot;@model.checkedCities1&quot;&gt;
            &lt;jk-checkbox-button label=&quot;上海&quot;&gt;&lt;/jk-checkbox-button&gt;
            &lt;jk-checkbox-button label=&quot;北京&quot;&gt;&lt;/jk-checkbox-button&gt;
            &lt;jk-checkbox-button label=&quot;广州&quot;&gt;&lt;/jk-checkbox-button&gt;
            &lt;jk-checkbox-button label=&quot;深圳&quot;&gt;&lt;/jk-checkbox-button&gt;
        &lt;/jk-checkbox-group&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-checkbox-group value=&quot;@model.checkedCities2&quot; size=&quot;medium&quot;&gt;
            &lt;jk-checkbox-button label=&quot;上海&quot;&gt;&lt;/jk-checkbox-button&gt;
            &lt;jk-checkbox-button label=&quot;北京&quot;&gt;&lt;/jk-checkbox-button&gt;
            &lt;jk-checkbox-button label=&quot;广州&quot;&gt;&lt;/jk-checkbox-button&gt;
            &lt;jk-checkbox-button label=&quot;深圳&quot;&gt;&lt;/jk-checkbox-button&gt;
        &lt;/jk-checkbox-group&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-checkbox-group value=&quot;@model.checkedCities3&quot; size=&quot;small&quot;&gt;
            &lt;jk-checkbox-button label=&quot;上海&quot;&gt;&lt;/jk-checkbox-button&gt;
            &lt;jk-checkbox-button label=&quot;北京&quot;&gt;&lt;/jk-checkbox-button&gt;
            &lt;jk-checkbox-button label=&quot;广州&quot;&gt;&lt;/jk-checkbox-button&gt;
            &lt;jk-checkbox-button disabled label=&quot;深圳&quot;&gt;&lt;/jk-checkbox-button&gt;
        &lt;/jk-checkbox-group&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-checkbox-group value=&quot;@model.checkedCities4&quot; size=&quot;mini&quot;&gt;
            &lt;jk-checkbox-button label=&quot;上海&quot;&gt;&lt;/jk-checkbox-button&gt;
            &lt;jk-checkbox-button disabled label=&quot;北京&quot;&gt;&lt;/jk-checkbox-button&gt;
            &lt;jk-checkbox-button label=&quot;广州&quot;&gt;&lt;/jk-checkbox-button&gt;
            &lt;jk-checkbox-button label=&quot;深圳&quot;&gt;&lt;/jk-checkbox-button&gt;
        &lt;/jk-checkbox-group&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-checkbox-group value=&quot;@model.checkedCities5&quot; size=&quot;mini&quot; disabled&gt;
            &lt;jk-checkbox-button label=&quot;上海&quot;&gt;&lt;/jk-checkbox-button&gt;
            &lt;jk-checkbox-button label=&quot;北京&quot;&gt;&lt;/jk-checkbox-button&gt;
            &lt;jk-checkbox-button label=&quot;广州&quot;&gt;&lt;/jk-checkbox-button&gt;
            &lt;jk-checkbox-button label=&quot;深圳&quot;&gt;&lt;/jk-checkbox-button&gt;
        &lt;/jk-checkbox-group&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        checkedCities1: [&quot;上海&quot;, &quot;北京&quot;],
        checkedCities2: [&quot;上海&quot;, &quot;北京&quot;],
        checkedCities3: [&quot;上海&quot;, &quot;北京&quot;],
        checkedCities4: [&quot;上海&quot;, &quot;北京&quot;],
        checkedCities5: [&quot;上海&quot;, &quot;北京&quot;]
    };
}
&lt;/script&gt;
</code></pre>
</DemoContainer>
<h3>With Border</h3>
<p>Setting the <code>border</code> attribute can render it as a checkbox with a border. The <code>size</code> attribute of the <code>jk-checkbox</code> only takes effect when <code>border</code> is set.</p>
<DemoContainer component="@(components.DEMO_JOKER_demo7)">
<pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-checkbox-group value=&quot;@model.checkedCities1&quot;&gt;
            &lt;jk-checkbox border label=&quot;上海&quot;&gt;&lt;/jk-checkbox&gt;
            &lt;jk-checkbox border label=&quot;北京&quot;&gt;&lt;/jk-checkbox&gt;
            &lt;jk-checkbox border label=&quot;广州&quot;&gt;&lt;/jk-checkbox&gt;
            &lt;jk-checkbox border label=&quot;深圳&quot;&gt;&lt;/jk-checkbox&gt;
        &lt;/jk-checkbox-group&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-checkbox-group value=&quot;@model.checkedCities2&quot; size=&quot;medium&quot;&gt;
            &lt;jk-checkbox border label=&quot;上海&quot;&gt;&lt;/jk-checkbox&gt;
            &lt;jk-checkbox border label=&quot;北京&quot;&gt;&lt;/jk-checkbox&gt;
            &lt;jk-checkbox border label=&quot;广州&quot;&gt;&lt;/jk-checkbox&gt;
            &lt;jk-checkbox border label=&quot;深圳&quot;&gt;&lt;/jk-checkbox&gt;
        &lt;/jk-checkbox-group&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-checkbox-group value=&quot;@model.checkedCities3&quot; size=&quot;small&quot;&gt;
            &lt;jk-checkbox border label=&quot;上海&quot;&gt;&lt;/jk-checkbox&gt;
            &lt;jk-checkbox border label=&quot;北京&quot;&gt;&lt;/jk-checkbox&gt;
            &lt;jk-checkbox border label=&quot;广州&quot;&gt;&lt;/jk-checkbox&gt;
            &lt;jk-checkbox border disabled label=&quot;深圳&quot;&gt;&lt;/jk-checkbox&gt;
        &lt;/jk-checkbox-group&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-checkbox-group value=&quot;@model.checkedCities4&quot; size=&quot;mini&quot;&gt;
            &lt;jk-checkbox border label=&quot;上海&quot;&gt;&lt;/jk-checkbox&gt;
            &lt;jk-checkbox border disabled label=&quot;北京&quot;&gt;&lt;/jk-checkbox&gt;
            &lt;jk-checkbox border label=&quot;广州&quot;&gt;&lt;/jk-checkbox&gt;
            &lt;jk-checkbox border label=&quot;深圳&quot;&gt;&lt;/jk-checkbox&gt;
        &lt;/jk-checkbox-group&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-checkbox-group value=&quot;@model.checkedCities5&quot; size=&quot;mini&quot; disabled&gt;
            &lt;jk-checkbox border label=&quot;上海&quot;&gt;&lt;/jk-checkbox&gt;
            &lt;jk-checkbox border label=&quot;北京&quot;&gt;&lt;/jk-checkbox&gt;
            &lt;jk-checkbox border label=&quot;广州&quot;&gt;&lt;/jk-checkbox&gt;
            &lt;jk-checkbox border label=&quot;深圳&quot;&gt;&lt;/jk-checkbox&gt;
        &lt;/jk-checkbox-group&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        checkedCities1: [&quot;北京&quot;],
        checkedCities2: [&quot;北京&quot;],
        checkedCities3: [&quot;北京&quot;],
        checkedCities4: [&quot;北京&quot;],
        checkedCities5: [&quot;北京&quot;]
    };
}
&lt;/script&gt;
</code></pre>
</DemoContainer>
<h3>Checkbox Attributes</h3>
<table class="mkd-table">
<thead>
<tr>
<th>Parameter</th>
<th>Description</th>
<th>Type</th>
<th>Optional Values</th>
<th>Default Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>value</td>
<td>Bound value</td>
<td>string / number / boolean</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>label</td>
<td>The value of the Checkbox</td>
<td>string / number / boolean</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>class</td>
<td>Custom class style</td>
<td>string</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>disabled</td>
<td>Whether it is disabled</td>
<td>boolean</td>
<td>—</td>
<td>false</td>
</tr>
<tr>
<td>border</td>
<td>Whether to display a border</td>
<td>boolean</td>
<td>—</td>
<td>false</td>
</tr>
<tr>
<td>size</td>
<td>The size of the Checkbox, only valid when border is true</td>
<td>string</td>
<td>medium / small / mini</td>
<td>—</td>
</tr>
<tr>
<td>name</td>
<td>Native name attribute</td>
<td>string</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>indeterminate</td>
<td>Set the indeterminate state, only responsible for style control</td>
<td>boolean</td>
<td>—</td>
<td>—</td>
</tr>
</tbody>
</table>
<h3>Checkbox Events</h3>
<table class="mkd-table">
<thead>
<tr>
<th>Event Name</th>
<th>Description</th>
<th>Callback Parameter</th>
</tr>
</thead>
<tbody>
<tr>
<td>change</td>
<td>The event triggered when the selection state changes</td>
<td>The changed value</td>
</tr>
</tbody>
</table>
<h3>Checkbox-button Attributes</h3>
<table class="mkd-table">
<thead>
<tr>
<th>Parameter</th>
<th>Description</th>
<th>Type</th>
<th>Optional Values</th>
<th>Default Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>value</td>
<td>Bound value</td>
<td>string / number / boolean</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>label</td>
<td>The value in the selected state (only valid in checkbox-group)</td>
<td>string / number / boolean</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>disabled</td>
<td>Whether it is disabled</td>
<td>boolean</td>
<td>—</td>
<td>false</td>
</tr>
<tr>
<td>name</td>
<td>Native name attribute</td>
<td>string</td>
<td>—</td>
<td>—</td>
</tr>
</tbody>
</table>
<h3>Checkbox-button Events</h3>
<table class="mkd-table">
<thead>
<tr>
<th>Event Name</th>
<th>Description</th>
<th>Callback Parameter</th>
</tr>
</thead>
<tbody>
<tr>
<td>change</td>
<td>The event triggered when the selection state changes</td>
<td>The changed value</td>
</tr>
</tbody>
</table>
<h3>Checkbox-group Attributes</h3>
<table class="mkd-table">
<thead>
<tr>
<th>Parameter</th>
<th>Description</th>
<th>Type</th>
<th>Optional Values</th>
<th>Default Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>value</td>
<td>Bound value</td>
<td>array</td>
<td>—</td>
<td>[]</td>
</tr>
<tr>
<td>size</td>
<td>The size of the checkbox group, only valid for button-style checkboxes or checkboxes with borders</td>
<td>string</td>
<td>medium / small / mini</td>
<td>—</td>
</tr>
<tr>
<td>disabled</td>
<td>Whether it is disabled</td>
<td>boolean</td>
<td>—</td>
<td>false</td>
</tr>
<tr>
<td>min</td>
<td>The minimum number of checkboxes that can be checked</td>
<td>number</td>
<td>—</td>
<td>-</td>
</tr>
<tr>
<td>max</td>
<td>The maximum number of checkboxes that can be checked</td>
<td>number</td>
<td>—</td>
<td>-</td>
</tr>
</tbody>
</table>
<h3>Checkbox-group Events</h3>
<table class="mkd-table">
<thead>
<tr>
<th>Event Name</th>
<th>Description</th>
<th>Callback Parameter</th>
</tr>
</thead>
<tbody>
<tr>
<td>change</td>
<td>The event triggered when the selection state changes</td>
<td>The changed value</td>
</tr>
</tbody>
</table>

<BottomNav />
</div>
</template>
<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo7 from '../../components/checkbox/demo7.joker';
import DEMO_JOKER_demo6 from '../../components/checkbox/demo6.joker';
import DEMO_JOKER_demo5 from '../../components/checkbox/demo5.joker';
import DEMO_JOKER_demo4 from '../../components/checkbox/demo4.joker';
import DEMO_JOKER_demo3 from '../../components/checkbox/demo3.joker';
import DEMO_JOKER_demo2 from '../../components/checkbox/demo2.joker';
import DEMO_JOKER_demo1 from '../../components/checkbox/demo1.joker';
export default class extends Component {
components={
BottomNav,
DEMO_JOKER_demo7,
DEMO_JOKER_demo6,
DEMO_JOKER_demo5,
DEMO_JOKER_demo4,
DEMO_JOKER_demo3,
DEMO_JOKER_demo2,
DEMO_JOKER_demo1
}
mounted(){
let container= this.$getRef('container')?.output!;
container.querySelectorAll('pre code').forEach((el:HTMLElement) => {
        hljs.highlightElement(el);
      });
}
}
</script>