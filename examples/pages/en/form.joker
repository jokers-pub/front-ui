<template>
<div ref='container' class='joker-demo-container'>
<h2>Form</h2>
<p>A component used to provide interactive functions such as form data collection, validation, and submission.</p>
<h3>Typical Forms</h3>
<p>It includes various form items, such as input boxes, selectors, switches, radio boxes, checkboxes, etc.</p>
<DemoContainer component="@(components.DEMO_JOKER_demo1)">
<pre><code class="language-html">&lt;template&gt;
    &lt;jk-form ref=&quot;form&quot; label-width=&quot;100px&quot; @submit=&quot;handleFormSubmit&quot;&gt;
        &lt;jk-form-item label=&quot;活动名称&quot; tip=&quot;测试数据，请理解&quot;&gt;
            &lt;jk-input name=&quot;name&quot; placeholder=&quot;请输入活动名称&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item
            label=&quot;活动区域&quot;
            tip=&quot;测试数据，请理解，超长文本测试，测试数据，请理解，超长文本测试，测试数据，请理解，超长文本测试，测试数据，请理解，超长文本测试，测试数据，请理解，超长文本测试&quot;&gt;
            &lt;jk-select name=&quot;area&quot; placeholder=&quot;请选择活动区域&quot;&gt;
                &lt;jk-option label=&quot;山东&quot; value=&quot;shandong&quot; /&gt;
                &lt;jk-option label=&quot;北京&quot; value=&quot;beijing&quot; /&gt;
            &lt;/jk-select&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动时间&quot;&gt;
            &lt;jk-date-picker
                name=&quot;date&quot;
                type=&quot;daterange&quot;
                range-separator=&quot;至&quot;
                startPlaceholder=&quot;开始日期&quot;
                endPlaceholder=&quot;结束日期&quot;&gt;&lt;/jk-date-picker&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;推广&quot;&gt;
            &lt;jk-switch name=&quot;promotion&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动性质&quot;&gt;
            &lt;jk-checkbox-group name=&quot;type&quot;&gt;
                &lt;jk-checkbox label=&quot;美食/餐厅线上活动&quot;&gt;&lt;/jk-checkbox&gt;
                &lt;jk-checkbox label=&quot;线下活动&quot;&gt;&lt;/jk-checkbox&gt;
                &lt;jk-checkbox label=&quot;自驾游&quot;&gt;&lt;/jk-checkbox&gt;
                &lt;jk-checkbox label=&quot;发布会&quot;&gt;&lt;/jk-checkbox&gt;
                &lt;jk-checkbox label=&quot;跟团出行&quot;&gt;&lt;/jk-checkbox&gt;
            &lt;/jk-checkbox-group&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;资金来源&quot;&gt;
            &lt;jk-radio-group name=&quot;source&quot;&gt;
                &lt;jk-radio value=&quot;1&quot;&gt;品牌商赞助&lt;/jk-radio&gt;
                &lt;jk-radio value=&quot;2&quot;&gt;线下场地免费&lt;/jk-radio&gt;
                &lt;jk-radio value=&quot;3&quot;&gt;费用均摊&lt;/jk-radio&gt;
            &lt;/jk-radio-group&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;资金比例&quot;&gt;
            &lt;jk-slider name=&quot;sourcePic&quot; value=&quot;30&quot;&gt;&lt;/jk-slider&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动要则&quot;&gt;
            &lt;jk-textarea name=&quot;note&quot; placeholder=&quot;请输入内容&quot; rows=&quot;2&quot;&gt;&lt;/jk-textarea&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item&gt;
            &lt;jk-button type=&quot;primary&quot; nativeType=&quot;submit&quot;&gt;提交&lt;/jk-button&gt;
        &lt;/jk-form-item&gt;
    &lt;/jk-form&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;

export default class extends Component {
    handleFormSubmit(e: VNode.Event&lt;any&gt;) {
        let form = (e.target as VNode.Component)?.component;
        console.log(e.data);
    }
}
&lt;/script&gt;
</code></pre>
</DemoContainer>
<h3>Inline Forms</h3>
<p>Setting the <code>inline</code> attribute can turn the form into an inline form. When vertical space is limited and the form is relatively simple, an inline form can be used.</p>
<DemoContainer component="@(components.DEMO_JOKER_demo2)">
<pre><code class="language-html">&lt;template&gt;
    &lt;jk-form inline&gt;
        &lt;jk-form-item label=&quot;活动名称&quot;&gt;
            &lt;jk-input name=&quot;name&quot; placeholder=&quot;请输入活动名称&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动区域&quot;&gt;
            &lt;jk-select name=&quot;area&quot; placeholder=&quot;请选择活动区域&quot;&gt;
                &lt;jk-option label=&quot;山东&quot; value=&quot;shandong&quot; /&gt;
                &lt;jk-option label=&quot;北京&quot; value=&quot;beijing&quot; /&gt;
            &lt;/jk-select&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动时间&quot;&gt;
            &lt;jk-date-picker
                name=&quot;date&quot;
                type=&quot;daterange&quot;
                range-separator=&quot;至&quot;
                startPlaceholder=&quot;开始日期&quot;
                endPlaceholder=&quot;结束日期&quot;&gt;&lt;/jk-date-picker&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item&gt;
            &lt;jk-button type=&quot;primary&quot;&gt;查询&lt;/jk-button&gt;
        &lt;/jk-form-item&gt;
    &lt;/jk-form&gt;
&lt;/template&gt;

</code></pre>
</DemoContainer>
<h3>Text Alignment</h3>
<p>The alignment of the title can be set through the <code>label-position</code> attribute. Currently, it supports: <code>top</code>, <code>left</code>. When set to <code>top</code>, the title will be placed at the top of the form item.</p>
<DemoContainer component="@(components.DEMO_JOKER_demo3)">
<pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-radio-group value=&quot;@model.labelPosition&quot; @change=&quot;handleRadioChange&quot;&gt;
            &lt;jk-radio-button value=&quot;left&quot;&gt;左对齐&lt;/jk-radio-button&gt;
            &lt;jk-radio-button value=&quot;right&quot;&gt;右对齐&lt;/jk-radio-button&gt;
            &lt;jk-radio-button value=&quot;top&quot;&gt;顶部对齐&lt;/jk-radio-button&gt;
        &lt;/jk-radio-group&gt;
    &lt;/DemoRow&gt;
    &lt;jk-form label-position=&quot;@model.labelPosition&quot;&gt;
        &lt;jk-form-item label=&quot;名称&quot;&gt;
            &lt;jk-input name=&quot;name&quot; placeholder=&quot;请输入活动名称&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;区域&quot;&gt;
            &lt;jk-select name=&quot;area&quot; placeholder=&quot;请选择活动区域&quot;&gt;
                &lt;jk-option label=&quot;山东&quot; value=&quot;shandong&quot; /&gt;
                &lt;jk-option label=&quot;北京&quot; value=&quot;beijing&quot; /&gt;
            &lt;/jk-select&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;时间&quot;&gt;
            &lt;jk-date-picker
                name=&quot;date&quot;
                type=&quot;daterange&quot;
                range-separator=&quot;至&quot;
                startPlaceholder=&quot;开始日期&quot;
                endPlaceholder=&quot;结束日期&quot;&gt;&lt;/jk-date-picker&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item&gt;
            &lt;jk-button type=&quot;primary&quot;&gt;查询&lt;/jk-button&gt;
        &lt;/jk-form-item&gt;
    &lt;/jk-form&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        labelPosition: &quot;right&quot;
    };

    handleRadioChange(e: VNode.Event&lt;string&gt;) {
        this.model.labelPosition = e.data;
    }
}
&lt;/script&gt;
</code></pre>
</DemoContainer>
<h3>Form Validation</h3>
<p>The Form component provides a form validation function. It has basic validation methods internally, and validation rules can be configured by adding <code>validate</code>.</p>
<DemoContainer component="@(components.DEMO_JOKER_demo4)">
<pre><code class="language-html">&lt;template&gt;
    &lt;jk-form ref=&quot;form&quot; @submit=&quot;handleFormSubmit&quot;&gt;
        &lt;jk-form-item label=&quot;活动名称&quot; required&gt;
            &lt;jk-input name=&quot;name&quot; validate=&quot;@Global.isRequired()&quot; placeholder=&quot;请输入活动名称&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动区域&quot; required&gt;
            &lt;jk-select name=&quot;area&quot; validate=&quot;@Global.isRequired()&quot; placeholder=&quot;请选择活动区域&quot;&gt;
                &lt;jk-option label=&quot;山东&quot; value=&quot;shandong&quot; /&gt;
                &lt;jk-option label=&quot;北京&quot; value=&quot;beijing&quot; /&gt;
            &lt;/jk-select&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动时间&quot; required&gt;
            &lt;jk-date-picker
                name=&quot;date&quot;
                validate=&quot;@Global.isRequired('请选择活动时间')&quot;
                type=&quot;daterange&quot;
                range-separator=&quot;至&quot;
                startPlaceholder=&quot;开始日期&quot;
                endPlaceholder=&quot;结束日期&quot;&gt;&lt;/jk-date-picker&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;审核时间&quot; required&gt;
            &lt;jk-date-picker
                name=&quot;examineDate&quot;
                validate=&quot;@Global.isRequired()&quot;
                placeholder=&quot;请选择审核时间&quot;&gt;&lt;/jk-date-picker&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;组织者&quot; required&gt;
            &lt;jk-col span=&quot;8&quot;&gt;
                &lt;jk-form-item labelWidth=&quot;0&quot;&gt;
                    &lt;jk-select name=&quot;organization&quot; validate=&quot;@Global.isRequired()&quot; placeholder=&quot;请选择组织&quot;&gt;
                        &lt;jk-option label=&quot;北部大区&quot; value=&quot;01&quot;&gt;&lt;/jk-option&gt;
                        &lt;jk-option label=&quot;南部大区&quot; value=&quot;02&quot;&gt;&lt;/jk-option&gt;
                    &lt;/jk-select&gt;
                &lt;/jk-form-item&gt;
            &lt;/jk-col&gt;
            &lt;jk-col span=&quot;1&quot;&gt;-&lt;/jk-col&gt;
            &lt;jk-col span=&quot;15&quot;&gt;
                &lt;jk-form-item labelWidth=&quot;0&quot;&gt;
                    &lt;jk-select name=&quot;userName&quot; validate=&quot;@Global.isRequired()&quot; placeholder=&quot;请选择用户&quot;&gt;
                        &lt;jk-option label=&quot;张三&quot; value=&quot;01&quot;&gt;&lt;/jk-option&gt;
                        &lt;jk-option label=&quot;李四&quot; value=&quot;02&quot;&gt;&lt;/jk-option&gt;
                    &lt;/jk-select&gt;
                &lt;/jk-form-item&gt;
            &lt;/jk-col&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;推广&quot;&gt;
            &lt;jk-switch name=&quot;promotion&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;参与人数&quot;&gt;
            &lt;jk-number name=&quot;userCount&quot; size=&quot;small&quot; placeholder=&quot;请设置人数&quot; validate=&quot;@Global.isRequired()&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动性质&quot; required&gt;
            &lt;jk-checkbox-group name=&quot;type&quot; validate=&quot;@Global.isRequired('请选择活动性质')&quot;&gt;
                &lt;jk-checkbox label=&quot;美食/餐厅线上活动&quot;&gt;&lt;/jk-checkbox&gt;
                &lt;jk-checkbox label=&quot;线下活动&quot;&gt;&lt;/jk-checkbox&gt;
                &lt;jk-checkbox label=&quot;自驾游&quot;&gt;&lt;/jk-checkbox&gt;
                &lt;jk-checkbox label=&quot;发布会&quot;&gt;&lt;/jk-checkbox&gt;
                &lt;jk-checkbox label=&quot;跟团出行&quot;&gt;&lt;/jk-checkbox&gt;
            &lt;/jk-checkbox-group&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;资金来源&quot; required&gt;
            &lt;jk-radio-group name=&quot;source&quot; validate=&quot;@Global.isRequired('请选择资金来源')&quot;&gt;
                &lt;jk-radio value=&quot;1&quot;&gt;品牌商赞助&lt;/jk-radio&gt;
                &lt;jk-radio value=&quot;2&quot;&gt;线下场地免费&lt;/jk-radio&gt;
                &lt;jk-radio value=&quot;3&quot;&gt;费用均摊&lt;/jk-radio&gt;
            &lt;/jk-radio-group&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动要则&quot; required&gt;
            &lt;jk-textarea
                name=&quot;note&quot;
                validate=&quot;@Global.isRequired()&quot;
                placeholder=&quot;请输入活动要则&quot;
                rows=&quot;2&quot;&gt;&lt;/jk-textarea&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item&gt;
            &lt;jk-button type=&quot;primary&quot; nativeType=&quot;submit&quot;&gt;提交&lt;/jk-button&gt;
        &lt;/jk-form-item&gt;
    &lt;/jk-form&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;

export default class extends Component {
    async handleFormSubmit(e: VNode.Event) {
        console.log(&quot;验证成功&quot;, e.data);
    }
}
&lt;/script&gt;

</code></pre>
</DemoContainer>
<blockquote>
<p>Configuring <code>required</code> in <code>form-item</code> is only used to determine whether to display an <strong>asterisk</strong> and does not perform any validation operations itself.</p>
</blockquote>
<h3>Built-in Rules</h3>
<p>Common validation rules are provided internally, and <code>validate</code> is used for configuration.</p>
<table class="mkd-table">
<thead>
<tr>
<th>Rule</th>
<th>Description</th>
<th>Value Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Global.isRequired(msg)</code></td>
<td>Non-empty validation</td>
<td>Error information can be configured through this attribute. If not set, the error will be prompted according to <code>placeholder</code>.</td>
</tr>
<tr>
<td><code>Global.isInt(msg)</code></td>
<td>Positive integer validation</td>
<td>Error prompt</td>
</tr>
<tr>
<td><code>Global.isNumber(msg)</code></td>
<td>Numeric validation</td>
<td>Error prompt</td>
</tr>
<tr>
<td><code>Global.isPhone(msg)</code></td>
<td>Mobile phone number format validation</td>
<td>Error prompt</td>
</tr>
<tr>
<td><code>Global.isEmail(msg)</code></td>
<td>Email format validation</td>
<td>Error prompt</td>
</tr>
<tr>
<td><code>Global.isMatched(regex,msg)</code></td>
<td>Custom regular expression validation</td>
<td>{pattern:string,msg:string}, where <code>pattern</code> is a required item used to configure the regular expression rule, and <code>msg</code> is the error prompt.</td>
</tr>
<tr>
<td><code>Global.isLengthInRange(min,max,msg)</code></td>
<td>Length validation</td>
<td><code>（Minimum value, maximum value, error message）</code>: The maximum and minimum values can be set in the form of an array.</td>
</tr>
</tbody>
</table>
<DemoContainer component="@(components.DEMO_JOKER_demo5)">
<pre><code class="language-html">&lt;template&gt;
    &lt;jk-form ref=&quot;form&quot; labelWidth=&quot;100px&quot; @submit=&quot;handleFormSubmit&quot;&gt;
        &lt;jk-form-item label=&quot;必填验证&quot; required&gt;
            &lt;jk-input name=&quot;v1&quot; validate=&quot;@Global.isRequired()&quot; placeholder=&quot;请输入内容&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;必填验证&quot; required&gt;
            &lt;jk-select name=&quot;v2&quot; validate=&quot;@Global.isRequired()&quot; placeholder=&quot;请选择活动区域&quot;&gt;
                &lt;jk-option label=&quot;山东&quot; value=&quot;shandong&quot; /&gt;
                &lt;jk-option label=&quot;北京&quot; value=&quot;beijing&quot; /&gt;
            &lt;/jk-select&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;正整数验证&quot;&gt;
            &lt;jk-input name=&quot;v3&quot; validate=&quot;@Global.isInt()&quot; placeholder=&quot;请输入内容&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;数值验证&quot;&gt;
            &lt;jk-input name=&quot;v4&quot; validate=&quot;@Global.isNumber()&quot; placeholder=&quot;请输入内容&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;手机号验证&quot;&gt;
            &lt;jk-input name=&quot;v5&quot; validate=&quot;@Global.isPhone()&quot; placeholder=&quot;请输入内容&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;邮箱验证&quot;&gt;
            &lt;jk-input name=&quot;v6&quot; validate=&quot;@Global.isEmail()&quot; placeholder=&quot;请输入内容&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;正则&quot;&gt;
            &lt;jk-input name=&quot;v7&quot; validate=&quot;@Global.isMatched('^\\d+$','请输入0-9的数')&quot; placeholder=&quot;请输入内容&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;长度&quot;&gt;
            &lt;jk-input name=&quot;v8&quot; validate=&quot;@Global.isLengthInRange(3,5)&quot; placeholder=&quot;请输入内容&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;长度&quot;&gt;
            &lt;jk-input name=&quot;v9&quot; validate=&quot;@Global.isLengthInRange(0,5)&quot; placeholder=&quot;请输入内容&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;长度&quot;&gt;
            &lt;jk-input name=&quot;v10&quot; validate=&quot;@Global.isLengthInRange(3,5,'请输入3-5个字')&quot; placeholder=&quot;请输入内容&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item&gt;
            &lt;jk-button type=&quot;primary&quot; nativeType=&quot;submit&quot;&gt;提交&lt;/jk-button&gt;
        &lt;/jk-form-item&gt;
    &lt;/jk-form&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;

export default class extends Component {
    async handleFormSubmit(e: VNode.Event) {
        console.log(&quot;验证成功&quot;, e.data);
    }
}
&lt;/script&gt;

</code></pre>
</DemoContainer>
<p>Custom validation rules can be registered through <code>Global method registration</code>. Here is the code of a built-in check method for reference.</p>
<pre><code class="language-ts">registerGlobalFunction({
    isPhone: (message?: string) =&gt; {
        return (value: any) =&gt; {
            if (!value) return;
            if (value.length !== 11) {
                return message || &quot;Please enter an 11-digit mobile phone number&quot;;
            }

            if (/^1[3456789]\d{9}$/.test(value) === false) {
                return message || &quot;The mobile phone number format is incorrect. Please re-enter.&quot;;
            }
        };
    }
});
</code></pre>
<pre><code class="language-html">&lt;input validate=&quot;@Global.isPhone()&quot; /&gt;
</code></pre>
<p>The validation rules are in order:</p>
<ol>
<li><code>control.beforeValidate()</code></li>
<li><code>control.ctrlValidate</code></li>
<li><code>control.props.validate(Custom validation)</code> Supports arrays for multiple combined validations</li>
</ol>
<h3>Custom Validation</h3>
<p>Custom validation rules can be configured by setting the <code>validate</code> parameter of the component. If the validation fails, return the prompt message. If the return value is empty, it means the validation is successful. This method supports asynchronous validation.</p>
<DemoContainer component="@(components.DEMO_JOKER_demo6)">
<pre><code class="language-html">&lt;template&gt;
    &lt;jk-form ref=&quot;form&quot; @submit=&quot;handleFormSubmit&quot;&gt;
        &lt;jk-form-item label=&quot;年龄&quot;&gt;
            &lt;jk-input
                name=&quot;age&quot;
                status-icon
                validate=&quot;@([Global.isRequired(), Global.isInt(), validateAge])&quot;
                placeholder=&quot;请输入年龄&quot;
            /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;新密码&quot;&gt;
            &lt;jk-input name=&quot;pwd&quot; ref=&quot;pwd&quot; validate=&quot;@([Global.isRequired()])&quot; placeholder=&quot;请输入新密码&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;确认密码&quot;&gt;
            &lt;jk-input
                name=&quot;confirmPwd&quot;
                validate=&quot;@([Global.isRequired(), validateConfirmPwd])&quot;
                placeholder=&quot;请输入确认密码&quot;
            /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item&gt;
            &lt;jk-button type=&quot;primary&quot; nativeType=&quot;submit&quot;&gt;提交&lt;/jk-button&gt;
        &lt;/jk-form-item&gt;
    &lt;/jk-form&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { sleep } from &quot;@joker.front/shared&quot;;

export default class extends Component {
    async validateAge(value: string) {
        //模拟请求，实现异步校验
        await sleep(1500);

        //自定义校验是最后执行，无需考虑非空 &amp;&amp; 正整数
        let age = parseInt(value);

        if (age &lt; 22) {
            return &quot;你的年龄太小了，等22岁之后再来吧&quot;;
        }

        if (age &gt; 30) {
            return &quot;你已经够成熟了，不需要再了解了&quot;;
        }
    }
    validateConfirmPwd(value) {
        let pwd = this.$getRef&lt;VNode.Component&gt;(&quot;pwd&quot;)?.component.value;

        if (pwd !== value) {
            return &quot;两次密码不一致&quot;;
        }
    }

    async handleFormSubmit(e: VNode.Event) {
        console.log(&quot;验证成功&quot;, e.data);
    }
}
&lt;/script&gt;


</code></pre>
</DemoContainer>
<blockquote>
<p>The <code>status-icon</code> attribute can be used to display the verification process status in the <code>input</code> component.</p>
</blockquote>
<h3>Size</h3>
<p>The size of the overall form control can be set by configuring the <code>size</code> attribute in <code>form</code>. If the component already has a private <code>size</code> configured, it cannot be overridden.</p>
<DemoContainer component="@(components.DEMO_JOKER_demo7)">
<pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-radio-group value=&quot;@model.ctrlSize&quot; @change=&quot;handleRadioChange&quot;&gt;
            &lt;jk-radio-button label=&quot;&quot;&gt;default&lt;/jk-radio-button&gt;
            &lt;jk-radio-button label=&quot;medium&quot;&gt;medium&lt;/jk-radio-button&gt;
            &lt;jk-radio-button label=&quot;small&quot;&gt;small&lt;/jk-radio-button&gt;
            &lt;jk-radio-button label=&quot;mini&quot;&gt;mini&lt;/jk-radio-button&gt;
        &lt;/jk-radio-group&gt;
    &lt;/DemoRow&gt;
    &lt;jk-form ref=&quot;form&quot; size=&quot;@model.ctrlSize&quot;&gt;
        &lt;jk-form-item label=&quot;活动名称&quot;&gt;
            &lt;jk-input name=&quot;name&quot; placeholder=&quot;请输入活动名称&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动区域&quot;&gt;
            &lt;jk-select name=&quot;area&quot; placeholder=&quot;请选择活动区域&quot;&gt;
                &lt;jk-option label=&quot;山东&quot; value=&quot;shandong&quot; /&gt;
                &lt;jk-option label=&quot;北京&quot; value=&quot;beijing&quot; /&gt;
            &lt;/jk-select&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动时间&quot;&gt;
            &lt;jk-date-picker
                name=&quot;date&quot;
                type=&quot;daterange&quot;
                range-separator=&quot;至&quot;
                startPlaceholder=&quot;开始日期&quot;
                endPlaceholder=&quot;结束日期&quot;&gt;&lt;/jk-date-picker&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;推广&quot;&gt;
            &lt;jk-switch name=&quot;promotion&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;参与人数&quot;&gt;
            &lt;jk-number name=&quot;userCount&quot; placeholder=&quot;请设置人数&quot; validate=&quot;@Global.isRequired()&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动性质&quot;&gt;
            &lt;jk-checkbox-group name=&quot;type&quot;&gt;
                &lt;jk-checkbox-button label=&quot;自驾游&quot;&gt;&lt;/jk-checkbox-button&gt;
                &lt;jk-checkbox-button label=&quot;发布会&quot;&gt;&lt;/jk-checkbox-button&gt;
                &lt;jk-checkbox-button label=&quot;跟团出行&quot;&gt;&lt;/jk-checkbox-button&gt;
            &lt;/jk-checkbox-group&gt;
            &lt;div style=&quot;margin-top:5px&quot;&gt;
                &lt;jk-alert show-icon title=&quot;自驾游会产生相关费用&quot; type=&quot;info&quot;&gt;&lt;/jk-alert&gt;
            &lt;/div&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;资金来源&quot;&gt;
            &lt;jk-radio-group name=&quot;source&quot;&gt;
                &lt;jk-radio-button value=&quot;1&quot;&gt;品牌商赞助&lt;/jk-radio-button&gt;
                &lt;jk-radio-button value=&quot;2&quot;&gt;线下场地免费&lt;/jk-radio-button&gt;
                &lt;jk-radio-button value=&quot;3&quot;&gt;费用均摊&lt;/jk-radio-button&gt;
            &lt;/jk-radio-group&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动要则&quot;&gt;
            &lt;jk-textarea name=&quot;note&quot; placeholder=&quot;请输入内容&quot; rows=&quot;2&quot;&gt;&lt;/jk-textarea&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item&gt;
            &lt;jk-button type=&quot;primary&quot;&gt;提交&lt;/jk-button&gt;
        &lt;/jk-form-item&gt;
    &lt;/jk-form&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        ctrlSize: &quot;&quot;
    };
    handleRadioChange(e: VNode.Event&lt;string&gt;) {
        this.model.ctrlSize = e.data;
    }
}
&lt;/script&gt;
</code></pre>
</DemoContainer>
<h3>Submission</h3>
<p>The form submission can be achieved by calling the <code>submit</code> event in the form. It should be noted that the submission process only includes form validation and form value acquisition. If the validation is successful, the <code>submit</code> event will be used to notify the caller and return the form data together.</p>
<DemoContainer component="@(components.DEMO_JOKER_demo8)">
<pre><code class="language-html">&lt;template&gt;
    &lt;jk-form ref=&quot;form&quot; @submit=&quot;handleFormSubmit&quot;&gt;
        &lt;jk-form-item label=&quot;年龄&quot;&gt;
            &lt;jk-input
                name=&quot;age&quot;
                status-icon
                validate=&quot;@([Global.isRequired(), Global.isInt(), validateAge])&quot;
                placeholder=&quot;请输入年龄&quot;
            /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;新密码&quot;&gt;
            &lt;jk-input name=&quot;pwd&quot; ref=&quot;pwd&quot; validate=&quot;@([Global.isRequired()])&quot; placeholder=&quot;请输入新密码&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;确认密码&quot;&gt;
            &lt;jk-input
                name=&quot;confirmPwd&quot;
                validate=&quot;@([Global.isRequired(), validateConfirmPwd])&quot;
                placeholder=&quot;请输入确认密码&quot;
            /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;区域&quot;&gt;
            &lt;jk-select name=&quot;area&quot; validate=&quot;@([Global.isRequired()])&quot; placeholder=&quot;请选择活动区域&quot;&gt;
                &lt;jk-option label=&quot;山东&quot; value=&quot;shandong&quot; /&gt;
                &lt;jk-option label=&quot;北京&quot; value=&quot;beijing&quot; /&gt;
            &lt;/jk-select&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;推广&quot;&gt;
            &lt;jk-switch name=&quot;promotion&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;资金比例&quot;&gt;
            &lt;jk-slider name=&quot;sourcePic&quot; value=&quot;30&quot;&gt;&lt;/jk-slider&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;时间&quot;&gt;
            &lt;jk-date-picker
                name=&quot;date&quot;
                type=&quot;daterange&quot;
                validate=&quot;@([Global.isRequired()])&quot;
                range-separator=&quot;至&quot;
                startPlaceholder=&quot;开始日期&quot;
                endPlaceholder=&quot;结束日期&quot;&gt;&lt;/jk-date-picker&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item&gt;
            &lt;jk-button type=&quot;primary&quot; nativeType=&quot;submit&quot; loading=&quot;@model.loading&quot;&gt;提交&lt;/jk-button&gt;
            &lt;jk-button nativeType=&quot;reset&quot;&gt;重置&lt;/jk-button&gt;
        &lt;/jk-form-item&gt;
    &lt;/jk-form&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { sleep } from &quot;@joker.front/shared&quot;;
import { Message } from &quot;../../../src&quot;;

export default class extends Component {
    model = {
        loading: false
    };
    async validateAge(value: string) {
        //模拟请求，实现异步校验
        await sleep(1500);

        //自定义校验是最后执行，无需考虑非空 &amp;&amp; 正整数
        let age = parseInt(value);

        if (age &lt; 22) {
            return &quot;你的年龄太小了，等22岁之后再来吧&quot;;
        }

        if (age &gt; 30) {
            return &quot;你已经够成熟了，不需要再了解了&quot;;
        }
    }
    validateConfirmPwd(value) {
        let pwd = this.$getRef&lt;VNode.Component&gt;(&quot;pwd&quot;)?.component.value;

        if (pwd !== value) {
            return &quot;两次密码不一致&quot;;
        }
    }

    //触发提交
    handleSubmitBtnClick(e: VNode.Event) {
        //若传入e，则form会根据触发事件来控制该按钮的loading状态
        this.$getRef&lt;VNode.Component&gt;(&quot;form&quot;)?.component.submit(e);
    }

    //表单提交处理函数
    async handleFormSubmit(e: VNode.Event) {
        this.model.loading = true;
        //验证成功后，才会触发该方法
        //支持异步处理

        //模拟接口请求
        await sleep(1000);

        console.log(e.data);

        Message({
            type: &quot;success&quot;,
            message: &quot;提交成功&quot;
        });

        this.model.loading = false;
    }
}
&lt;/script&gt;


</code></pre>
</DemoContainer>
<blockquote>
<p>During the internal processing of the submit event, the form will set the initiating button (which needs to be a jk-button) to loading during the asynchronous validation process. After the asynchronous validation is successful, the loading is removed and transferred to the submit event for self-handling. Therefore, the caller needs to control the loading during the <code>submission</code> process by themselves, and there is no need to care about the loading during the validation.</p>
</blockquote>
<h3>Expansion of Form Controls</h3>
<p>If you want to add form controls that can be recognized by the <code>Form</code> form, the following conditions need to be met:</p>
<ol>
<li>When creating, the <code>registerFormCtrl(this)</code> method needs to be called to register the form control.</li>
<li>The <code>value</code> attribute needs to be configured in the model.</li>
<li><code>props.name</code> needs to be passed in (depending on the usage scenario).</li>
<li>The current control is rendered in the jk-form component (depending on the usage scenario).</li>
</ol>
<p>The following are functional expansions (not mandatory constraints):</p>
<ol>
<li>Trigger the <code>this.$trigger(&quot;validate&quot;)</code> form validation event at an appropriate time, usually when the content value changes (not mandatory).</li>
<li>If the <code>ctrlValidate</code> method exists in the component, it will execute its own built-in validation when the form performs this item of validation.</li>
<li>If the <code>beforeValidate</code> method exists in the component, some pre-data preparation work will be executed before the form performs this item of validation.</li>
</ol>
<h3>Form Attributes</h3>
<table class="mkd-table">
<thead>
<tr>
<th>Parameter</th>
<th>Description</th>
<th>Type</th>
<th>Optional Values</th>
<th>Default Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>class</td>
<td>Custom class style</td>
<td>string</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>inline</td>
<td>Inline form mode</td>
<td>boolean</td>
<td>—</td>
<td>false</td>
</tr>
<tr>
<td>label-position</td>
<td>The position of the form label. If the value is left or right, <code>label-width</code> needs to be set.</td>
<td>string</td>
<td>right/left/top</td>
<td>right</td>
</tr>
<tr>
<td>label-width</td>
<td>The width of the form label, for example, '50px'. Form-items that are direct children of Form will inherit this value.</td>
<td>string</td>
<td>—</td>
<td>80px</td>
</tr>
<tr>
<td>size</td>
<td>Used to control the size of components within this form</td>
<td>string</td>
<td>medium / small / mini</td>
<td>—</td>
</tr>
<tr>
<td>showErrorMessage</td>
<td>Custom error message display</td>
<td>Function</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>clearErrorMessage</td>
<td>Custom clear error message</td>
<td>Function</td>
<td>-</td>
<td>-</td>
</tr>
</tbody>
</table>
<h3>Form Methods</h3>
<table class="mkd-table">
<thead>
<tr>
<th>Method Name</th>
<th>Description</th>
<th>Parameter</th>
</tr>
</thead>
<tbody>
<tr>
<td>validate</td>
<td>A method to validate the entire form. The parameter is a callback function. The callback function will be called after the validation is completed and returns a promise.</td>
<td>Function(string /string[]). If no parameter is passed, the entire form control will be validated. You can pass in name (string / string[]) to validate the value of the specified control.</td>
</tr>
<tr>
<td>reset</td>
<td>Reset the entire form, reset all field values to their initial values and remove the validation results.</td>
<td>—</td>
</tr>
<tr>
<td>getData</td>
<td>Get the current form data. Note that <strong>the data obtained has not passed form validation</strong>.</td>
<td>Function(string / string[]). If no parameter is passed, the values of the entire form control will be obtained. You can pass in name (string / string[]) to get the values of the specified control.</td>
</tr>
<tr>
<td>submit</td>
<td>Trigger the form submission operation.</td>
<td>-</td>
</tr>
</tbody>
</table>
<h3>Form Events</h3>
<table class="mkd-table">
<thead>
<tr>
<th>Event Name</th>
<th>Description</th>
<th>Parameter</th>
</tr>
</thead>
<tbody>
<tr>
<td>before-submit</td>
<td>Triggered before form submission</td>
<td>-</td>
</tr>
<tr>
<td>submit</td>
<td>Trigger the form submission operation</td>
<td>Form data</td>
</tr>
</tbody>
</table>
<h3>Form-Item Attributes</h3>
<table class="mkd-table">
<thead>
<tr>
<th>Parameter</th>
<th>Description</th>
<th>Type</th>
<th>Optional Values</th>
<th>Default Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>class</td>
<td>Custom class style</td>
<td>string</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>label</td>
<td>Label text</td>
<td>string</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>label-width</td>
<td>The width of the form field label, for example, '50px'.</td>
<td>string</td>
<td>—</td>
<td>80px</td>
</tr>
<tr>
<td>required</td>
<td>Whether it is required (used to control whether to display an <strong>asterisk</strong> and does not participate in the formulation of validation rules)</td>
<td>boolean</td>
<td>—</td>
<td>false</td>
</tr>
<tr>
<td>inline</td>
<td>Whether to use an inline layout</td>
<td>boolean</td>
<td>—</td>
<td>false</td>
</tr>
</tbody>
</table>
<h3>Form-Item Sections</h3>
<table class="mkd-table">
<thead>
<tr>
<th>name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>—</td>
<td>The content of Form Item</td>
</tr>
<tr>
<td>label</td>
<td>The content of the label text</td>
</tr>
<tr>
<td>error</td>
<td>The content of validation failure</td>
</tr>
</tbody>
</table>

<BottomNav />
</div>
</template>
<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo8 from '../../components/form/demo8.joker';
import DEMO_JOKER_demo7 from '../../components/form/demo7.joker';
import DEMO_JOKER_demo6 from '../../components/form/demo6.joker';
import DEMO_JOKER_demo5 from '../../components/form/demo5.joker';
import DEMO_JOKER_demo4 from '../../components/form/demo4.joker';
import DEMO_JOKER_demo3 from '../../components/form/demo3.joker';
import DEMO_JOKER_demo2 from '../../components/form/demo2.joker';
import DEMO_JOKER_demo1 from '../../components/form/demo1.joker';
export default class extends Component {
components={
BottomNav,
DEMO_JOKER_demo8,
DEMO_JOKER_demo7,
DEMO_JOKER_demo6,
DEMO_JOKER_demo5,
DEMO_JOKER_demo4,
DEMO_JOKER_demo3,
DEMO_JOKER_demo2,
DEMO_JOKER_demo1
}
mounted(){
let container= this.$getRef('container')?.output!;
container.querySelectorAll('pre code').forEach((el:HTMLElement) => {
        hljs.highlightElement(el);
      });
}
}
</script>