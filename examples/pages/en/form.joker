<template>
    <div ref="container" class="joker-demo-container">
        <h2>Form</h2>
        <p>A component for collecting, validating, and submitting form data through interactive elements.</p>
        <h3>Basic Form</h3>
        <p>Includes various form items such as input fields, selectors, switches, radio buttons, checkboxes, etc.</p>
        <DemoContainer component="@(components.DEMO_JOKER_demo1)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-form ref=&quot;form&quot; label-width=&quot;120px&quot; @submit=&quot;handleFormSubmit&quot;&gt;
        &lt;jk-form-item label=&quot;Event Name&quot; tip=&quot;Test data, please understand&quot;&gt;
            &lt;jk-input name=&quot;name&quot; placeholder=&quot;Please enter the event name&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item
            label=&quot;Event Area&quot;
            tip=&quot;Test data, please understand. Super long text test. Test data, please understand. Super long text test. Test data, please understand. Super long text test. Test data, please understand. Super long text test. Test data, please understand. Super long text test&quot;&gt;
            &lt;jk-select name=&quot;area&quot; placeholder=&quot;Please select the event area&quot;&gt;
                &lt;jk-option label=&quot;Shandong&quot; value=&quot;shandong&quot; /&gt;
                &lt;jk-option label=&quot;Beijing&quot; value=&quot;beijing&quot; /&gt;
            &lt;/jk-select&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Event Time&quot;&gt;
            &lt;jk-date-picker
                name=&quot;date&quot;
                type=&quot;daterange&quot;
                range-separator=&quot;to&quot;
                startPlaceholder=&quot;Start date&quot;
                endPlaceholder=&quot;End date&quot;&gt;&lt;/jk-date-picker&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Promotion&quot;&gt;
            &lt;jk-switch name=&quot;promotion&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Event Nature&quot;&gt;
            &lt;jk-checkbox-group name=&quot;type&quot;&gt;
                &lt;jk-checkbox value=&quot;1&quot; label=&quot;Food/Restaurant online event&quot;&gt;&lt;/jk-checkbox&gt;
                &lt;jk-checkbox value=&quot;2&quot; label=&quot;Offline event&quot;&gt;&lt;/jk-checkbox&gt;
                &lt;jk-checkbox value=&quot;3&quot; label=&quot;Self-driving tour&quot;&gt;&lt;/jk-checkbox&gt;
                &lt;jk-checkbox value=&quot;4&quot; label=&quot;Press conference&quot;&gt;&lt;/jk-checkbox&gt;
                &lt;jk-checkbox value=&quot;5&quot; label=&quot;Group tour&quot;&gt;&lt;/jk-checkbox&gt;
            &lt;/jk-checkbox-group&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Funding Source&quot;&gt;
            &lt;jk-radio-group name=&quot;source&quot;&gt;
                &lt;jk-radio value=&quot;1&quot;&gt;Sponsored by brand owners&lt;/jk-radio&gt;
                &lt;jk-radio value=&quot;2&quot;&gt;Free offline venue&lt;/jk-radio&gt;
                &lt;jk-radio value=&quot;3&quot;&gt;Cost sharing&lt;/jk-radio&gt;
            &lt;/jk-radio-group&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Funding Ratio&quot;&gt;
            &lt;jk-slider name=&quot;sourcePic&quot; value=&quot;30&quot;&gt;&lt;/jk-slider&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Event Rules&quot;&gt;
            &lt;jk-textarea name=&quot;note&quot; placeholder=&quot;Please enter the content&quot; rows=&quot;2&quot;&gt;&lt;/jk-textarea&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item&gt;
            &lt;jk-button type=&quot;primary&quot; nativeType=&quot;submit&quot;&gt;Submit&lt;/jk-button&gt;
        &lt;/jk-form-item&gt;
    &lt;/jk-form&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;

export default class extends Component {
    handleFormSubmit(e: VNode.Event&lt;any&gt;) {
        let form = (e.target as VNode.Component)?.component;
        console.log(e.data);
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Inline Form</h3>
        <p>
            Setting the
            <code>inline</code>
            property allows the form to display as an inline form, which is suitable when vertical space is limited and the form is relatively simple.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo2)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-form inline label-width=&quot;100px&quot;&gt;
        &lt;jk-form-item label=&quot;Event Name&quot;&gt;
            &lt;jk-input name=&quot;name&quot; placeholder=&quot;Please enter the event name&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Event Area&quot;&gt;
            &lt;jk-select name=&quot;area&quot; placeholder=&quot;Please select the event area&quot;&gt;
                &lt;jk-option label=&quot;Shandong&quot; value=&quot;shandong&quot; /&gt;
                &lt;jk-option label=&quot;Beijing&quot; value=&quot;beijing&quot; /&gt;
            &lt;/jk-select&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Event Time&quot;&gt;
            &lt;jk-date-picker
                name=&quot;date&quot;
                type=&quot;daterange&quot;
                range-separator=&quot;to&quot;
                startPlaceholder=&quot;Start date&quot;
                endPlaceholder=&quot;End date&quot;&gt;&lt;/jk-date-picker&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item&gt;
            &lt;jk-button type=&quot;primary&quot;&gt;Query&lt;/jk-button&gt;
        &lt;/jk-form-item&gt;
    &lt;/jk-form&gt;
&lt;/template&gt;
</code></pre>
        </DemoContainer>
        <h3>Label Alignment</h3>
        <p>
            The
            <code>label-position</code>
            property can be used to set label alignment. Currently supported values are
            <code>top</code>
            and
            <code>left</code>
            , where
            <code>top</code>
            will place labels above form items.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo3)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-radio-group value=&quot;@model.labelPosition&quot; @change=&quot;handleRadioChange&quot;&gt;
            &lt;jk-radio-button value=&quot;left&quot;&gt;Left alignment&lt;/jk-radio-button&gt;
            &lt;jk-radio-button value=&quot;right&quot;&gt;Right alignment&lt;/jk-radio-button&gt;
            &lt;jk-radio-button value=&quot;top&quot;&gt;Top alignment&lt;/jk-radio-button&gt;
        &lt;/jk-radio-group&gt;
    &lt;/DemoRow&gt;
    &lt;jk-form label-position=&quot;@model.labelPosition&quot;&gt;
        &lt;jk-form-item label=&quot;Name&quot; required&gt;
            &lt;jk-input name=&quot;name&quot; placeholder=&quot;Please enter the event name&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Area&quot;&gt;
            &lt;jk-select name=&quot;area&quot; placeholder=&quot;Please select the event area&quot;&gt;
                &lt;jk-option label=&quot;Shandong&quot; value=&quot;shandong&quot; /&gt;
                &lt;jk-option label=&quot;Beijing&quot; value=&quot;beijing&quot; /&gt;
            &lt;/jk-select&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Time&quot;&gt;
            &lt;jk-date-picker
                name=&quot;date&quot;
                type=&quot;daterange&quot;
                range-separator=&quot;to&quot;
                startPlaceholder=&quot;Start date&quot;
                endPlaceholder=&quot;End date&quot;&gt;&lt;/jk-date-picker&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item&gt;
            &lt;jk-button type=&quot;primary&quot;&gt;Query&lt;/jk-button&gt;
        &lt;/jk-form-item&gt;
    &lt;/jk-form&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        labelPosition: &quot;right&quot;
    };

    handleRadioChange(e: VNode.Event&lt;string&gt;) {
        this.model.labelPosition = e.data;
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Form Validation</h3>
        <p>
            The Form component provides validation functionality with built-in validation methods. Configure validation rules using the
            <code>validate</code>
            property.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo4)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-form ref=&quot;form&quot; @submit=&quot;handleFormSubmit&quot; label-width=&quot;130px&quot;&gt;
        &lt;jk-form-item label=&quot;Event Name&quot; required&gt;
            &lt;jk-input name=&quot;name&quot; validate=&quot;@Global.isRequired()&quot; placeholder=&quot;Please enter the event name&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Event Area&quot; required&gt;
            &lt;jk-select name=&quot;area&quot; validate=&quot;@Global.isRequired()&quot; placeholder=&quot;Please select the event area&quot;&gt;
                &lt;jk-option label=&quot;Shandong&quot; value=&quot;shandong&quot; /&gt;
                &lt;jk-option label=&quot;Beijing&quot; value=&quot;beijing&quot; /&gt;
            &lt;/jk-select&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Event Time&quot; required&gt;
            &lt;jk-date-picker
                name=&quot;date&quot;
                validate=&quot;@Global.isRequired('Please select the event time')&quot;
                type=&quot;daterange&quot;
                range-separator=&quot;to&quot;
                startPlaceholder=&quot;Start date&quot;
                endPlaceholder=&quot;End date&quot;&gt;&lt;/jk-date-picker&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Review Time&quot; required&gt;
            &lt;jk-date-picker
                name=&quot;examineDate&quot;
                validate=&quot;@Global.isRequired()&quot;
                placeholder=&quot;Please select the review time&quot;&gt;&lt;/jk-date-picker&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Organizer&quot; required&gt;
            &lt;jk-col span=&quot;8&quot;&gt;
                &lt;jk-form-item labelWidth=&quot;0&quot;&gt;
                    &lt;jk-select
                        name=&quot;organization&quot;
                        validate=&quot;@Global.isRequired()&quot;
                        placeholder=&quot;Please select the organization&quot;&gt;
                        &lt;jk-option label=&quot;Northern Region&quot; value=&quot;01&quot;&gt;&lt;/jk-option&gt;
                        &lt;jk-option label=&quot;Southern Region&quot; value=&quot;02&quot;&gt;&lt;/jk-option&gt;
                    &lt;/jk-select&gt;
                &lt;/jk-form-item&gt;
            &lt;/jk-col&gt;
            &lt;jk-col span=&quot;1&quot;&gt;-&lt;/jk-col&gt;
            &lt;jk-col span=&quot;15&quot;&gt;
                &lt;jk-form-item labelWidth=&quot;0&quot;&gt;
                    &lt;jk-select name=&quot;userName&quot; validate=&quot;@Global.isRequired()&quot; placeholder=&quot;Please select the user&quot;&gt;
                        &lt;jk-option label=&quot;Zhang San&quot; value=&quot;01&quot;&gt;&lt;/jk-option&gt;
                        &lt;jk-option label=&quot;Li Si&quot; value=&quot;02&quot;&gt;&lt;/jk-option&gt;
                    &lt;/jk-select&gt;
                &lt;/jk-form-item&gt;
            &lt;/jk-col&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Promotion&quot;&gt;
            &lt;jk-switch name=&quot;promotion&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Participants Count&quot;&gt;
            &lt;jk-number
                name=&quot;userCount&quot;
                size=&quot;small&quot;
                placeholder=&quot;Please set the number of people&quot;
                validate=&quot;@Global.isRequired()&quot;
            /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Event Nature&quot; required&gt;
            &lt;jk-checkbox-group name=&quot;type&quot; validate=&quot;@Global.isRequired('Please select the event nature')&quot;&gt;
                &lt;jk-checkbox value=&quot;1&quot; label=&quot;Food/Restaurant online event&quot;&gt;&lt;/jk-checkbox&gt;
                &lt;jk-checkbox value=&quot;2&quot; label=&quot;Offline event&quot;&gt;&lt;/jk-checkbox&gt;
                &lt;jk-checkbox value=&quot;3&quot; label=&quot;Self-driving tour&quot;&gt;&lt;/jk-checkbox&gt;
                &lt;jk-checkbox value=&quot;4&quot; label=&quot;Press conference&quot;&gt;&lt;/jk-checkbox&gt;
                &lt;jk-checkbox value=&quot;5&quot; label=&quot;Group tour&quot;&gt;&lt;/jk-checkbox&gt;
            &lt;/jk-checkbox-group&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Funding Source&quot; required&gt;
            &lt;jk-radio-group name=&quot;source&quot; validate=&quot;@Global.isRequired('Please select the funding source')&quot;&gt;
                &lt;jk-radio value=&quot;1&quot;&gt;Sponsored by brand owners&lt;/jk-radio&gt;
                &lt;jk-radio value=&quot;2&quot;&gt;Free offline venue&lt;/jk-radio&gt;
                &lt;jk-radio value=&quot;3&quot;&gt;Cost sharing&lt;/jk-radio&gt;
            &lt;/jk-radio-group&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Event Rules&quot; required&gt;
            &lt;jk-textarea
                name=&quot;note&quot;
                validate=&quot;@Global.isRequired()&quot;
                placeholder=&quot;Please enter the event rules&quot;
                rows=&quot;2&quot;&gt;&lt;/jk-textarea&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item&gt;
            &lt;jk-button type=&quot;primary&quot; nativeType=&quot;submit&quot;&gt;Submit&lt;/jk-button&gt;
        &lt;/jk-form-item&gt;
    &lt;/jk-form&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;

export default class extends Component {
    async handleFormSubmit(e: VNode.Event) {
        console.log(&quot;Verification succeeded&quot;, e.data);
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <blockquote>
            <p>
                Setting
                <code>required</code>
                in
                <code>form-item</code>
                only controls whether to display the
                <strong>asterisk</strong>
                indicator and does not perform any validation.
            </p>
        </blockquote>
        <h3>Built-in Validation Rules</h3>
        <p>
            Common validation rules are provided internally and can be configured using
            <code>validate</code>
            .
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Rule</th>
                    <th>Description</th>
                    <th>Parameter Details</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <code>Global.isRequired(msg)</code>
                    </td>
                    <td>Non-empty validation</td>
                    <td>
                        Configure error messages via this property. If not set, the
                        <code>placeholder</code>
                        text is used for error prompts.
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>Global.isInt(msg)</code>
                    </td>
                    <td>Positive integer validation</td>
                    <td>Error message</td>
                </tr>
                <tr>
                    <td>
                        <code>Global.isNumber(msg)</code>
                    </td>
                    <td>Numeric validation</td>
                    <td>Error message</td>
                </tr>
                <tr>
                    <td>
                        <code>Global.isPhone(msg)</code>
                    </td>
                    <td>Phone number format validation</td>
                    <td>Error message</td>
                </tr>
                <tr>
                    <td>
                        <code>Global.isEmail(msg)</code>
                    </td>
                    <td>Email format validation</td>
                    <td>Error message</td>
                </tr>
                <tr>
                    <td>
                        <code>Global.isMatched(regex,msg)</code>
                    </td>
                    <td>Custom regex validation</td>
                    <td>
                        {pattern:string,msg:string}-
                        <code>pattern</code>
                        is mandatory for regex rules,
                        <code>msg</code>
                        for error text.
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>Global.isLengthInRange(min,max,msg)</code>
                    </td>
                    <td>Length validation</td>
                    <td>
                        <code>(min, max, errorMsg)</code>
                        - Array format for min/max length constraints.
                    </td>
                </tr>
            </tbody>
        </table>
        <DemoContainer component="@(components.DEMO_JOKER_demo5)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-form ref=&quot;form&quot; labelWidth=&quot;160px&quot; @submit=&quot;handleFormSubmit&quot;&gt;
        &lt;jk-form-item label=&quot;Required&quot; required&gt;
            &lt;jk-input name=&quot;v1&quot; validate=&quot;@Global.isRequired()&quot; placeholder=&quot;Please enter the content&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Required&quot; required&gt;
            &lt;jk-select name=&quot;v2&quot; validate=&quot;@Global.isRequired()&quot; placeholder=&quot;Please select the event area&quot;&gt;
                &lt;jk-option label=&quot;Shandong&quot; value=&quot;shandong&quot; /&gt;
                &lt;jk-option label=&quot;Beijing&quot; value=&quot;beijing&quot; /&gt;
            &lt;/jk-select&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Positive Integer&quot;&gt;
            &lt;jk-input name=&quot;v3&quot; validate=&quot;@Global.isInt()&quot; placeholder=&quot;Please enter the content&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Numeric&quot;&gt;
            &lt;jk-input name=&quot;v4&quot; validate=&quot;@Global.isNumber()&quot; placeholder=&quot;Please enter the content&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Phone Number&quot;&gt;
            &lt;jk-input name=&quot;v5&quot; validate=&quot;@Global.isPhone()&quot; placeholder=&quot;Please enter the content&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Email&quot;&gt;
            &lt;jk-input name=&quot;v6&quot; validate=&quot;@Global.isEmail()&quot; placeholder=&quot;Please enter the content&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Regular Expression&quot;&gt;
            &lt;jk-input
                name=&quot;v7&quot;
                validate=&quot;@Global.isMatched('^\\d+$','Please enter a number from 0 - 9')&quot;
                placeholder=&quot;Please enter the content&quot;
            /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Length&quot;&gt;
            &lt;jk-input name=&quot;v8&quot; validate=&quot;@Global.isLengthInRange(3,5)&quot; placeholder=&quot;Please enter the content&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Length&quot;&gt;
            &lt;jk-input name=&quot;v9&quot; validate=&quot;@Global.isLengthInRange(0,5)&quot; placeholder=&quot;Please enter the content&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Length&quot;&gt;
            &lt;jk-input
                name=&quot;v10&quot;
                validate=&quot;@Global.isLengthInRange(3,5,'Please enter 3 - 5 characters')&quot;
                placeholder=&quot;Please enter the content&quot;
            /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item&gt;
            &lt;jk-button type=&quot;primary&quot; nativeType=&quot;submit&quot;&gt;Submit&lt;/jk-button&gt;
        &lt;/jk-form-item&gt;
    &lt;/jk-form&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;

export default class extends Component {
    async handleFormSubmit(e: VNode.Event) {
        console.log(&quot;Verification succeeded&quot;, e.data);
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <p>
            Custom validation rules can be registered via
            <code>global method registration</code>
            . Below is an example of a built-in validation method for reference:
        </p>
        <pre><code class="language-ts">registerGlobalFunction({
    isPhone: (message?: string) =&gt; {
        return (value: any) =&gt; {
            if (!value) return;
            if (value.length !== 11) {
                return message || &quot;Please enter an 11-digit phone number&quot;;
            }

            if (/^1[3456789]\d{9}$/.test(value) === false) {
                return message || &quot;Invalid phone number format, please re-enter&quot;;
            }
        };
    }
});
</code></pre>
        <pre><code class="language-html">&lt;input validate=&quot;@Global.isPhone()&quot; /&gt;
</code></pre>
        <p>Validation executes in the following order:</p>
        <ol>
            <li>
                <code>Control.beforeValidate()</code>
            </li>
            <li>
                <code>Control.ctrlValidate</code>
            </li>
            <li>
                <code>Control.props.validate</code>
                (custom validation, supports array-based multi-rule validation)
            </li>
        </ol>
        <h3>Custom Validation</h3>
        <p>
            Custom validation rules can be configured via the component's
            <code>validate</code>
            parameter. Return an error message on failure, or an empty value on success. Supports asynchronous validation.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo6)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-form ref=&quot;form&quot; @submit=&quot;handleFormSubmit&quot; label-width=&quot;140px&quot;&gt;
        &lt;jk-form-item label=&quot;Age&quot;&gt;
            &lt;jk-input
                name=&quot;age&quot;
                status-icon
                validate=&quot;@([Global.isRequired(), Global.isInt(), validateAge])&quot;
                placeholder=&quot;Please enter your age&quot;
            /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;New Password&quot;&gt;
            &lt;jk-input
                name=&quot;pwd&quot;
                ref=&quot;pwd&quot;
                validate=&quot;@([Global.isRequired()])&quot;
                placeholder=&quot;Please enter your new password&quot;
            /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Confirm Password&quot;&gt;
            &lt;jk-input
                name=&quot;confirmPwd&quot;
                validate=&quot;@([Global.isRequired(), validateConfirmPwd])&quot;
                placeholder=&quot;Please confirm your password&quot;
            /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item&gt;
            &lt;jk-button type=&quot;primary&quot; nativeType=&quot;submit&quot;&gt;Submit&lt;/jk-button&gt;
        &lt;/jk-form-item&gt;
    &lt;/jk-form&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { sleep } from &quot;@joker.front/shared&quot;;

export default class extends Component {
    async validateAge(value: string) {
        // Simulate a request to implement asynchronous validation
        await sleep(1500);

        // Custom validation is performed last, no need to consider non - empty &amp;&amp; positive integer
        let age = parseInt(value);

        if (age &lt; 22) {
            return &quot;You are too young. Come back after you are 22.&quot;;
        }

        if (age &gt; 30) {
            return &quot;You are mature enough and don't need to know more.&quot;;
        }
    }
    validateConfirmPwd(value) {
        let pwd = this.$getRef(&quot;pwd&quot;)?.component.value;

        if (pwd !== value) {
            return &quot;The two passwords do not match.&quot;;
        }
    }

    async handleFormSubmit(e: VNode.Event) {
        console.log(&quot;Verification succeeded&quot;, e.data);
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <blockquote>
            <p>
                The
                <code>status-icon</code>
                property can be used in
                <code>input</code>
                components to display validation status indicators.
            </p>
        </blockquote>
        <h3>Sizing</h3>
        <p>
            Set the size of all form controls using the
            <code>size</code>
            property in
            <code>form</code>
            . Note that if a component has its own
            <code>size</code>
            configured, the form-level setting will be overridden.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo7)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-radio-group value=&quot;@model.ctrlSize&quot; @change=&quot;handleRadioChange&quot;&gt;
            &lt;jk-radio-button value=&quot;&quot;&gt;default&lt;/jk-radio-button&gt;
            &lt;jk-radio-button value=&quot;medium&quot;&gt;medium&lt;/jk-radio-button&gt;
            &lt;jk-radio-button value=&quot;small&quot;&gt;small&lt;/jk-radio-button&gt;
            &lt;jk-radio-button value=&quot;mini&quot;&gt;mini&lt;/jk-radio-button&gt;
        &lt;/jk-radio-group&gt;
    &lt;/DemoRow&gt;
    &lt;jk-form ref=&quot;form&quot; size=&quot;@model.ctrlSize&quot; label-width=&quot;150px&quot;&gt;
        &lt;jk-form-item label=&quot;Event Name&quot;&gt;
            &lt;jk-input name=&quot;name&quot; placeholder=&quot;Please enter the event name&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Event Area&quot;&gt;
            &lt;jk-select name=&quot;area&quot; placeholder=&quot;Please select the event area&quot;&gt;
                &lt;jk-option label=&quot;Shandong&quot; value=&quot;shandong&quot; /&gt;
                &lt;jk-option label=&quot;Beijing&quot; value=&quot;beijing&quot; /&gt;
            &lt;/jk-select&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Event Time&quot;&gt;
            &lt;jk-date-picker
                name=&quot;date&quot;
                type=&quot;daterange&quot;
                range-separator=&quot;to&quot;
                startPlaceholder=&quot;Start date&quot;
                endPlaceholder=&quot;End date&quot;&gt;&lt;/jk-date-picker&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Promotion&quot;&gt;
            &lt;jk-switch name=&quot;promotion&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Participants Count&quot;&gt;
            &lt;jk-number
                name=&quot;userCount&quot;
                placeholder=&quot;Please set the number of participants&quot;
                validate=&quot;@Global.isRequired()&quot;
            /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Event Nature&quot;&gt;
            &lt;jk-checkbox-group name=&quot;type&quot;&gt;
                &lt;jk-checkbox-button value=&quot;1&quot; label=&quot;Self-driving tour&quot;&gt;&lt;/jk-checkbox-button&gt;
                &lt;jk-checkbox-button value=&quot;2&quot; label=&quot;Press conference&quot;&gt;&lt;/jk-checkbox-button&gt;
                &lt;jk-checkbox-button value=&quot;3&quot; label=&quot;Group tour&quot;&gt;&lt;/jk-checkbox-button&gt;
            &lt;/jk-checkbox-group&gt;
            &lt;div style=&quot;margin-top:5px&quot;&gt;
                &lt;jk-alert show-icon title=&quot;Self-driving tours incur related costs&quot; type=&quot;info&quot;&gt;&lt;/jk-alert&gt;
            &lt;/div&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Funding Source&quot;&gt;
            &lt;jk-radio-group name=&quot;source&quot;&gt;
                &lt;jk-radio-button value=&quot;1&quot;&gt;Sponsored by brand owners&lt;/jk-radio-button&gt;
                &lt;jk-radio-button value=&quot;2&quot;&gt;Free offline venue&lt;/jk-radio-button&gt;
                &lt;jk-radio-button value=&quot;3&quot;&gt;Cost sharing&lt;/jk-radio-button&gt;
            &lt;/jk-radio-group&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Event Rules&quot;&gt;
            &lt;jk-textarea name=&quot;note&quot; placeholder=&quot;Please enter the content&quot; rows=&quot;2&quot;&gt;&lt;/jk-textarea&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item&gt;
            &lt;jk-button type=&quot;primary&quot;&gt;Submit&lt;/jk-button&gt;
        &lt;/jk-form-item&gt;
    &lt;/jk-form&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        ctrlSize: &quot;&quot;
    };
    handleRadioChange(e: VNode.Event&lt;string&gt;) {
        this.model.ctrlSize = e.data;
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Submission</h3>
        <p>
            Trigger form submission via the form's
            <code>submit</code>
            event. This process only handles validation and data collection. If validation succeeds, the event notifies the caller with the form data.
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo8)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-form ref=&quot;form&quot; @submit=&quot;handleFormSubmit&quot; label-width=&quot;130px&quot;&gt;
        &lt;jk-form-item label=&quot;Age&quot;&gt;
            &lt;jk-input
                name=&quot;age&quot;
                status-icon
                clearable
                validate=&quot;@([Global.isRequired(), Global.isInt(), validateAge])&quot;
                placeholder=&quot;Please enter your age&quot;
            /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;New Password&quot;&gt;
            &lt;jk-input
                name=&quot;pwd&quot;
                ref=&quot;pwd&quot;
                validate=&quot;@([Global.isRequired()])&quot;
                placeholder=&quot;Please enter your new password&quot;
            /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Confirm Password&quot;&gt;
            &lt;jk-input
                name=&quot;confirmPwd&quot;
                validate=&quot;@([Global.isRequired(), validateConfirmPwd])&quot;
                placeholder=&quot;Please confirm your password&quot;
            /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Area&quot;&gt;
            &lt;jk-select name=&quot;area&quot; validate=&quot;@([Global.isRequired()])&quot; placeholder=&quot;Please select the event area&quot;&gt;
                &lt;jk-option label=&quot;Shandong&quot; value=&quot;shandong&quot; /&gt;
                &lt;jk-option label=&quot;Beijing&quot; value=&quot;beijing&quot; /&gt;
            &lt;/jk-select&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Promotion&quot;&gt;
            &lt;jk-switch name=&quot;promotion&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Funding Ratio&quot;&gt;
            &lt;jk-slider name=&quot;sourcePic&quot; value=&quot;30&quot;&gt;&lt;/jk-slider&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;Time&quot;&gt;
            &lt;jk-date-picker
                name=&quot;date&quot;
                type=&quot;daterange&quot;
                validate=&quot;@([Global.isRequired()])&quot;
                range-separator=&quot;to&quot;
                startPlaceholder=&quot;Start date&quot;
                endPlaceholder=&quot;End date&quot;&gt;&lt;/jk-date-picker&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item&gt;
            &lt;jk-button type=&quot;primary&quot; nativeType=&quot;submit&quot; loading=&quot;@model.loading&quot;&gt;Submit&lt;/jk-button&gt;
            &lt;jk-button nativeType=&quot;reset&quot;&gt;Reset&lt;/jk-button&gt;
        &lt;/jk-form-item&gt;
    &lt;/jk-form&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { sleep } from &quot;@joker.front/shared&quot;;
import { Message } from &quot;../../../src&quot;;

export default class extends Component {
    model = {
        loading: false
    };
    async validateAge(value: string) {
        // Simulate a request to implement asynchronous validation
        await sleep(1500);

        // Custom validation is performed last, no need to consider non - empty &amp;&amp; positive integer
        let age = parseInt(value);

        if (age &lt; 22) {
            return &quot;You are too young. Come back after you are 22.&quot;;
        }

        if (age &gt; 30) {
            return &quot;You are mature enough and don't need to know more.&quot;;
        }
    }
    validateConfirmPwd(value) {
        let pwd = this.$getRef(&quot;pwd&quot;)?.component.value;

        if (pwd !== value) {
            return &quot;The two passwords do not match.&quot;;
        }
    }

    // Trigger the submission
    handleSubmitBtnClick(e: VNode.Event) {
        // If e is passed in, the form will control the loading state of the button according to the triggering event
        this.$getRef(&quot;form&quot;)?.component.submit(e);
    }

    // Form submission processing function
    async handleFormSubmit(e: VNode.Event) {
        this.model.loading = true;
        // This method will only be triggered after successful validation
        // Supports asynchronous processing

        // Simulate an interface request
        await sleep(1000);

        console.log(e.data);

        Message({
            type: &quot;success&quot;,
            message: &quot;Submission succeeded&quot;
        });

        this.model.loading = false;
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <blockquote>
            <p>During submission:</p>
            <ul>
                <li>
                    The form automatically sets the submit button (must be
                    <code>jk-button</code>
                    ) to
                    <code>loading</code>
                    during async validation.
                </li>
                <li>
                    Callers must manually handle
                    <code>loading</code>
                    during the submission phase (validation-phase loading is handled automatically).
                </li>
            </ul>
        </blockquote>
        <h3>Extending Form Controls</h3>
        <p>
            For custom form controls to work with
            <code>Form</code>
            , they must:
        </p>
        <ol>
            <li>
                Register via
                <code>registerFormCtrl(this)</code>
                during creation.
            </li>
            <li>
                Include a
                <code>model.value</code>
                property.
            </li>
            <li>
                Pass
                <code>props.name</code>
                (context-dependent).
            </li>
            <li>
                Render within a
                <code>jk-form</code>
                component (context-dependent).
            </li>
        </ol>
        <p>
            <strong>Optional Functional Extensions:</strong>
        </p>
        <ol>
            <li>
                Trigger
                <code>this.$trigger(&quot;validate&quot;)</code>
                on value changes (recommended but optional).
            </li>
            <li>
                Implement
                <code>ctrlValidate</code>
                for custom validation logic.
            </li>
            <li>
                Implement
                <code>beforeValidate</code>
                for pre-validation preparation.
            </li>
        </ol>
        <h3>Form Attributes</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Parameter</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Options</th>
                    <th>Default</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>class</td>
                    <td>Custom CSS class</td>
                    <td>string</td>
                    <td>-</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>inline</td>
                    <td>Inline form mode</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>label-position</td>
                    <td>
                        Label alignment. Requires
                        <code>label-width</code>
                        if set to left/right.
                    </td>
                    <td>string</td>
                    <td>right/left/top</td>
                    <td>right</td>
                </tr>
                <tr>
                    <td>label-width</td>
                    <td>
                        Label width (e.g., '50px'). Inherited by child
                        <code>form-item</code>
                        elements.
                    </td>
                    <td>string</td>
                    <td>—</td>
                    <td>80px</td>
                </tr>
                <tr>
                    <td>size</td>
                    <td>Controls the size of form components</td>
                    <td>string</td>
                    <td>medium/small/mini</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>showErrorMessage</td>
                    <td>Custom error message display</td>
                    <td>Function</td>
                    <td>-</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>clearErrorMessage</td>
                    <td>Custom error message clearing</td>
                    <td>Function</td>
                    <td>-</td>
                    <td>-</td>
                </tr>
            </tbody>
        </table>
        <h3>Form Methods</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Method</th>
                    <th>Description</th>
                    <th>Parameters</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>validate</td>
                    <td>Validates the entire form. Takes a callback function that returns a promise.</td>
                    <td>Function(string / string[]) - Optional: validate specific fields by passing name(s).</td>
                </tr>
                <tr>
                    <td>reset</td>
                    <td>Resets all fields to initial values and clears validation results.</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>getData</td>
                    <td>
                        Retrieves form data
                        <strong>without validation</strong>
                        .
                    </td>
                    <td>Function(string / string[]) - Optionally pass field name(s) to fetch specific values.</td>
                </tr>
                <tr>
                    <td>submit</td>
                    <td>Triggers form submission.</td>
                    <td>-</td>
                </tr>
            </tbody>
        </table>
        <h3>Form Events</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Event</th>
                    <th>Description</th>
                    <th>Parameters</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>before-submit</td>
                    <td>Triggered before submission</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>submit</td>
                    <td>Triggered on submission</td>
                    <td>Form data</td>
                </tr>
            </tbody>
        </table>
        <h3>Form-Item Attributes</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Parameter</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Options</th>
                    <th>Default</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>class</td>
                    <td>Custom CSS class</td>
                    <td>string</td>
                    <td>-</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>label</td>
                    <td>Label text</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>label-width</td>
                    <td>Label width (e.g., '50px')</td>
                    <td>string</td>
                    <td>—</td>
                    <td>80px</td>
                </tr>
                <tr>
                    <td>required</td>
                    <td>Required field indicator (displays asterisk, does not enforce validation)</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>inline</td>
                    <td>Inline layout</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
            </tbody>
        </table>
        <h3>Form-Item Slots</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>—</td>
                    <td>Default form item content</td>
                </tr>
                <tr>
                    <td>label</td>
                    <td>Custom label content</td>
                </tr>
                <tr>
                    <td>error</td>
                    <td>Validation error content</td>
                </tr>
            </tbody>
        </table>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo8 from "../../components/form/demo8.joker";
import DEMO_JOKER_demo7 from "../../components/form/demo7.joker";
import DEMO_JOKER_demo6 from "../../components/form/demo6.joker";
import DEMO_JOKER_demo5 from "../../components/form/demo5.joker";
import DEMO_JOKER_demo4 from "../../components/form/demo4.joker";
import DEMO_JOKER_demo3 from "../../components/form/demo3.joker";
import DEMO_JOKER_demo2 from "../../components/form/demo2.joker";
import DEMO_JOKER_demo1 from "../../components/form/demo1.joker";
export default class extends Component {
    components = {
        BottomNav,
        DEMO_JOKER_demo8,
        DEMO_JOKER_demo7,
        DEMO_JOKER_demo6,
        DEMO_JOKER_demo5,
        DEMO_JOKER_demo4,
        DEMO_JOKER_demo3,
        DEMO_JOKER_demo2,
        DEMO_JOKER_demo1
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>