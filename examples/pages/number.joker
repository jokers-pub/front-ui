<template>
<div ref='container' class='joker-demo-container'>
<h2>InputNumber 计数器</h2>
<p>仅允许输入标准的数字值，可定义范围</p>
<h3>基础用法</h3>
<p>要使用它，只需要在<code>jk-number</code>元素中使用<code>value</code>绑定变量即可，变量的初始值即为默认值。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo1)">
<pre><code class="language-html">&lt;template&gt;
    &lt;div style=&quot;width:200px;&quot;&gt;
        &lt;jk-number value=&quot;1x&quot; /&gt;
    &lt;/div&gt;
&lt;/template&gt;
</code></pre>
</DemoContainer>
<h3>禁用状态</h3>
<p><code>disabled</code>属性接受一个<code>Boolean</code>，设置为<code>true</code>即可禁用整个组件，如果你只需要控制数值在某一范围内，可以设置<code>min</code>属性和<code>max</code>属性，不设置<code>min</code>和<code>max</code>时，最小值为 0。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo2)">
<pre><code class="language-html">&lt;template&gt;
    &lt;div style=&quot;width:200px;&quot;&gt;
        &lt;DemoRow&gt;
            &lt;jk-number value=&quot;1&quot; disabled /&gt;
        &lt;/DemoRow&gt;
        &lt;DemoRow&gt;
            &lt;jk-number value=&quot;1&quot; min=&quot;1&quot; /&gt;
        &lt;/DemoRow&gt;
        &lt;DemoRow&gt;
            &lt;jk-number value=&quot;2&quot; max=&quot;2&quot; /&gt;
        &lt;/DemoRow&gt;
    &lt;/div&gt;
&lt;/template&gt;
</code></pre>
</DemoContainer>
<h3>步数</h3>
<p>允许定义递增递减的步数控制</p>
<p>设置<code>step</code>属性可以控制步长，接受一个<code>Number</code>。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo3)">
<pre><code class="language-html">&lt;template&gt;
    &lt;div style=&quot;width:200px;&quot;&gt;
        &lt;DemoRow&gt;
            &lt;jk-number value=&quot;1&quot; step=&quot;2&quot; /&gt;
        &lt;/DemoRow&gt;
    &lt;/div&gt;
&lt;/template&gt;
</code></pre>
</DemoContainer>
<h3>严格步数</h3>
<p><code>step-strictly</code>属性接受一个<code>Boolean</code>。如果这个属性被设置为<code>true</code>，则只能输入步数的倍数。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo4)">
<pre><code class="language-html">&lt;template&gt;
    &lt;div style=&quot;width:200px;&quot;&gt;
        &lt;DemoRow&gt;
            &lt;jk-number value=&quot;0&quot; step=&quot;2&quot; step-strictly /&gt;
        &lt;/DemoRow&gt;
    &lt;/div&gt;
&lt;/template&gt;
</code></pre>
</DemoContainer>
<h3>精度</h3>
<p>设置 <code>precision</code> 属性可以控制数值精度，接收一个 <code>Number</code>。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo5)">
<pre><code class="language-html">&lt;template&gt;
    &lt;div style=&quot;width:200px;&quot;&gt;
        &lt;DemoRow&gt;
            &lt;jk-number value=&quot;0.1&quot; precision=&quot;1&quot; step=&quot;0.1&quot; max=&quot;1&quot; min=&quot;0&quot; /&gt;
        &lt;/DemoRow&gt;
    &lt;/div&gt;
&lt;/template&gt;
</code></pre>
</DemoContainer>
<blockquote>
<p><code>precision</code> 的值必须是一个非负整数，并且不能小于 <code>step</code> 的小数位数。</p>
</blockquote>
<h3>尺寸</h3>
<p>额外提供了 <code>medium</code>、<code>small</code>、<code>mini</code> 三种尺寸的数字输入框</p>
<DemoContainer component="@(components.DEMO_JOKER_demo6)">
<pre><code class="language-html">&lt;template&gt;
    &lt;div style=&quot;width:200px;&quot;&gt;
        &lt;div class=&quot;demo-container&quot;&gt;
            &lt;DemoRow&gt;
                &lt;jk-number /&gt;
            &lt;/DemoRow&gt;
            &lt;DemoRow&gt;
                &lt;jk-number size=&quot;medium&quot; /&gt;
            &lt;/DemoRow&gt;
            &lt;DemoRow&gt;
                &lt;jk-number size=&quot;small&quot; /&gt;
            &lt;/DemoRow&gt;
            &lt;DemoRow&gt;
                &lt;jk-number size=&quot;mini&quot; /&gt;
            &lt;/DemoRow&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;style lang=&quot;scss&quot; scoped&gt;
:deep(.demo-container .jk-number) {
    margin-right: 15px;
}
&lt;/style&gt;

</code></pre>
</DemoContainer>
<h3>按钮位置</h3>
<p>设置 <code>controls-position</code> 属性可以控制按钮位置。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo7)">
<pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;demo-container&quot; style=&quot;width:200px;&quot;&gt;
        &lt;DemoRow&gt;
            &lt;jk-number controls-position=&quot;right&quot; /&gt;
        &lt;/DemoRow&gt;
        &lt;DemoRow&gt;
            &lt;jk-number size=&quot;medium&quot; controls-position=&quot;right&quot; /&gt;
        &lt;/DemoRow&gt;
        &lt;DemoRow&gt;
            &lt;jk-number size=&quot;small&quot; controls-position=&quot;right&quot; /&gt;
        &lt;/DemoRow&gt;
        &lt;DemoRow&gt;
            &lt;jk-number size=&quot;mini&quot; controls-position=&quot;right&quot; /&gt;
        &lt;/DemoRow&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;style lang=&quot;scss&quot; scoped&gt;
:deep(.demo-container .jk-number) {
    margin-right: 15px;
}
&lt;/style&gt;

</code></pre>
</DemoContainer>
<h3>无控制按钮</h3>
<p>设置 <code>hidden-controls</code> 属性可以控制按钮位置。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo8)">
<pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;demo-container&quot; style=&quot;width:200px;&quot;&gt;
        &lt;DemoRow&gt;
            &lt;jk-number hiddenControls placeholder=&quot;请输入内容&quot; /&gt;
        &lt;/DemoRow&gt;
        &lt;DemoRow&gt;
            &lt;jk-number hiddenControls size=&quot;medium&quot; placeholder=&quot;请输入内容&quot; /&gt;
        &lt;/DemoRow&gt;
        &lt;DemoRow&gt;
            &lt;jk-number hiddenControls size=&quot;small&quot; placeholder=&quot;请输入内容&quot; /&gt;
        &lt;/DemoRow&gt;
        &lt;DemoRow&gt;
            &lt;jk-number hiddenControls size=&quot;mini&quot; placeholder=&quot;请输入内容&quot; /&gt;
        &lt;/DemoRow&gt;
        &lt;DemoRow&gt;
            &lt;jk-number hiddenControls placeholder=&quot;请输入内容&quot;&gt;
                @section(&quot;prepend&quot;) {
                    字号
                }
                @section(&quot;append&quot;) {
                    px
                }
            &lt;/jk-number&gt;
        &lt;/DemoRow&gt;
        &lt;DemoRow&gt;
            &lt;jk-number hiddenControls size=&quot;medium&quot; placeholder=&quot;请输入内容&quot;&gt;
                @section(&quot;prepend&quot;) {
                    字号
                }
                @section(&quot;append&quot;) {
                    px
                }
            &lt;/jk-number&gt;
        &lt;/DemoRow&gt;
        &lt;DemoRow&gt;
            &lt;jk-number hiddenControls size=&quot;small&quot; placeholder=&quot;请输入内容&quot;&gt;
                @section(&quot;prepend&quot;) {
                    字号
                }
                @section(&quot;append&quot;) {
                    px
                }
            &lt;/jk-number&gt;
        &lt;/DemoRow&gt;
        &lt;DemoRow&gt;
            &lt;jk-number hiddenControls size=&quot;mini&quot; placeholder=&quot;请输入内容&quot;&gt;
                @section(&quot;prepend&quot;) {
                    字号
                }
                @section(&quot;append&quot;) {
                    px
                }
            &lt;/jk-number&gt;
        &lt;/DemoRow&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;style lang=&quot;scss&quot; scoped&gt;
:deep(.demo-container .jk-number) {
    margin-right: 15px;
}
&lt;/style&gt;

</code></pre>
</DemoContainer>
<h3>Attributes</h3>
<table class="mkd-table">
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
<th>可选值</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>value</td>
<td>绑定值</td>
<td>number</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>class</td>
<td>自定义 class 样式</td>
<td>string</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>min</td>
<td>设置计数器允许的最小值</td>
<td>number</td>
<td>—</td>
<td>-Infinity</td>
</tr>
<tr>
<td>max</td>
<td>设置计数器允许的最大值</td>
<td>number</td>
<td>—</td>
<td>Infinity</td>
</tr>
<tr>
<td>step</td>
<td>计数器步长</td>
<td>number</td>
<td>—</td>
<td>1</td>
</tr>
<tr>
<td>step-strictly</td>
<td>是否只能输入 step 的倍数</td>
<td>boolean</td>
<td>—</td>
<td>false</td>
</tr>
<tr>
<td>precision</td>
<td>数值精度</td>
<td>number</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>size</td>
<td>计数器尺寸</td>
<td>string</td>
<td>large, small</td>
<td>—</td>
</tr>
<tr>
<td>disabled</td>
<td>是否禁用计数器</td>
<td>boolean</td>
<td>—</td>
<td>false</td>
</tr>
<tr>
<td>hidden-controls</td>
<td>是否隐藏控制按钮</td>
<td>boolean</td>
<td>—</td>
<td>false</td>
</tr>
<tr>
<td>controls-position</td>
<td>控制按钮位置</td>
<td>string</td>
<td>right</td>
<td>-</td>
</tr>
<tr>
<td>name</td>
<td>原生属性</td>
<td>string</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>label</td>
<td>输入框关联的 label 文字</td>
<td>string</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>placeholder</td>
<td>输入框默认 placeholder</td>
<td>string</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>fullWidth</td>
<td>是否宽度 100%</td>
<td>boolean</td>
<td>-</td>
<td>-</td>
</tr>
</tbody>
</table>
<h3>Event</h3>
<table class="mkd-table">
<thead>
<tr>
<th>事件名称</th>
<th>说明</th>
<th>回调参数</th>
</tr>
</thead>
<tbody>
<tr>
<td>change</td>
<td>绑定值被改变时触发</td>
<td>currentValue, oldValue</td>
</tr>
<tr>
<td>blur</td>
<td>在组件 Input 失去焦点时触发</td>
<td>VNode.Event</td>
</tr>
<tr>
<td>focus</td>
<td>在组件 Input 获得焦点时触发</td>
<td>VNode.Event</td>
</tr>
</tbody>
</table>
<h3>方法</h3>
<table class="mkd-table">
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>参数</th>
</tr>
</thead>
<tbody>
<tr>
<td>blur</td>
<td>使 input 失去焦点</td>
<td>-</td>
</tr>
<tr>
<td>focus</td>
<td>使 input 获取焦点</td>
<td>-</td>
</tr>
<tr>
<td>select</td>
<td>选中 input 中的文字</td>
<td>—</td>
</tr>
</tbody>
</table>

<BottomNav />
</div>
</template>
<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../common/components/bottom-nav.joker";
import DEMO_JOKER_demo8 from '../components/number/demo8.joker';
import DEMO_JOKER_demo7 from '../components/number/demo7.joker';
import DEMO_JOKER_demo6 from '../components/number/demo6.joker';
import DEMO_JOKER_demo5 from '../components/number/demo5.joker';
import DEMO_JOKER_demo4 from '../components/number/demo4.joker';
import DEMO_JOKER_demo3 from '../components/number/demo3.joker';
import DEMO_JOKER_demo2 from '../components/number/demo2.joker';
import DEMO_JOKER_demo1 from '../components/number/demo1.joker';
export default class extends Component {
components={
BottomNav,
DEMO_JOKER_demo8,
DEMO_JOKER_demo7,
DEMO_JOKER_demo6,
DEMO_JOKER_demo5,
DEMO_JOKER_demo4,
DEMO_JOKER_demo3,
DEMO_JOKER_demo2,
DEMO_JOKER_demo1
}
mounted(){
let container= this.$getRef('container')?.output!;
container.querySelectorAll('pre code').forEach((el:HTMLElement) => {
        hljs.highlightElement(el);
      });
}
}
</script>