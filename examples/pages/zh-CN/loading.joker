<template>
    <div ref="container" class="joker-demo-container">
        <h2>Loading 加载</h2>
        <p>加载数据时显示动效。</p>
        <h3>区域展示</h3>
        <p>
            可通过配置
            <code>target</code>
            属性来指定 loading 的展示宿主
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo1)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div ref=&quot;target&quot; style=&quot;background:var(--jk-color-primary);width:200px;height:200px;&quot;&gt;&lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { Loading } from &quot;../../../src/index&quot;;
export default class extends Component {
    mounted() {
        Loading({
            target: this.$getRef(&quot;target&quot;)?.output
        });
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>全屏展示</h3>
        <p>
            通过设置
            <code>fullscreen</code>
            或者指定
            <code>target</code>
            为
            <strong>body</strong>
            ，实现全屏 Loading
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo2)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-button @click=&quot;showLoading()&quot;&gt;Full-screen loading&lt;/jk-button&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { Loading } from &quot;../../../src/index&quot;;
export default class extends Component {
    showLoading() {
        let $loading = Loading({
            fullscreen: true
        });

        setTimeout(() =&gt; {
            $loading.close();
        }, 2000);
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <blockquote>
            <p>请注意，全屏 Loading，只会存在一个，如果重复触发，则返回上一个未完成的 Loading 操作组件</p>
        </blockquote>
        <p>
            需要注意的是，以服务的方式调用的全屏 Loading 是单例的：若在前一个全屏 Loading 关闭前再次调用全屏 Loading，并不会创建一个新的 Loading 实例，而是返回现有全屏 Loading 的实例：
        </p>
        <pre><code class="language-js">let loading1 = Loading({ fullscreen: true });
let loading2 = Loading({ fullscreen: true });
console.log(loading1 === loading2); // true
</code></pre>
        <p>此时调用它们中任意一个的 close 方法都能关闭这个全屏 Loading。</p>
        <h3>自定义</h3>
        <p>可自定义加载文案、图标和背景色。</p>
        <DemoContainer component="@(components.DEMO_JOKER_demo3)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div ref=&quot;target&quot; class=&quot;container&quot;&gt;&lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { Loading } from &quot;../../../src&quot;;

export default class extends Component {
    mounted() {
        Loading({
            target: this.$getRef(&quot;target&quot;)?.output,
            customClass: &quot;custom&quot;,
            spinner: &quot;jk-icon-loading&quot;,
            text: &quot;Customize the Loading text.&quot;
        });
    }
}
&lt;/script&gt;

&lt;style scoped lang=&quot;scss&quot;&gt;
.container {
    background: var(--jk-color-primary);
    height: 200px;

    :deep(.custom) {
        background: rgba(0, 0, 0, 0.6);
    }
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Options</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>参数</th>
                    <th>说明</th>
                    <th>类型</th>
                    <th>可选值</th>
                    <th>默认值</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>target</td>
                    <td>
                        Loading 需要覆盖的 DOM 节点。可传入一个 DOM 对象或字符串；若传入字符串，则会将其作为参数传入
                        <code>document.querySelector</code>
                        以获取到对应 DOM 节点
                    </td>
                    <td>Element / string / VNode.Node；支持传入 VNode 节点</td>
                    <td>—</td>
                    <td>document.body</td>
                </tr>
                <tr>
                    <td>fullscreen</td>
                    <td>是否全屏</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>true</td>
                </tr>
                <tr>
                    <td>text</td>
                    <td>显示在加载图标下方的加载文案</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>spinner</td>
                    <td>自定义加载图标类名</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>customClass</td>
                    <td>Loading 的自定义类名</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
            </tbody>
        </table>
        <h3>Methods</h3>
        <p>
            调用
            <code>Loading</code>
            会返回当前 Loading 的实例。如果需要手动关闭实例，可以调用它的
            <code>close</code>
            方法。
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>方法名</th>
                    <th>说明</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>close</td>
                    <td>关闭当前的 Loading</td>
                </tr>
            </tbody>
        </table>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo3 from "../../components/loading/demo3.joker";
import DEMO_JOKER_demo2 from "../../components/loading/demo2.joker";
import DEMO_JOKER_demo1 from "../../components/loading/demo1.joker";
export default class extends Component {
    components = {
        BottomNav,
        DEMO_JOKER_demo3,
        DEMO_JOKER_demo2,
        DEMO_JOKER_demo1
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>