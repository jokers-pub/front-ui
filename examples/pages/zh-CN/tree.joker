<template>
<div ref='container' class='joker-demo-container'>
<h2>Tree 树形控件</h2>
<p>用清晰的层级结构展示信息，可展开或折叠。</p>
<h3>基础用法</h3>
<p>基础的树形结构展示。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo1)">
<pre><code class="language-html">&lt;template&gt;
    &lt;jk-tree data=&quot;@treeData&quot; @current-change=&quot;handleCurrentChange&quot; /&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { TreeNode } from &quot;../../../packages/tree/store/node&quot;;

export default class extends Component {
    treeData = [
        {
            label: &quot;Level 1 - 1&quot;,
            children: [
                {
                    label: &quot;Level 2 - 1-1&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 1-1-1&quot;
                        }
                    ]
                }
            ]
        },
        {
            label: &quot;Level 1 - 2&quot;,
            children: [
                {
                    label: &quot;Level 2 - 2-1&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 2-1-1&quot;
                        }
                    ]
                },
                {
                    label: &quot;Level 2 - 2-2&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 2-2-1&quot;
                        }
                    ]
                }
            ]
        },
        {
            label: &quot;Level 1 - 3&quot;,
            children: [
                {
                    label: &quot;Level 2 - 3-1&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 3-1-1&quot;
                        }
                    ]
                },
                {
                    label: &quot;Level 2 - 3-2&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 3-2-1&quot;
                        }
                    ]
                }
            ]
        }
    ];

    handleCurrentChange(e: VNode.Event&lt;TreeNode&gt;) {
        console.log(e.data.label);
    }
}
&lt;/script&gt;
</code></pre>
</DemoContainer>
<h3>可选择</h3>
<p>适用于需要选择层级时使用，该 Demo 还展示了动态加载。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo2)">
<pre><code class="language-html">&lt;template&gt;
    &lt;jk-tree lazy load=&quot;@loadData&quot; nodeKey=&quot;id&quot; @check=&quot;handleCheck&quot; show-checkbox default-expand-all /&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { TreeNode } from &quot;../../../packages/tree/store/node&quot;;
import { sleep } from &quot;@joker.front/shared&quot;;

export default class extends Component {
    model = {};
    async loadData(node: TreeNode, callBack: Function) {
        if (node.level === 0) {
            return callBack([
                { label: &quot;Option 1&quot;, id: &quot;1&quot; },
                { label: &quot;Option 2&quot;, id: &quot;2&quot; }
            ]);
        }

        // Simulate a request
        await sleep(1000);

        if (node.level &gt; 3) {
            return callBack();
        }

        if (node.key === &quot;1&quot;) {
            callBack([
                { label: &quot;Option 1-1&quot;, id: &quot;1-1&quot; },
                { label: &quot;Option 2-2&quot;, id: &quot;2-2&quot;, isVirtualNode: true }
            ]);
        } else if (node.key === &quot;2-2&quot;) {
            callBack([
                { label: &quot;Option 2-2-1&quot;, id: &quot;2-2-1&quot; },
                { label: &quot;Option 2-2-2&quot;, id: &quot;2-2-2&quot; }
            ]);
        } else {
            callBack();
        }
    }

    handleCheck(e: VNode.Event&lt;TreeNode&gt;) {
        console.log(e.data, e.data.checked);
    }
}
&lt;/script&gt;
</code></pre>
</DemoContainer>
<h3>节点禁用以及选择</h3>
<p>通过设置<code>disabled</code>可以实现节点的禁用，该属性一般配合<code>show-checkbox</code>进行使用。</p>
<p>本示例还展示了如何获取和设置选中的节点，如果想通过<strong>key</strong>进行获取和设置，建议配置对应的<code>node-key</code></p>
<blockquote>
<p>若不配置 node-key 或取值为 undefind 时，则会默认生成一个内部 id 作为 key</p>
</blockquote>
<DemoContainer component="@(components.DEMO_JOKER_demo3)">
<pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-tree
            ref=&quot;tree&quot;
            data=&quot;@treeData&quot;
            node-key=&quot;id&quot;
            show-checkbox
            default-expanded-keys=&quot;@(['2', '2-1', '3'])&quot;
            default-checked-keys=&quot;@(['1-1-1', '2-2-1'])&quot;
        /&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-button @click=&quot;getCheckNodes&quot;&gt;Get selected nodes&lt;/jk-button&gt;
        &lt;jk-button @click=&quot;getCheckKeys&quot;&gt;Get selected keys&lt;/jk-button&gt;
        &lt;jk-button @click=&quot;setCheckedByKeys&quot;&gt;Set selected by keys&lt;/jk-button&gt;
        &lt;jk-button @click=&quot;checkedAll&quot;&gt;Select all&lt;/jk-button&gt;
        &lt;jk-button @click=&quot;clear&quot;&gt;Clear selection&lt;/jk-button&gt;
        &lt;jk-button @click=&quot;selectLeafNode&quot;&gt;Select Leaf Node&lt;/jk-button&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { Message, MessageBox } from &quot;../../../src&quot;;

export default class extends Component {
    treeData = [
        {
            id: &quot;1&quot;,
            label: &quot;Level 1 - 1&quot;,
            children: [
                {
                    id: &quot;1-1&quot;,
                    label: &quot;Level 2 - 1-1&quot;,
                    children: [
                        {
                            id: &quot;1-1-1&quot;,
                            label: &quot;Level 3 - 1-1-1&quot;
                        }
                    ]
                }
            ]
        },
        {
            id: &quot;2&quot;,
            label: &quot;Level 1 - 2&quot;,
            children: [
                {
                    id: &quot;2-1&quot;,
                    label: &quot;Level 2 - 2-1&quot;,
                    children: [
                        {
                            id: &quot;2-1-1&quot;,
                            label: &quot;Level 3 - 2-1-1&quot;
                        }
                    ]
                },
                {
                    id: &quot;2-2&quot;,
                    label: &quot;Level 2 - 2-2&quot;,
                    disabled: true,
                    children: [
                        {
                            id: &quot;2-2-1&quot;,
                            label: &quot;Level 3 - 2-2-1&quot;
                        }
                    ]
                }
            ]
        },
        {
            id: &quot;3&quot;,
            label: &quot;Level 1 - 3&quot;,
            children: [
                {
                    id: &quot;3-1&quot;,
                    label: &quot;Level 2 - 3-1&quot;,
                    children: [
                        {
                            id: &quot;3-1-1&quot;,
                            label: &quot;Level 3 - 3-1-1&quot;
                        }
                    ]
                },
                {
                    id: &quot;3-2&quot;,
                    label: &quot;Level 2 - 3-2&quot;,
                    children: [
                        {
                            id: &quot;3-2-1&quot;,
                            label: &quot;Level 3 - 3-2-2&quot;
                        },
                        {
                            id: &quot;3-2-2&quot;,
                            label: &quot;Level 3 - 3-2-1&quot;,
                            disabled: true
                        }
                    ]
                }
            ]
        }
    ];

    get tree() {
        return this.$getRef(&quot;tree&quot;)?.component;
    }

    getCheckNodes() {
        Message({
            message: &quot;Please check the console output&quot;,
            type: &quot;success&quot;
        });

        console.log(this.tree?.getCheckedNodes());
    }

    getCheckKeys() {
        MessageBox.alert(this.tree?.getCheckedKeys().join(&quot;,&quot;));
    }

    setCheckedByKeys() {
        this.tree?.setCheckedKeys([&quot;2-1-1&quot;, &quot;3-1&quot;]);
    }

    checkedAll() {
        this.tree?.checkedAll();
    }

    clear() {
        this.tree?.clearChecked();
    }
    selectLeafNode() {
        this.tree?.setCurrentNode(&quot;3-2-2&quot;);
    }
}
&lt;/script&gt;
</code></pre>
</DemoContainer>
<h3>自定义节点模板</h3>
<p>通过使用<code>section</code>可以实现自定义节点模板的展示。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo4)">
<pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-tree ref=&quot;tree&quot; data=&quot;@treeData&quot; icon-class=&quot;jk-icon-arrow-right&quot; default-expand-all show-checkbox&gt;
            @section(&quot;default&quot;, node) {
                &lt;div class=&quot;node-item&quot;&gt;
                    &lt;div class=&quot;label&quot;&gt;
                        &lt;span class=&quot;icon @getNodeIcon(node)&quot;&gt;&lt;/span&gt;@node.label
                    &lt;/div&gt;
                    &lt;div class=&quot;option&quot;&gt;
                        &lt;jk-link type=&quot;primary&quot; @click.stop=&quot;appendNode(node)&quot;&gt;Add&lt;/jk-link&gt;
                        &lt;jk-link type=&quot;danger&quot; @click.stop=&quot;removeNode(node)&quot;&gt;Delete&lt;/jk-link&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            }
        &lt;/jk-tree&gt;
    &lt;/DemoRow&gt;
    &lt;jk-button @click=&quot;handleClick&quot;&gt;Reset&lt;/jk-button&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { TreeNode } from &quot;../../../packages/tree/store/node&quot;;

export default class extends Component {
    treeData = [
        {
            label: &quot;Level 1 - 1&quot;,
            children: [
                {
                    label: &quot;Level 2 - 1-1&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 1-1-1&quot;
                        }
                    ]
                }
            ]
        },
        {
            label: &quot;Level 1 - 2&quot;,
            children: [
                {
                    label: &quot;Level 2 - 2-1&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 2-1-1&quot;
                        }
                    ]
                },
                {
                    label: &quot;Level 2 - 2-2&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 2-2-1&quot;
                        },
                        {
                            label: &quot;Level 3 - 2-2-2&quot;
                        },
                        {
                            label: &quot;Level 3 - 2-2-3&quot;
                        }
                    ]
                }
            ]
        },
        {
            label: &quot;Level 1 - 3&quot;,
            children: [
                {
                    label: &quot;Level 2 - 3-1&quot;
                },
                {
                    label: &quot;Level 2 - 3-2&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 3-2-1&quot;
                        }
                    ]
                }
            ]
        }
    ];

    getNodeIcon(node: TreeNode) {
        if (node.level === 1) {
            return &quot;jk-icon-food&quot;;
        } else if (node.level === 2) {
            return &quot;jk-icon-cpu&quot;;
        } else {
            return &quot;jk-icon-connection&quot;;
        }
    }

    appendNode(e: VNode.Event, node: TreeNode) {
        let child = node.insterChild({
            label: &quot;Test adding node &quot; + (node.level + 1)
        });

        // Since it is dynamically added, for the checkbox, you need to set the checkbox once to refresh the tree.
        // This line of code is only for the demo to run.
        // Generally, there will not be a dynamic tree with checkboxes.
        child.setChecked(false);
    }

    removeNode(e: VNode.Event, node: TreeNode) {
        node.remove();
    }

    handleClick() {
        this.$getRef(&quot;tree&quot;).component.reload();
    }
}
&lt;/script&gt;

&lt;style lang=&quot;scss&quot; scoped&gt;
.node-item {
    display: flex;
    flex: 1;

    font-size: 14px;
    .label {
        flex: 1;
        overflow: hidden;
    }

    .icon {
        margin-right: 8px;
    }

    .option {
        :deep(.jk-link) {
            margin-right: 10px;
        }
    }
}
&lt;/style&gt;
</code></pre>
</DemoContainer>
<h3>节点过滤</h3>
<p>通过关键字过滤节点，在需要对节点进行过滤时，调用 Tree 实例的<code>filter</code>方法，参数为关键字。需要注意的是，此时需要设置<code>filter-method</code>，值为过滤函数，默认该方法会根据节点的 label 进行字符过滤查询。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo5)">
<pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-input placeholder=&quot;Please enter keywords&quot; @input=&quot;handleInput&quot; /&gt;
    &lt;/DemoRow&gt;
    &lt;DemoRow&gt;
        &lt;jk-tree data=&quot;@treeData&quot; ref=&quot;tree&quot; default-expand-all /&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;

export default class extends Component {
    treeData = [
        {
            label: &quot;Level 1 - 1&quot;,
            children: [
                {
                    label: &quot;Level 2 - 1-1&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 1-1-1&quot;
                        }
                    ]
                }
            ]
        },
        {
            label: &quot;Level 1 - 2&quot;,
            children: [
                {
                    label: &quot;Level 2 - 2-1&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 2-1-1&quot;
                        }
                    ]
                },
                {
                    label: &quot;Level 2 - 2-2&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 2-2-1&quot;
                        }
                    ]
                }
            ]
        },
        {
            label: &quot;Level 1 - 3&quot;,
            children: [
                {
                    label: &quot;Level 2 - 3-1&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 3-1-1&quot;
                        }
                    ]
                },
                {
                    label: &quot;Level 2 - 3-2&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 3-2-1&quot;
                        }
                    ]
                }
            ]
        }
    ];
    handleInput(e: VNode.Event&lt;string&gt;) {
        this.$getRef(&quot;tree&quot;)?.component.filter(e.data);
    }
}
&lt;/script&gt;
</code></pre>
</DemoContainer>
<h3>可拖拽</h3>
<p>通过开启<code>draggable</code>字段来启动树节点的拖拽功能，并可以配置哪些节点可拖动，哪些节点可拖入节点。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo6)">
<pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-tree data=&quot;@treeData&quot; ref=&quot;tree&quot; default-expand-all draggable /&gt;
    &lt;/DemoRow&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    treeData = [
        {
            label: &quot;Level 1 - 1&quot;,
            children: [
                {
                    label: &quot;Level 2 - 1-1&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 1-1-1&quot;
                        }
                    ]
                }
            ]
        },
        {
            label: &quot;Level 1 - 2&quot;,
            children: [
                {
                    label: &quot;Level 2 - 2-1&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 2-1-1&quot;
                        }
                    ]
                },
                {
                    label: &quot;Level 2 - 2-2&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 2-2-1&quot;
                        }
                    ]
                }
            ]
        },
        {
            label: &quot;Level 1 - 3&quot;,
            children: [
                {
                    label: &quot;Level 2 - 3-1&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 3-1-1&quot;
                        }
                    ]
                },
                {
                    label: &quot;Level 2 - 3-2&quot;,
                    children: [
                        {
                            label: &quot;Level 3 - 3-2-1&quot;
                        }
                    ]
                }
            ]
        }
    ];
}
&lt;/script&gt;
</code></pre>
</DemoContainer>
<h3>Attributes</h3>
<table class="mkd-table">
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
<th>可选值</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>data</td>
<td>展示数据</td>
<td>array</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>class</td>
<td>自定义 class 样式</td>
<td>string</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>empty-text</td>
<td>内容为空的时候展示的文本</td>
<td>String</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>empty-size</td>
<td>空面板尺寸本</td>
<td>String</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>node-key</td>
<td>每个树节点用来作为唯一标识的属性，整棵树应该是唯一的</td>
<td>String</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>load</td>
<td>加载子树数据的方法，仅当 lazy 属性为 true 时生效</td>
<td>function(node, resolve)</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>default-expand-all</td>
<td>是否默认展开所有节点</td>
<td>boolean</td>
<td>—</td>
<td>false</td>
</tr>
<tr>
<td>expand-on-click-node</td>
<td>是否在点击节点的时候展开或者收缩节点， 默认值为 true，如果为 false，则只有点箭头图标的时候才会展开或者收缩节点。</td>
<td>boolean</td>
<td>—</td>
<td>true</td>
</tr>
<tr>
<td>check-on-click-node</td>
<td>是否在点击节点的时候选中节点，默认值为 false，即只有在点击复选框时才会选中节点。</td>
<td>boolean</td>
<td>—</td>
<td>false</td>
</tr>
<tr>
<td>default-expanded-keys</td>
<td>默认展开的节点的 key 的数组</td>
<td>array</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>show-checkbox</td>
<td>节点是否可被选择</td>
<td>boolean</td>
<td>—</td>
<td>false</td>
</tr>
<tr>
<td>default-checked-keys</td>
<td>默认勾选的节点的 key 的数组</td>
<td>array</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>current-node-key</td>
<td>当前选中的节点</td>
<td>string, number</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>filter-method</td>
<td>对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏</td>
<td>Function(node,value)</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>indent</td>
<td>相邻级节点间的水平缩进，单位为像素</td>
<td>number</td>
<td>—</td>
<td>16</td>
</tr>
<tr>
<td>icon-class</td>
<td>自定义树节点的图标</td>
<td>string</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>lazy</td>
<td>是否懒加载子节点，需与 load 方法结合使用</td>
<td>boolean</td>
<td>—</td>
<td>false</td>
</tr>
<tr>
<td>labelKey</td>
<td>指定节点标签为节点对象的某个属性值</td>
<td>string</td>
<td>—</td>
<td>label</td>
</tr>
<tr>
<td>childrenKey</td>
<td>指定子树为节点对象的某个属性值</td>
<td>string</td>
<td>—</td>
<td>children</td>
</tr>
<tr>
<td>disabledKey</td>
<td>指定节点选择框是否禁用为节点对象的某个属性值</td>
<td>string</td>
<td>—</td>
<td>disabled</td>
</tr>
<tr>
<td>expandKey</td>
<td>指定节点是否默认展开对象的某个属性值</td>
<td>string</td>
<td>—</td>
<td>expand</td>
</tr>
<tr>
<td>isLeafKey</td>
<td>指定节点是否为叶子节点，仅在指定了 lazy 属性的情况下生效</td>
<td>string</td>
<td>—</td>
<td>isLeaf</td>
</tr>
<tr>
<td>virtualKey</td>
<td>高级用法：是否是虚拟节点，虚拟节点不参与到整个 checkbox 的选中过程，一般在开启选中时生效。</td>
<td>string</td>
<td>—</td>
<td>isVirtualNode</td>
</tr>
<tr>
<td>draggable</td>
<td>是否开启拖拽功能</td>
<td>boolean</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>checkDraggabled</td>
<td>节点是否允许拖动检查方法，该返回 true/false 来决定当前节点是否可拖动</td>
<td>function</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>checkCanDropIn</td>
<td>当前节点是否允许拖入，如果允许拖入，则 drapp 事件 position 位置会返回 in 来决定是否是拖入</td>
<td>function</td>
<td>—</td>
<td>—</td>
</tr>
</tbody>
</table>
<h3>Methods</h3>
<p><code>Tree</code> 内部使用了 Node 类型的对象来包装用户传入的数据，用来保存目前节点的状态。
<code>Tree</code> 拥有如下方法：</p>
<table class="mkd-table">
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>参数</th>
</tr>
</thead>
<tbody>
<tr>
<td>filter</td>
<td>对树节点进行筛选操作</td>
<td></td>
</tr>
<tr>
<td>getCheckedNodes</td>
<td>若节点可被选择（即 <code>show-checkbox</code> 为 <code>true</code>），则返回目前被选中的节点所组成的数组</td>
<td>(leafOnly, includeHalfChecked) 接收两个 boolean 类型的参数，1. 是否只是叶子节点，默认值为 <code>false</code> 2. 是否包含半选节点，默认值为 <code>false</code></td>
</tr>
<tr>
<td>getCheckedKeys</td>
<td>若节点可被选择（即 <code>show-checkbox</code> 为 <code>true</code>），则返回目前被选中的节点的 key 所组成的数组</td>
<td>(leafOnly, includeHalfChecked) 接收两个 boolean 类型的参数，1. 是否只是叶子节点，默认值为 <code>false</code> 2. 是否包含半选节点，默认值为 <code>false</code></td>
</tr>
<tr>
<td>setCheckedKeys</td>
<td>通过 keys 设置目前勾选的节点，使用此方法必须设置 node-key 属性</td>
<td>(keys, leafOnly) 接收两个参数，1. 勾选节点的 key 的数组 2. boolean 类型的参数，若为 <code>true</code> 则仅设置叶子节点的选中状态，默认值为 <code>false</code></td>
</tr>
<tr>
<td>checkNode</td>
<td>设置节点选中状态｜ 两个参数，1. 勾选节点的 key 或者 TreeNode 2. boolean 类型，节点是否选中</td>
<td></td>
</tr>
<tr>
<td>getCurrentNode</td>
<td>获取当前被选中节点，</td>
<td>—</td>
</tr>
<tr>
<td>setCurrentNode</td>
<td>通过 node 设置某个节点的当前选中状态</td>
<td>可传入 TreeNode 或者节点 key , 若传入 undefined，则代表取消选中</td>
</tr>
<tr>
<td>getNodeByKey</td>
<td>根据节点 key 获取节点</td>
<td>key</td>
</tr>
<tr>
<td>removeNode</td>
<td>删除 Tree 中的一个节点</td>
<td>可传入 TreeNode 或者节点 Key</td>
</tr>
<tr>
<td>appendNode</td>
<td>传入节点数据，在 root 中挂载一个新的节点，如果需要在某一个节点下新增可先获取到该节点，然后调用节点的 insterChild 方法进行添加</td>
<td>-</td>
</tr>
<tr>
<td>checkedAll</td>
<td>勾选所有节点</td>
<td>-</td>
</tr>
<tr>
<td>clearChecked</td>
<td>取消勾选所有节点</td>
<td>-</td>
</tr>
<tr>
<td>collapseNode</td>
<td>折叠节点</td>
<td>需要传入要操作的 TreeNode</td>
</tr>
<tr>
<td>expandNode</td>
<td>展开节点</td>
<td>需要传入要操作的 TreeNode</td>
</tr>
<tr>
<td>getAllNodeData</td>
<td>获取所有 NodeData，并以<code>childrens</code>做层级</td>
<td>-</td>
</tr>
<tr>
<td>getNode</td>
<td>根据条件获取指定节点</td>
<td>(node:TreeNode)=&gt;boolean/void</td>
</tr>
<tr>
<td>reload</td>
<td>重新渲染</td>
<td></td>
</tr>
</tbody>
</table>
<h3>Events</h3>
<table class="mkd-table">
<thead>
<tr>
<th>事件名称</th>
<th>说明</th>
<th>回调参数</th>
</tr>
</thead>
<tbody>
<tr>
<td>node-contextmenu</td>
<td>当某一节点被鼠标右键点击时会触发该事件</td>
<td>参数为 TreeNod</td>
</tr>
<tr>
<td>check</td>
<td>当复选框被点击的时候触发</td>
<td>参数为 TreeNod，可通过获取节点的 checked 来判断选中状态</td>
</tr>
<tr>
<td>current-change</td>
<td>当前选中节点变化时触发的事件</td>
<td>参数为 TreeNod</td>
</tr>
<tr>
<td>node-expand</td>
<td>节点被展开时触发的事件</td>
<td>参数为 TreeNode</td>
</tr>
<tr>
<td>node-collapse</td>
<td>节点被关闭时触发的事件</td>
<td>参数为 TreeNod</td>
</tr>
<tr>
<td>drop</td>
<td>节点拖动完成后触发</td>
<td>参数为 {dragNode:拖动节点, dropNode: 拖入节点, position: 位置（prev、next、in）}</td>
</tr>
</tbody>
</table>
<h3>Scoped Sections</h3>
<table class="mkd-table">
<thead>
<tr>
<th>name</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>—</td>
<td>自定义树节点的内容，参数为 TreeNode</td>
</tr>
</tbody>
</table>

<BottomNav />
</div>
</template>
<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo6 from '../../components/tree/demo6.joker';
import DEMO_JOKER_demo5 from '../../components/tree/demo5.joker';
import DEMO_JOKER_demo4 from '../../components/tree/demo4.joker';
import DEMO_JOKER_demo3 from '../../components/tree/demo3.joker';
import DEMO_JOKER_demo2 from '../../components/tree/demo2.joker';
import DEMO_JOKER_demo1 from '../../components/tree/demo1.joker';
export default class extends Component {
components={
BottomNav,
DEMO_JOKER_demo6,
DEMO_JOKER_demo5,
DEMO_JOKER_demo4,
DEMO_JOKER_demo3,
DEMO_JOKER_demo2,
DEMO_JOKER_demo1
}
mounted(){
let container= this.$getRef('container')?.output!;
container.querySelectorAll('pre code').forEach((el:HTMLElement) => {
        hljs.highlightElement(el);
      });
}
}
</script>