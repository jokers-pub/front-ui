<template>
    <div ref="container" class="joker-demo-container">
        <h2>Progress 进度条</h2>
        <p>用于展示操作进度，告知用户当前状态和预期。</p>
        <h3>线形进度条</h3>
        <p>
            Progress 组件设置 percentage 属性即可，表示进度条对应的百分比，必填，必须在 0-100。通过 format 属性来指定进度条文字内容。
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo1)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div&gt;
        &lt;DemoRow&gt;
            &lt;jk-progress percentage=&quot;@model.percentage1&quot;&gt;&lt;/jk-progress&gt;
        &lt;/DemoRow&gt;
        &lt;DemoRow&gt;
            &lt;jk-progress percentage=&quot;@model.percentage2&quot; format=&quot;@format&quot;&gt;&lt;/jk-progress&gt;
        &lt;/DemoRow&gt;
        &lt;DemoRow&gt;
            &lt;jk-progress percentage=&quot;@model.percentage2&quot; status=&quot;success&quot;&gt;&lt;/jk-progress&gt;
        &lt;/DemoRow&gt;
        &lt;DemoRow&gt;
            &lt;jk-progress percentage=&quot;@model.percentage2&quot; status=&quot;warning&quot;&gt;&lt;/jk-progress&gt;
        &lt;/DemoRow&gt;
        &lt;jk-progress percentage=&quot;@model.percentage1&quot; status=&quot;exception&quot;&gt;&lt;/jk-progress&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        percentage1: 50,
        percentage2: 100
    };
    format(percentage: number) {
        return percentage === 100 ? &quot;Full&quot; : percentage + &quot;%&quot;;
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>百分比内显</h3>
        <p>百分比不占用额外控件，适用于文件上传等场景。</p>
        <p>
            Progress 组件可通过 stroke-width 属性更改进度条的高度，并可通过 text-inside 属性来将进度条描述置于进度条内部。
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo2)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div&gt;
        &lt;DemoRow&gt;&lt;jk-progress textInside strokeWidth=&quot;@model.strokeWidth1&quot; percentage=&quot;@model.percentage1&quot;&gt;&lt;/jk-progress&gt;&lt;/DemoRow&gt;
        &lt;DemoRow&gt;&lt;jk-progress textInside strokeWidth=&quot;@model.strokeWidth2&quot; percentage=&quot;@model.percentage2&quot; status=&quot;success&quot;&gt;&lt;/jk-progress&gt;&lt;/DemoRow&gt;
        &lt;DemoRow&gt;&lt;jk-progress textInside strokeWidth=&quot;@model.strokeWidth3&quot; percentage=&quot;@model.percentage3&quot; status=&quot;warning&quot;&gt;&lt;/jk-progress&gt;&lt;/DemoRow&gt;
        &lt;jk-progress textInside strokeWidth=&quot;@model.strokeWidth4&quot; percentage=&quot;@model.percentage4&quot; status=&quot;exception&quot;&gt;&lt;/jk-progress&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        percentage1: 70,
        percentage2: 100,
        percentage3: 80,
        percentage4: 50,
        strokeWidth1: 26,
        strokeWidth2: 24,
        strokeWidth3: 22,
        strokeWidth4: 20
    };
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>自定义颜色</h3>
        <p>可以通过 color 设置进度条的颜色，color 可以接受颜色字符串，函数和数组。</p>
        <DemoContainer component="@(components.DEMO_JOKER_demo3)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;&lt;jk-progress percentage=&quot;@model.percentage&quot; color=&quot;@model.customColor&quot;&gt;&lt;/jk-progress&gt;&lt;/DemoRow&gt;
    &lt;DemoRow&gt;&lt;jk-progress percentage=&quot;@model.percentage&quot; color=&quot;@customColorMethod&quot;&gt;&lt;/jk-progress&gt;&lt;/DemoRow&gt;
    &lt;DemoRow&gt;&lt;jk-progress percentage=&quot;@model.percentage&quot; color=&quot;@model.customColors&quot;&gt;&lt;/jk-progress&gt;&lt;/DemoRow&gt;
    &lt;jk-button-group&gt;
        &lt;jk-button icon=&quot;jk-icon-minus&quot; @click=&quot;decrease&quot;&gt;&lt;/jk-button&gt;
        &lt;jk-button icon=&quot;jk-icon-plus&quot; @click=&quot;increase&quot;&gt;&lt;/jk-button&gt;
    &lt;/jk-button-group&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        percentage: 20,
        customColor: '#409eff',
        customColors: [
          {color: '#f56c6c', percentage: 20},
          {color: '#e6a23c', percentage: 40},
          {color: '#5cb87a', percentage: 60},
          {color: '#1989fa', percentage: 80},
          {color: '#6f7ad3', percentage: 100}
        ]
    };

    customColorMethod(percentage: number) {
        if (percentage &lt; 30) {
          return '#909399';
        } else if (percentage &lt; 70) {
          return '#e6a23c';
        } else {
          return '#67c23a';
        }
    }
    increase() {
        this.model.percentage += 10;
        if (this.model.percentage &gt; 100) {
          this.model.percentage = 100;
        }
    }
    decrease() {
        this.model.percentage -= 10;
        if (this.model.percentage &lt; 0) {
          this.model.percentage = 0;
        }
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>环形进度条</h3>
        <p>Progress 组件可通过 type 属性来指定使用环形进度条，在环形进度条中，还可以通过 width 属性来设置其大小。</p>
        <DemoContainer component="@(components.DEMO_JOKER_demo4)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div&gt;
        &lt;jk-progress type=&quot;circle&quot; percentage=&quot;@model.percentage1&quot;&gt;&lt;/jk-progress&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;jk-progress type=&quot;circle&quot; percentage=&quot;@model.percentage2&quot;&gt;&lt;/jk-progress&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;jk-progress type=&quot;circle&quot; percentage=&quot;@model.percentage3&quot; status=&quot;success&quot;&gt;&lt;/jk-progress&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;jk-progress type=&quot;circle&quot; percentage=&quot;@model.percentage4&quot; status=&quot;warning&quot;&gt;&lt;/jk-progress&gt;
    &lt;/div&gt;
    &lt;jk-progress type=&quot;circle&quot; percentage=&quot;@model.percentage5&quot; status=&quot;exception&quot;&gt;&lt;/jk-progress&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        percentage1: 0,
        percentage2: 25,
        percentage3: 100,
        percentage4: 70,
        percentage5: 50
    };
}
&lt;/script&gt;
&lt;style lang=&quot;scss&quot; scoped&gt;
div {
    display: inline-block;
    margin-right: 20px;
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>仪表盘形进度条</h3>
        <p>通过 type 属性来指定使用仪表盘形进度条。</p>
        <DemoContainer component="@(components.DEMO_JOKER_demo5)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-progress type=&quot;dashboard&quot; percentage=&quot;@model.percentage&quot; color=&quot;@model.colors&quot;&gt;&lt;/jk-progress&gt;
    &lt;div&gt;
        &lt;jk-button-group&gt;
            &lt;jk-button icon=&quot;jk-icon-minus&quot; @click=&quot;decrease&quot;&gt;&lt;/jk-button&gt;
            &lt;jk-button icon=&quot;jk-icon-plus&quot; @click=&quot;increase&quot;&gt;&lt;/jk-button&gt;
        &lt;/jk-button-group&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        percentage: 10,
        colors: [
          {color: '#f56c6c', percentage: 20},
          {color: '#e6a23c', percentage: 40},
          {color: '#5cb87a', percentage: 60},
          {color: '#1989fa', percentage: 80},
          {color: '#6f7ad3', percentage: 100}
        ]
    };

    increase() {
        this.model.percentage += 10;
        if (this.model.percentage &gt; 100) {
          this.model.percentage = 100;
        }
    }

    decrease() {
      this.model.percentage -= 10;
      if (this.model.percentage &lt; 0) {
        this.model.percentage = 0;
      }
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>Attributes</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>参数</th>
                    <th>说明</th>
                    <th>类型</th>
                    <th>可选值</th>
                    <th>默认值</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>percentage</td>
                    <td>百分比（必填）</td>
                    <td>number</td>
                    <td>0-100</td>
                    <td>0</td>
                </tr>
                <tr>
                    <td>type</td>
                    <td>进度条类型</td>
                    <td>string</td>
                    <td>line/circle/dashboard</td>
                    <td>line</td>
                </tr>
                <tr>
                    <td>class</td>
                    <td>自定义 class 样式</td>
                    <td>string</td>
                    <td>-</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>strokeWidth</td>
                    <td>进度条的宽度，单位 px</td>
                    <td>number</td>
                    <td>—</td>
                    <td>6</td>
                </tr>
                <tr>
                    <td>textInside</td>
                    <td>进度条显示文字内置在进度条内（仅 type=line 时可用）</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>status</td>
                    <td>进度条当前状态</td>
                    <td>string</td>
                    <td>success/exception/warning</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>color</td>
                    <td>进度条背景色（会覆盖 status 状态颜色）</td>
                    <td>string/function/array</td>
                    <td>—</td>
                    <td>''</td>
                </tr>
                <tr>
                    <td>width</td>
                    <td>环形进度条画布宽度（仅 type=circle 或 dashboard 时可用）</td>
                    <td>number</td>
                    <td>—</td>
                    <td>126</td>
                </tr>
                <tr>
                    <td>showText</td>
                    <td>是否显示进度条文字内容</td>
                    <td>boolean</td>
                    <td>-</td>
                    <td>true</td>
                </tr>
                <tr>
                    <td>strokeLinecap</td>
                    <td>circle/dashboard 类型路径两端的形状</td>
                    <td>string</td>
                    <td>butt/round/square</td>
                    <td>round</td>
                </tr>
                <tr>
                    <td>format</td>
                    <td>指定进度条文字内容</td>
                    <td>function(percentage)</td>
                    <td>-</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>defineBackColor</td>
                    <td>指定进度条底色（支持 hex 格式）</td>
                    <td>string</td>
                    <td>-</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>textColor</td>
                    <td>指定进度条字体颜色（支持 hex 格式）</td>
                    <td>string</td>
                    <td>-</td>
                    <td>-</td>
                </tr>
            </tbody>
        </table>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo5 from "../../components/progress/demo5.joker";
import DEMO_JOKER_demo4 from "../../components/progress/demo4.joker";
import DEMO_JOKER_demo3 from "../../components/progress/demo3.joker";
import DEMO_JOKER_demo2 from "../../components/progress/demo2.joker";
import DEMO_JOKER_demo1 from "../../components/progress/demo1.joker";
export default class extends Component {
    components = {
        BottomNav,
        DEMO_JOKER_demo5,
        DEMO_JOKER_demo4,
        DEMO_JOKER_demo3,
        DEMO_JOKER_demo2,
        DEMO_JOKER_demo1
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>