<template>
<div ref='container' class='joker-demo-container'>
<h2>Notification 通知</h2>
<p>悬浮出现在页面角落，显示全局的通知提醒消息。</p>
<h3>基本用法</h3>
<p>适用性广泛的通知栏，Notification 组件提供通知功能，提供<code>Notification</code>方法，接收一个<code>options</code>字面量参数，在最简单的情况下，你可以设置<code>title</code>字段和<code>message</code>字段，用于设置通知的标题和正文。默认情况下，经过一段时间后 Notification 组件会自动关闭，但是通过设置<code>duration</code>，可以控制关闭的时间间隔，特别的是，如果设置为<code>0</code>，则不会自动关闭。注意：<code>duration</code>接收一个<code>Number</code>，单位为毫秒，默认为<code>4500</code>。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo1)">
<pre><code class="language-html">&lt;template&gt;
    &lt;jk-button @click=&quot;open&quot;&gt;Can close automatically&lt;/jk-button&gt;
    &lt;jk-button @click=&quot;open1&quot;&gt;Will not close automatically&lt;/jk-button&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { Notification } from &quot;../../../src&quot;;
export default class extends Component {
    open() {
        Notification({ title: &quot;Prompt&quot;, message: &quot;I'm a prompt&quot; });
    }
    open1() {
        Notification({
            title: &quot;Prompt&quot;,
            message: &quot;I'm a prompt&quot;,
            duration: 0,
            onClick: () =&gt; {
                alert(&quot;You clicked me&quot;);
            }
        });
    }
}
&lt;/script&gt;
</code></pre>
</DemoContainer>
<h3>带有倾向性</h3>
<p>带有 icon，常用来显示「成功、警告、消息、错误」类的系统消息</p>
<p>Notification 组件准备了四种通知类型：<code>success</code>, <code>warning</code>, <code>info</code>, <code>error</code>。通过<code>type</code>字段来设置，除此以外的值将被忽略。同时，我们也为 Notification 的各种 type 注册了方法，可以在不传入<code>type</code>字段的情况下像<code>open3</code>和<code>open4</code>那样直接调用。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo2)">
<pre><code class="language-html">&lt;template&gt;
    &lt;jk-button @click=&quot;open1&quot;&gt;Success&lt;/jk-button&gt;
    &lt;jk-button @click=&quot;open2&quot;&gt;Warning&lt;/jk-button&gt;
    &lt;jk-button @click=&quot;open3&quot;&gt;Info&lt;/jk-button&gt;
    &lt;jk-button @click=&quot;open4&quot;&gt;Error&lt;/jk-button&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { Notification } from &quot;../../../src&quot;;
export default class extends Component {
    open1() {
        Notification({
            type: &quot;success&quot;,
            title: &quot;Prompt&quot;,
            message: &quot;I'm a prompt&quot;
        });
    }
    open2() {
        Notification({
            type: &quot;warning&quot;,
            title: &quot;Prompt&quot;,
            message: &quot;I'm a prompt&quot;
        });
    }
    open3() {
        Notification.info({
            title: &quot;Prompt&quot;,
            message: &quot;I'm a prompt&quot;
        });
    }
    open4() {
        Notification.error({
            title: &quot;Prompt&quot;,
            message: &quot;I'm a prompt&quot;
        });
    }
}
&lt;/script&gt;
</code></pre>
</DemoContainer>
<h3>自定义弹出位置</h3>
<p>可以让 Notification 从屏幕四角中的任意一角弹出，使用<code>position</code>属性定义 Notification 的弹出位置，支持四个选项：<code>top-right</code>、<code>top-left</code>、<code>bottom-right</code>、<code>bottom-left</code>，默认为<code>top-right</code>。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo3)">
<pre><code class="language-html">&lt;template&gt;
    &lt;jk-button @click=&quot;open1&quot;&gt;Top right&lt;/jk-button&gt;
    &lt;jk-button @click=&quot;open2&quot;&gt;Bottom right&lt;/jk-button&gt;
    &lt;jk-button @click=&quot;open3&quot;&gt;Bottom left&lt;/jk-button&gt;
    &lt;jk-button @click=&quot;open4&quot;&gt;Top left&lt;/jk-button&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { Notification } from &quot;../../../src&quot;;
export default class extends Component {
    open1() {
        Notification({
            // Default
            position: &quot;top-right&quot;,
            title: &quot;Prompt&quot;,
            message: &quot;I'm a prompt&quot;
        });
    }
    open2() {
        Notification({
            position: &quot;bottom-right&quot;,
            title: &quot;Prompt&quot;,
            message: &quot;I'm a prompt&quot;
        });
    }
    open3() {
        Notification({
            position: &quot;bottom-left&quot;,
            title: &quot;Prompt&quot;,
            message: &quot;I'm a prompt&quot;
        });
    }
    open4() {
        Notification({
            position: &quot;top-left&quot;,
            title: &quot;Prompt&quot;,
            message: &quot;I'm a prompt&quot;
        });
    }
}
&lt;/script&gt;
</code></pre>
</DemoContainer>
<h3>带有偏移</h3>
<p>让 Notification 偏移一些位置，Notification 提供设置偏移量的功能，通过设置 <code>offset</code> 字段，可以使弹出的消息距屏幕边缘偏移一段距离。注意在同一时刻，所有的 Notification 实例应当具有一个相同的偏移量。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo4)">
<pre><code class="language-html">&lt;template&gt;
    &lt;jk-button @click=&quot;open&quot;&gt;Offset warning&lt;/jk-button&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { Notification } from &quot;../../../src&quot;;
export default class extends Component {
    open() {
        Notification({
            offset: 100,
            title: &quot;Prompt&quot;,
            message: &quot;I'm a prompt&quot;
        });
    }
}
&lt;/script&gt;
</code></pre>
</DemoContainer>
<h3>使用 HTML 片段</h3>
<p><code>message</code> 属性支持传入 HTML 片段，并将<code>useHtml</code>属性设置为 true，<code>message</code> 就会被当作 HTML 片段处理。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo5)">
<pre><code class="language-html">&lt;template&gt;
    &lt;jk-button @click=&quot;open&quot;&gt;Pop up an HTML warning&lt;/jk-button&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { Notification } from &quot;../../../src&quot;;

export default class extends Component {
    open() {
        Notification({
            title: &quot;Prompt&quot;,
            type: &quot;success&quot;,
            useHtml: true,
            message: &quot;Successfully received &lt;span style='color:red'&gt;3,000&lt;/span&gt; yuan transferred from Zhang San&quot;
        });
    }
}
&lt;/script&gt;
</code></pre>
</DemoContainer>
<div class="warning">
<p><code>message</code> 属性虽然支持传入 HTML 片段，但是在网站上动态渲染任意 HTML 是非常危险的，因为容易导致 <a href="https://en.wikipedia.org/wiki/Cross-site_scripting" target="_blank">XSS 攻击</a>。因此在 <code>useHtml</code> 打开的情况下，请确保 <code>message</code> 的内容是可信的，<strong>永远不要</strong>将用户提交的内容赋值给 <code>message</code> 属性。</p>
</div>
<blockquote>
<p>Message 提供<code>closeAll</code>方法，用于在特定业务时机去清除全部 message。</p>
</blockquote>
<h3>Options</h3>
<table class="mkd-table">
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
<th>可选值</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>title</td>
<td>标题</td>
<td>string</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>message</td>
<td>说明文字</td>
<td>string</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>useHtml</td>
<td>是否将 message 属性作为 HTML 片段处理</td>
<td>boolean</td>
<td>—</td>
<td>false</td>
</tr>
<tr>
<td>type</td>
<td>主题样式，如果不在可选值内将被忽略</td>
<td>string</td>
<td>success/warning/info/error</td>
<td>—</td>
</tr>
<tr>
<td>iconClass</td>
<td>自定义图标的类名。若设置了 <code>type</code>，则 <code>iconClass</code> 会被覆盖</td>
<td>string</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>customClass</td>
<td>自定义类名</td>
<td>string</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>duration</td>
<td>显示时间, 毫秒。设为 0 则不会自动关闭</td>
<td>number</td>
<td>—</td>
<td>4500</td>
</tr>
<tr>
<td>position</td>
<td>自定义弹出位置</td>
<td>string</td>
<td>top-right/top-left/bottom-right/bottom-left</td>
<td>top-right</td>
</tr>
<tr>
<td>closable</td>
<td>是否显示关闭按钮</td>
<td>boolean</td>
<td>—</td>
<td>true</td>
</tr>
<tr>
<td>onClose</td>
<td>关闭时的回调函数</td>
<td>function</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>onClick</td>
<td>点击 Notification 时的回调函数</td>
<td>function</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>offset</td>
<td>偏移的距离，在同一时刻，所有的 Notification 实例应当具有一个相同的偏移量</td>
<td>number</td>
<td>—</td>
<td>0</td>
</tr>
</tbody>
</table>
<h3>Methods</h3>
<p>调用 <code>Notification</code> 会返回当前 Notification 的实例。如果需要手动关闭实例，可以调用它的 <code>close</code> 方法。</p>
<table class="mkd-table">
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>close</td>
<td>关闭当前的 Notification</td>
</tr>
</tbody>
</table>

<BottomNav />
</div>
</template>
<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo5 from '../../components/notification/demo5.joker';
import DEMO_JOKER_demo4 from '../../components/notification/demo4.joker';
import DEMO_JOKER_demo3 from '../../components/notification/demo3.joker';
import DEMO_JOKER_demo2 from '../../components/notification/demo2.joker';
import DEMO_JOKER_demo1 from '../../components/notification/demo1.joker';
export default class extends Component {
components={
BottomNav,
DEMO_JOKER_demo5,
DEMO_JOKER_demo4,
DEMO_JOKER_demo3,
DEMO_JOKER_demo2,
DEMO_JOKER_demo1
}
mounted(){
let container= this.$getRef('container')?.output!;
container.querySelectorAll('pre code').forEach((el:HTMLElement) => {
        hljs.highlightElement(el);
      });
}
}
</script>