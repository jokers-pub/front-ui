<template>
    <div ref="container" class="joker-demo-container">
        <h2>Message 消息提示</h2>
        <p>常用于主动操作后的反馈提示。与 Notification 的区别是后者更多用于系统级通知的被动提醒。</p>
        <h3>基础用法</h3>
        <p>
            从顶部出现，3 秒后自动消失。在配置上与 Notification 非常类似，所以部分 options 在此不做详尽解释，文末有 options 列表，可以结合 Notification 的文档理解它们。
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo1)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-button @click=&quot;open&quot;&gt;Open the prompt&lt;/jk-button&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { Message } from &quot;../../../src&quot;;
export default class extends Component {
    open() {
        Message(&quot;This is a prompt&quot;);
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>不同状态</h3>
        <p>
            用来显示「成功、警告、消息、错误」类的操作反馈。当需要自定义更多属性时，Message 也可以接收一个对象为参数。比如，设置
            <code>type</code>
            字段可以定义不同的状态，默认为
            <code>info</code>
            。此时正文内容以
            <code>message</code>
            的值传入。
        </p>
        <blockquote>
            <p>
                目前 Message，提供了常用的 4 种跳用方法，包括
                <code>info</code>
                ,
                <code>success</code>
                ,
                <code>warning</code>
                ,
                <code>error</code>
            </p>
        </blockquote>
        <DemoContainer component="@(components.DEMO_JOKER_demo2)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-button plain @click=&quot;open1&quot;&gt;Success&lt;/jk-button&gt;
    &lt;jk-button plain @click=&quot;open2&quot;&gt;Warning&lt;/jk-button&gt;
    &lt;jk-button plain @click=&quot;open3&quot;&gt;Message&lt;/jk-button&gt;
    &lt;jk-button plain @click=&quot;open4&quot;&gt;Error&lt;/jk-button&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { Message } from &quot;../../../src&quot;;

export default class extends Component {
    open1() {
        Message({
            type: &quot;success&quot;,
            message: &quot;I'm a success prompt&quot;
        });
    }
    open2() {
        Message({
            type: &quot;warning&quot;,
            message: &quot;I'm a warning prompt&quot;
        });
    }
    open3() {
        Message({
            type: &quot;info&quot;,
            message: &quot;I'm an information prompt&quot;
        });
    }
    open4() {
        Message.error(&quot;I'm an error prompt&quot;);
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>可关闭</h3>
        <p>
            可以添加关闭按钮，默认的 Message 是不可以被人工关闭的，如果需要可手动关闭的 Message，可以使用
            <code>showClose</code>
            字段。此外，和 Notification 一样，Message 拥有可控的
            <code>duration</code>
            ，设置
            <code>0</code>
            为不会被自动关闭，默认为 3000 毫秒。
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo3)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-button plain @click=&quot;open1&quot;&gt;Success&lt;/jk-button&gt;
    &lt;jk-button plain @click=&quot;open2&quot;&gt;Warning&lt;/jk-button&gt;
    &lt;jk-button plain @click=&quot;open3&quot;&gt;Message&lt;/jk-button&gt;
    &lt;jk-button plain @click=&quot;open4&quot;&gt;Error&lt;/jk-button&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { Message } from &quot;../../../src&quot;;

export default class extends Component {
    open1() {
        Message({
            type: &quot;success&quot;,
            closable: true,
            message: &quot;I'm a success prompt&quot;
        });
    }
    open2() {
        Message({
            type: &quot;warning&quot;,
            closable: true,
            message: &quot;I'm a warning prompt&quot;
        });
    }
    open3() {
        Message({
            type: &quot;info&quot;,
            closable: true,
            message: &quot;I'm an information prompt&quot;
        });
    }
    open4() {
        Message({
            type: &quot;error&quot;,
            closable: true,
            duration: 5000,
            message: &quot;I'm an error prompt&quot;
        });
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>文字居中</h3>
        <p>
            使用
            <code>center</code>
            属性让文字水平居中。
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo4)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;jk-button @click=&quot;open&quot;&gt;Open the prompt&lt;/jk-button&gt;
    &lt;jk-button @click=&quot;open1&quot;&gt;Open multiple times in the same sequence, only show one&lt;/jk-button&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { Message } from &quot;../../../src&quot;;
export default class extends Component {
    open() {
        Message({
            center: true,
            message: &quot;This is a prompt&quot;
        });
    }

    open1() {
        for (let i = 0; i &lt; 10; i++) {
            Message({
                id: &quot;test&quot;,
                center: true,
                message: &quot;This is a prompt&quot;
            });
        }
    }
}
&lt;/script&gt;
</code></pre>
        </DemoContainer>
        <h3>使用 HTML 片段</h3>
        <p>
            将
            <code>useHtml</code>
            属性设置为 true，
            <code>message</code>
            就会被当作 HTML 片段处理。
        </p>
        <DemoContainer component="@(components.DEMO_JOKER_demo5)">
            <pre><code class="language-html">```html
&lt;template&gt;
    &lt;jk-button @click=&quot;open&quot;&gt;Open the prompt&lt;/jk-button&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;
import { Message } from &quot;../../../src&quot;;
export default class extends Component {
    open() {
        Message({
            type: &quot;success&quot;,
            message: 'Successfully transferred &lt;i style=&quot;color:red&quot;&gt;2,500&lt;/i&gt; yuan to you',
            useHtml: true
        });
    }
}
&lt;/script&gt;
</code></pre>
            <pre><code></code></pre>
        </DemoContainer>
        <div class="warning">
            <p>
                <code>message</code>
                属性虽然支持传入 HTML 片段，但是在网站上动态渲染任意 HTML 是非常危险的，因为容易导致
                <a href="https://en.wikipedia.org/wiki/Cross-site_scripting" target="_blank">XSS 攻击</a>
                。因此在
                <code>useHtml</code>
                打开的情况下，请确保
                <code>message</code>
                的内容是可信的，
                <strong>永远不要</strong>
                将用户提交的内容赋值给
                <code>message</code>
                属性。
            </p>
        </div>
        <blockquote>
            <p>
                Message 提供
                <code>closeAll</code>
                方法，用于在特定业务时机去清除全部 message。
            </p>
        </blockquote>
        <h3>Options</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>参数</th>
                    <th>说明</th>
                    <th>类型</th>
                    <th>可选值</th>
                    <th>默认值</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>message</td>
                    <td>消息文字</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>type</td>
                    <td>主题</td>
                    <td>string</td>
                    <td>success/warning/info/error</td>
                    <td>info</td>
                </tr>
                <tr>
                    <td>iconClass</td>
                    <td>
                        自定义图标的类名，会覆盖
                        <code>type</code>
                    </td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>useHtml</td>
                    <td>是否将 message 属性作为 HTML 片段处理</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>customClass</td>
                    <td>自定义类名</td>
                    <td>string</td>
                    <td>—</td>
                    <td>—</td>
                </tr>
                <tr>
                    <td>duration</td>
                    <td>显示时间, 毫秒。设为 0 则不会自动关闭</td>
                    <td>number</td>
                    <td>—</td>
                    <td>3000</td>
                </tr>
                <tr>
                    <td>closable</td>
                    <td>是否显示关闭按钮</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>center</td>
                    <td>文字是否居中</td>
                    <td>boolean</td>
                    <td>—</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>offset</td>
                    <td>Message 距离窗口顶部的偏移量</td>
                    <td>number</td>
                    <td>—</td>
                    <td>20</td>
                </tr>
            </tbody>
        </table>
        <h3>Methods</h3>
        <p>
            调用
            <code>Message</code>
            会返回当前 Message 的实例。如果需要手动关闭实例，可以调用它的
            <code>close</code>
            方法。
        </p>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>方法名</th>
                    <th>说明</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>close</td>
                    <td>关闭当前的 Message</td>
                </tr>
            </tbody>
        </table>
        <h3>Events</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>事件名</th>
                    <th>说明</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>close</td>
                    <td>关闭 Message 时触发</td>
                </tr>
            </tbody>
        </table>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo5 from "../../components/message/demo5.joker";
import DEMO_JOKER_demo4 from "../../components/message/demo4.joker";
import DEMO_JOKER_demo3 from "../../components/message/demo3.joker";
import DEMO_JOKER_demo2 from "../../components/message/demo2.joker";
import DEMO_JOKER_demo1 from "../../components/message/demo1.joker";
export default class extends Component {
    components = {
        BottomNav,
        DEMO_JOKER_demo5,
        DEMO_JOKER_demo4,
        DEMO_JOKER_demo3,
        DEMO_JOKER_demo2,
        DEMO_JOKER_demo1
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>