<template>
<div ref='container' class='joker-demo-container'>
<h2>Carousel 走马灯</h2>
<p>在有限空间内，循环播放同一类型的图片、文字等内容。</p>
<h3>基础用法</h3>
<p>适用广泛的基础用法。</p>
<p>结合使用 jk-carousel 和 jk-carousel-item 标签就得到了一个走马灯。幻灯片的内容是任意的，需要放在 jk-carousel-item 标签中。默认情况下，在鼠标 hover 底部的指示器时就会触发切换。通过设置 trigger 属性为 click，可以达到点击触发的效果。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo1)">
<pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;carouselDemo1&quot;&gt;
        &lt;span class=&quot;demonstration&quot;&gt;Default: Trigger on Hover&lt;/span&gt;
        &lt;jk-carousel height=&quot;150px&quot;&gt;
            @for(let item of model.list) {
                &lt;jk-carousel-item&gt;
                    &lt;div class=&quot;item small&quot;&gt;
                        @item
                    &lt;/div&gt;
                &lt;/jk-carousel-item&gt;
            }
        &lt;/jk-carousel&gt;
    &lt;/div&gt;
    &lt;div class=&quot;carouselDemo1&quot;&gt;
        &lt;span class=&quot;demonstration&quot;&gt;Trigger on Click&lt;/span&gt;
        &lt;jk-carousel trigger=&quot;click&quot; height=&quot;150px&quot;&gt;
            @for(let item of model.list) {
                &lt;jk-carousel-item&gt;
                    &lt;div class=&quot;item small&quot;&gt;
                        @item
                    &lt;/div&gt;
                &lt;/jk-carousel-item&gt;
            }
        &lt;/jk-carousel&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        list: [1, 2, 3, 4]
    };
}
&lt;/script&gt;
&lt;style lang=&quot;scss&quot;&gt;
.carouselDemo1 {
    padding: 30px;
    text-align: center;
    border-right: 1px solid #eff2f6;
    display: inline-block;
    width: 49%;
    box-sizing: border-box;
    .demonstration {
        display: block;
        color: #8492a6;
        font-size: 14px;
        margin-bottom: 20px;
    }
    .jk-carousel-item .item {
        color: #475669;
        font-size: 14px;
        opacity: 0.75;
        line-height: 150px;
        margin: 0;
    }

    .jk-carousel-item:nth-child(2n) {
        background-color: #99a9bf;
    }

    .jk-carousel-item:nth-child(2n + 1) {
        background-color: #d3dce6;
    }
}
&lt;/style&gt;
</code></pre>
</DemoContainer>
<h3>指示器</h3>
<p>可以将指示器的显示位置设置在容器外部</p>
<p>indicatorPosition 属性定义了指示器的位置。默认情况下，它会显示在走马灯内部，设置为 outside 则会显示在外部；设置为 none 则不会显示指示器。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo2)">
<pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;carouselDemo2&quot;&gt;
        &lt;jk-carousel indicatorPosition=&quot;outside&quot;&gt;
            @for(let item of model.list) {
                &lt;jk-carousel-item&gt;
                    &lt;div class=&quot;item small&quot;&gt;
                        @item
                    &lt;/div&gt;
                &lt;/jk-carousel-item&gt;
            }
        &lt;/jk-carousel&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = { list: [1, 2, 3, 4] };
}
&lt;/script&gt;

&lt;style lang=&quot;scss&quot;&gt;
.carouselDemo2 {
    text-align: center;
    display: inline-block;
    width: 100%;
    box-sizing: border-box;
    .jk-carousel-item .item {
        color: #475669;
        font-size: 18px;
        opacity: 0.75;
        line-height: 300px;
        margin: 0;
    }

    .jk-carousel-item:nth-child(2n) {
        background-color: #99a9bf;
    }

    .jk-carousel-item:nth-child(2n + 1) {
        background-color: #d3dce6;
    }
}
&lt;/style&gt;
</code></pre>
</DemoContainer>
<h3>切换箭头</h3>
<p>可以设置切换箭头的显示时机</p>
<p>arrow 属性定义了切换箭头的显示时机。默认情况下，切换箭头只有在鼠标 hover 到走马灯上时才会显示；若将 arrow 设置为 always，则会一直显示；设置为 never，则会一直隐藏。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo3)">
<pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;carouselDemo3&quot;&gt;
        &lt;jk-carousel interval=&quot;5000&quot; arrow=&quot;always&quot;&gt;
            @for(let item of model.list) {
                &lt;jk-carousel-item&gt;
                    &lt;div class=&quot;item small&quot;&gt;
                        @item
                    &lt;/div&gt;
                &lt;/jk-carousel-item&gt;
            }
        &lt;/jk-carousel&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = { list: [1, 2, 3, 4] };
}
&lt;/script&gt;

&lt;style lang=&quot;scss&quot;&gt;
.carouselDemo3 {
    text-align: center;
    display: inline-block;
    width: 100%;
    box-sizing: border-box;
    .jk-carousel-item .item {
        color: #475669;
        font-size: 18px;
        opacity: 0.75;
        line-height: 300px;
        margin: 0;
    }

    .jk-carousel-item:nth-child(2n) {
        background-color: #99a9bf;
    }

    .jk-carousel-item:nth-child(2n + 1) {
        background-color: #d3dce6;
    }
}
&lt;/style&gt;
</code></pre>
</DemoContainer>
<h3>卡片化</h3>
<p>当页面宽度方向空间空余，但高度方向空间匮乏时，可使用卡片风格</p>
<p>将 type 属性设置为 card 即可启用卡片模式。从交互上来说，卡片模式和一般模式的最大区别在于，可以通过直接点击两侧的幻灯片进行切换。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo4)">
<pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;carouselDemo4&quot;&gt;
        &lt;jk-carousel interval=&quot;4000&quot; type=&quot;card&quot; height=&quot;200px&quot;&gt;
            @for(let item of model.list) {
                &lt;jk-carousel-item&gt;
                    &lt;div class=&quot;item small&quot;&gt;
                        @item
                    &lt;/div&gt;
                &lt;/jk-carousel-item&gt;
            }
        &lt;/jk-carousel&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = { list: [1, 2, 3, 4, 5, 6] };
}
&lt;/script&gt;

&lt;style lang=&quot;scss&quot;&gt;
.carouselDemo4 {
    text-align: center;
    display: inline-block;
    width: 100%;
    box-sizing: border-box;
    .jk-carousel-item .item {
        color: #475669;
        font-size: 14px;
        opacity: 0.75;
        line-height: 200px;
        margin: 0;
    }

    .jk-carousel-item:nth-child(2n) {
        background-color: #99a9bf;
    }

    .jk-carousel-item:nth-child(2n + 1) {
        background-color: #d3dce6;
    }
}
&lt;/style&gt;
</code></pre>
</DemoContainer>
<h3>方向</h3>
<p>默认情况下，direction 为 horizontal。通过设置 direction 为 vertical 来让走马灯在垂直方向上显示。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo5)">
<pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;carouselDemo5&quot;&gt;
        &lt;jk-carousel height=&quot;200px&quot; direction=&quot;vertical&quot; autoplay=&quot;@false&quot;&gt;
            @for(let item of model.list) {
                &lt;jk-carousel-item&gt;
                    &lt;div class=&quot;item small&quot;&gt;
                        @item
                    &lt;/div&gt;
                &lt;/jk-carousel-item&gt;
            }
        &lt;/jk-carousel&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = { list: [1, 2, 3] };
}
&lt;/script&gt;

&lt;style lang=&quot;scss&quot;&gt;
.carouselDemo5 {
    text-align: center;
    display: inline-block;
    width: 100%;
    box-sizing: border-box;
    .jk-carousel-item .item {
        color: #475669;
        font-size: 14px;
        opacity: 0.75;
        line-height: 200px;
        margin: 0;
    }

    .jk-carousel-item:nth-child(2n) {
        background-color: #99a9bf;
    }

    .jk-carousel-item:nth-child(2n + 1) {
        background-color: #d3dce6;
    }
}
&lt;/style&gt;
</code></pre>
</DemoContainer>
<h3>Carousel Attributes</h3>
<table class="mkd-table">
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
<th>可选值</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>height</td>
<td>走马灯的高度</td>
<td>string</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>class</td>
<td>自定义 class 样式</td>
<td>string</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>initialIndex</td>
<td>初始状态激活的幻灯片的索引，从 0 开始</td>
<td>number</td>
<td>—</td>
<td>0</td>
</tr>
<tr>
<td>trigger</td>
<td>指示器的触发方式</td>
<td>string</td>
<td>click</td>
<td>-</td>
</tr>
<tr>
<td>autoplay</td>
<td>是否自动切换</td>
<td>boolean</td>
<td>—</td>
<td>true</td>
</tr>
<tr>
<td>interval</td>
<td>自动切换的时间间隔，单位为毫秒</td>
<td>number</td>
<td>-</td>
<td>3000</td>
</tr>
<tr>
<td>indicatorPosition</td>
<td>指示器的位置</td>
<td>string</td>
<td>outside/none</td>
<td>—</td>
</tr>
<tr>
<td>arrow</td>
<td>切换箭头的显示时机</td>
<td>string</td>
<td>always/hover/never</td>
<td>hover</td>
</tr>
<tr>
<td>type</td>
<td>走马灯的类型</td>
<td>string</td>
<td>card</td>
<td>-</td>
</tr>
<tr>
<td>loop</td>
<td>是否循环显示</td>
<td>boolean</td>
<td>-</td>
<td>true</td>
</tr>
<tr>
<td>direction</td>
<td>走马灯展示的方向</td>
<td>string</td>
<td>horizontal/vertical</td>
<td>horizontal</td>
</tr>
</tbody>
</table>
<h3>Carousel Events</h3>
<table class="mkd-table">
<thead>
<tr>
<th>事件名称</th>
<th>说明</th>
<th>回调参数</th>
</tr>
</thead>
<tbody>
<tr>
<td>change</td>
<td>幻灯片切换时触发</td>
<td>目前激活的幻灯片的索引，原幻灯片的索引</td>
</tr>
</tbody>
</table>
<h3>Carousel Methods</h3>
<table class="mkd-table">
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>参数</th>
</tr>
</thead>
<tbody>
<tr>
<td>setActiveItem</td>
<td>手动切换幻灯片</td>
<td>需要切换的幻灯片的索引，从 0 开始；或相应 jk-carousel-item 的 name 属性值</td>
</tr>
<tr>
<td>prev</td>
<td>切换至上一张幻灯片</td>
<td>-</td>
</tr>
<tr>
<td>next</td>
<td>切换至下一张幻灯片</td>
<td>-</td>
</tr>
</tbody>
</table>
<h3>Carousel-item Attributes</h3>
<table class="mkd-table">
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
<th>可选值</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>幻灯片的名字，可用作 setActiveItem 的参数</td>
<td>string</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>label</td>
<td>该幻灯片所对应指示器的文本</td>
<td>string</td>
<td>—</td>
<td>—</td>
</tr>
</tbody>
</table>

<BottomNav />
</div>
</template>
<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo5 from '../../components/carousel/demo5.joker';
import DEMO_JOKER_demo4 from '../../components/carousel/demo4.joker';
import DEMO_JOKER_demo3 from '../../components/carousel/demo3.joker';
import DEMO_JOKER_demo2 from '../../components/carousel/demo2.joker';
import DEMO_JOKER_demo1 from '../../components/carousel/demo1.joker';
export default class extends Component {
components={
BottomNav,
DEMO_JOKER_demo5,
DEMO_JOKER_demo4,
DEMO_JOKER_demo3,
DEMO_JOKER_demo2,
DEMO_JOKER_demo1
}
mounted(){
let container= this.$getRef('container')?.output!;
container.querySelectorAll('pre code').forEach((el:HTMLElement) => {
        hljs.highlightElement(el);
      });
}
}
</script>