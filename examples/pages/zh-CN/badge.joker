<template>
    <div ref="container" class="joker-demo-container">
        <h2>Badge 标记</h2>
        <p>出现在按钮、图标旁的数字或状态标记。</p>
        <h3>基础用法</h3>
        <p>展示新消息数量。</p>
        <p>定义 value 属性，它接受 Number 或者 String。</p>
        <DemoContainer component="@(components.DEMO_JOKER_demo1)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;jk-badge value=&quot;12&quot;&gt;
            &lt;jk-button size=&quot;small&quot;&gt;Comments&lt;/jk-button&gt;
        &lt;/jk-badge&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;jk-badge value=&quot;3&quot;&gt;
            &lt;jk-button size=&quot;small&quot;&gt;Replies&lt;/jk-button&gt;
        &lt;/jk-badge&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;jk-badge value=&quot;1&quot; type=&quot;primary&quot;&gt;
            &lt;jk-button size=&quot;small&quot;&gt;Comments&lt;/jk-button&gt;
        &lt;/jk-badge&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;jk-badge value=&quot;2&quot; type=&quot;warning&quot;&gt;
            &lt;jk-button size=&quot;small&quot;&gt;Replies&lt;/jk-button&gt;
        &lt;/jk-badge&gt;
    &lt;/div&gt;
&lt;/template&gt;

&lt;style scoped&gt;
.item {
    display: inline-block;
    margin-right: 40px;
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>最大值</h3>
        <p>可自定义最大值。</p>
        <p>由 max 属性定义，它接受一个 Number，需要注意的是，只有当 value 为 Number 时，它才会生效。</p>
        <DemoContainer component="@(components.DEMO_JOKER_demo2)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;jk-badge value=&quot;@(200)&quot; max=&quot;@(99)&quot;&gt;
            &lt;jk-button size=&quot;small&quot;&gt;Comments&lt;/jk-button&gt;
        &lt;/jk-badge&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;jk-badge value=&quot;@(100)&quot; max=&quot;@(10)&quot;&gt;
            &lt;jk-button size=&quot;small&quot;&gt;Replies&lt;/jk-button&gt;
        &lt;/jk-badge&gt;
    &lt;/div&gt;
&lt;/template&gt;

&lt;style scoped&gt;
.item {
    display: inline-block;
    margin-right: 40px;
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>自定义内容</h3>
        <p>可以显示数字以外的文本内容。</p>
        <p>定义 value 为 String 类型是时可以用于显示自定义文本。</p>
        <DemoContainer component="@(components.DEMO_JOKER_demo3)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;jk-badge value=&quot;new&quot;&gt;
            &lt;jk-button size=&quot;small&quot;&gt;Comments&lt;/jk-button&gt;
        &lt;/jk-badge&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;jk-badge value=&quot;hot&quot;&gt;
            &lt;jk-button size=&quot;small&quot;&gt;Replies&lt;/jk-button&gt;
        &lt;/jk-badge&gt;
    &lt;/div&gt;
&lt;/template&gt;

&lt;style scoped&gt;
.item {
    display: inline-block;
    margin-right: 40px;
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>小红点</h3>
        <p>以红点的形式标注需要关注的内容。</p>
        <p>除了数字外，设置 is-dot 属性，它接受一个 Boolean。</p>
        <DemoContainer component="@(components.DEMO_JOKER_demo4)">
            <pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;jk-badge isDot&gt;Data Query&lt;/jk-badge&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;
        &lt;jk-badge isDot&gt;
            &lt;jk-button type=&quot;primary&quot; icon=&quot;jk-icon-share&quot;&gt;&lt;/jk-button&gt;
        &lt;/jk-badge&gt;
    &lt;/div&gt;
&lt;/template&gt;

&lt;style scoped&gt;
.item {
    display: inline-block;
    margin-right: 40px;
}
&lt;/style&gt;
</code></pre>
        </DemoContainer>
        <h3>Attributes</h3>
        <table class="mkd-table">
            <thead>
                <tr>
                    <th>参数</th>
                    <th>说明</th>
                    <th>类型</th>
                    <th>可选值</th>
                    <th>默认值</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>value</td>
                    <td>显示值</td>
                    <td>string/number</td>
                    <td>-</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>max</td>
                    <td>
                        最大值，超过最大值会显示 '{max}+'，要求 value 是 Number 类型
                    </td>
                    <td>number</td>
                    <td>-</td>
                    <td>-</td>
                </tr>
                <tr>
                    <td>isDot</td>
                    <td>小圆点</td>
                    <td>boolean</td>
                    <td>-</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>hidden</td>
                    <td>隐藏 badge</td>
                    <td>boolean</td>
                    <td>-</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>type</td>
                    <td>类型</td>
                    <td>string</td>
                    <td>primary / success / warning / danger / info</td>
                    <td>-</td>
                </tr>
            </tbody>
        </table>
        <BottomNav />
    </div>
</template>

<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../common/components/bottom-nav.joker";
import DEMO_JOKER_demo4 from "../../components/badge/demo4.joker";
import DEMO_JOKER_demo3 from "../../components/badge/demo3.joker";
import DEMO_JOKER_demo2 from "../../components/badge/demo2.joker";
import DEMO_JOKER_demo1 from "../../components/badge/demo1.joker";
export default class extends Component {
    components = {
        BottomNav,
        DEMO_JOKER_demo4,
        DEMO_JOKER_demo3,
        DEMO_JOKER_demo2,
        DEMO_JOKER_demo1
    };
    mounted() {
        let container = this.$getRef("container")?.output!;
        container.querySelectorAll("pre code").forEach((el: HTMLElement) => {
            hljs.highlightElement(el);
        });
    }
}

</script>