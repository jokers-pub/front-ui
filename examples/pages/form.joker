<template>
<div ref='container' class='joker-demo-container'>
<h2>Form 表单</h2>
<p>用于提供表单数据收集、校验、提交等交互功能的组件。</p>
<h3>典型表单</h3>
<p>包括各种表单项，比如输入框、选择器、开关、单选框、多选框等。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo1)">
<pre><code class="language-html">&lt;template&gt;
    &lt;jk-form ref=&quot;form&quot; label-width=&quot;100px&quot; @submit=&quot;handleFormSubmit&quot;&gt;
        &lt;jk-form-item label=&quot;活动名称&quot;&gt;
            &lt;jk-input name=&quot;name&quot; placeholder=&quot;请输入活动名称&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动区域&quot; tip=&quot;测试数据，请理解&quot;&gt;
            &lt;jk-select name=&quot;area&quot; placeholder=&quot;请选择活动区域&quot;&gt;
                &lt;jk-option label=&quot;山东&quot; value=&quot;shandong&quot; /&gt;
                &lt;jk-option label=&quot;北京&quot; value=&quot;beijing&quot; /&gt;
            &lt;/jk-select&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动时间&quot;&gt;
            &lt;jk-date-picker
                name=&quot;date&quot;
                type=&quot;daterange&quot;
                range-separator=&quot;至&quot;
                startPlaceholder=&quot;开始日期&quot;
                endPlaceholder=&quot;结束日期&quot;&gt;&lt;/jk-date-picker&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;推广&quot;&gt;
            &lt;jk-switch name=&quot;promotion&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动性质&quot;&gt;
            &lt;jk-checkbox-group name=&quot;type&quot;&gt;
                &lt;jk-checkbox label=&quot;美食/餐厅线上活动&quot;&gt;&lt;/jk-checkbox&gt;
                &lt;jk-checkbox label=&quot;线下活动&quot;&gt;&lt;/jk-checkbox&gt;
                &lt;jk-checkbox label=&quot;自驾游&quot;&gt;&lt;/jk-checkbox&gt;
                &lt;jk-checkbox label=&quot;发布会&quot;&gt;&lt;/jk-checkbox&gt;
                &lt;jk-checkbox label=&quot;跟团出行&quot;&gt;&lt;/jk-checkbox&gt;
            &lt;/jk-checkbox-group&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;资金来源&quot;&gt;
            &lt;jk-radio-group name=&quot;source&quot;&gt;
                &lt;jk-radio value=&quot;1&quot;&gt;品牌商赞助&lt;/jk-radio&gt;
                &lt;jk-radio value=&quot;2&quot;&gt;线下场地免费&lt;/jk-radio&gt;
                &lt;jk-radio value=&quot;3&quot;&gt;费用均摊&lt;/jk-radio&gt;
            &lt;/jk-radio-group&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;资金比例&quot;&gt;
            &lt;jk-slider name=&quot;sourcePic&quot; value=&quot;30&quot;&gt;&lt;/jk-slider&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动要则&quot;&gt;
            &lt;jk-textarea name=&quot;note&quot; placeholder=&quot;请输入内容&quot; rows=&quot;2&quot;&gt;&lt;/jk-textarea&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item&gt;
            &lt;jk-button type=&quot;primary&quot; nativeType=&quot;submit&quot;&gt;提交&lt;/jk-button&gt;
        &lt;/jk-form-item&gt;
    &lt;/jk-form&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;

export default class extends Component {
    handleFormSubmit(e: VNode.Event&lt;any&gt;) {
        let form = (e.target as VNode.Component)?.component;
        console.log(e.data);
    }
}
&lt;/script&gt;
</code></pre>
</DemoContainer>
<h3>行内表单</h3>
<p>设置为<code>inline</code>属性可以让表单变成行内表单，当垂直空间受限且表单较简单时，可以使用行内表单。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo2)">
<pre><code class="language-html">&lt;template&gt;
    &lt;jk-form inline&gt;
        &lt;jk-form-item label=&quot;活动名称&quot;&gt;
            &lt;jk-input name=&quot;name&quot; placeholder=&quot;请输入活动名称&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动区域&quot;&gt;
            &lt;jk-select name=&quot;area&quot; placeholder=&quot;请选择活动区域&quot;&gt;
                &lt;jk-option label=&quot;山东&quot; value=&quot;shandong&quot; /&gt;
                &lt;jk-option label=&quot;北京&quot; value=&quot;beijing&quot; /&gt;
            &lt;/jk-select&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动时间&quot;&gt;
            &lt;jk-date-picker
                name=&quot;date&quot;
                type=&quot;daterange&quot;
                range-separator=&quot;至&quot;
                startPlaceholder=&quot;开始日期&quot;
                endPlaceholder=&quot;结束日期&quot;&gt;&lt;/jk-date-picker&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item&gt;
            &lt;jk-button type=&quot;primary&quot;&gt;查询&lt;/jk-button&gt;
        &lt;/jk-form-item&gt;
    &lt;/jk-form&gt;
&lt;/template&gt;

</code></pre>
</DemoContainer>
<h3>文本对齐方式</h3>
<p>可以通过<code>label-position</code>属性来设置标题对齐方式，目前支持：<code>top</code>、<code>left</code>，当设置为<code>top</code>时标题会置于表单项顶部。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo3)">
<pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-radio-group value=&quot;@model.labelPosition&quot; @change=&quot;handleRadioChange&quot;&gt;
            &lt;jk-radio-button value=&quot;left&quot;&gt;左对齐&lt;/jk-radio-button&gt;
            &lt;jk-radio-button value=&quot;right&quot;&gt;右对齐&lt;/jk-radio-button&gt;
            &lt;jk-radio-button value=&quot;top&quot;&gt;顶部对齐&lt;/jk-radio-button&gt;
        &lt;/jk-radio-group&gt;
    &lt;/DemoRow&gt;
    &lt;jk-form label-position=&quot;@model.labelPosition&quot;&gt;
        &lt;jk-form-item label=&quot;名称&quot;&gt;
            &lt;jk-input name=&quot;name&quot; placeholder=&quot;请输入活动名称&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;区域&quot;&gt;
            &lt;jk-select name=&quot;area&quot; placeholder=&quot;请选择活动区域&quot;&gt;
                &lt;jk-option label=&quot;山东&quot; value=&quot;shandong&quot; /&gt;
                &lt;jk-option label=&quot;北京&quot; value=&quot;beijing&quot; /&gt;
            &lt;/jk-select&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;时间&quot;&gt;
            &lt;jk-date-picker
                name=&quot;date&quot;
                type=&quot;daterange&quot;
                range-separator=&quot;至&quot;
                startPlaceholder=&quot;开始日期&quot;
                endPlaceholder=&quot;结束日期&quot;&gt;&lt;/jk-date-picker&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item&gt;
            &lt;jk-button type=&quot;primary&quot;&gt;查询&lt;/jk-button&gt;
        &lt;/jk-form-item&gt;
    &lt;/jk-form&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        labelPosition: &quot;right&quot;
    };

    handleRadioChange(e: VNode.Event&lt;string&gt;) {
        this.model.labelPosition = e.data;
    }
}
&lt;/script&gt;
</code></pre>
</DemoContainer>
<h3>表单验证</h3>
<p>Form 组件提供了表单验证的功能，内部提供了基础的验证方法，可通过添加<code>validate</code>来配置验证规则。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo4)">
<pre><code class="language-html">&lt;template&gt;
    &lt;jk-form ref=&quot;form&quot; @submit=&quot;handleFormSubmit&quot;&gt;
        &lt;jk-form-item label=&quot;活动名称&quot; required&gt;
            &lt;jk-input name=&quot;name&quot; validate=&quot;@Global.isRequired()&quot; placeholder=&quot;请输入活动名称&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动区域&quot; required&gt;
            &lt;jk-select name=&quot;area&quot; validate=&quot;@Global.isRequired()&quot; placeholder=&quot;请选择活动区域&quot;&gt;
                &lt;jk-option label=&quot;山东&quot; value=&quot;shandong&quot; /&gt;
                &lt;jk-option label=&quot;北京&quot; value=&quot;beijing&quot; /&gt;
            &lt;/jk-select&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动时间&quot; required&gt;
            &lt;jk-date-picker
                name=&quot;date&quot;
                validate=&quot;@Global.isRequired('请选择活动时间')&quot;
                type=&quot;daterange&quot;
                range-separator=&quot;至&quot;
                startPlaceholder=&quot;开始日期&quot;
                endPlaceholder=&quot;结束日期&quot;&gt;&lt;/jk-date-picker&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;审核时间&quot; required&gt;
            &lt;jk-date-picker
                name=&quot;examineDate&quot;
                validate=&quot;@Global.isRequired()&quot;
                placeholder=&quot;请选择审核时间&quot;&gt;&lt;/jk-date-picker&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;组织者&quot; required&gt;
            &lt;jk-col span=&quot;8&quot;&gt;
                &lt;jk-form-item labelWidth=&quot;0&quot;&gt;
                    &lt;jk-select name=&quot;organization&quot; validate=&quot;@Global.isRequired()&quot; placeholder=&quot;请选择组织&quot;&gt;
                        &lt;jk-option label=&quot;北部大区&quot; value=&quot;01&quot;&gt;&lt;/jk-option&gt;
                        &lt;jk-option label=&quot;南部大区&quot; value=&quot;02&quot;&gt;&lt;/jk-option&gt;
                    &lt;/jk-select&gt;
                &lt;/jk-form-item&gt;
            &lt;/jk-col&gt;
            &lt;jk-col span=&quot;1&quot;&gt;-&lt;/jk-col&gt;
            &lt;jk-col span=&quot;15&quot;&gt;
                &lt;jk-form-item labelWidth=&quot;0&quot;&gt;
                    &lt;jk-select name=&quot;userName&quot; validate=&quot;@Global.isRequired()&quot; placeholder=&quot;请选择用户&quot;&gt;
                        &lt;jk-option label=&quot;张三&quot; value=&quot;01&quot;&gt;&lt;/jk-option&gt;
                        &lt;jk-option label=&quot;李四&quot; value=&quot;02&quot;&gt;&lt;/jk-option&gt;
                    &lt;/jk-select&gt;
                &lt;/jk-form-item&gt;
            &lt;/jk-col&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;推广&quot;&gt;
            &lt;jk-switch name=&quot;promotion&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;参与人数&quot;&gt;
            &lt;jk-number name=&quot;userCount&quot; size=&quot;small&quot; placeholder=&quot;请设置人数&quot; validate=&quot;@Global.isRequired()&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动性质&quot; required&gt;
            &lt;jk-checkbox-group name=&quot;type&quot; validate=&quot;@Global.isRequired('请选择活动性质')&quot;&gt;
                &lt;jk-checkbox label=&quot;美食/餐厅线上活动&quot;&gt;&lt;/jk-checkbox&gt;
                &lt;jk-checkbox label=&quot;线下活动&quot;&gt;&lt;/jk-checkbox&gt;
                &lt;jk-checkbox label=&quot;自驾游&quot;&gt;&lt;/jk-checkbox&gt;
                &lt;jk-checkbox label=&quot;发布会&quot;&gt;&lt;/jk-checkbox&gt;
                &lt;jk-checkbox label=&quot;跟团出行&quot;&gt;&lt;/jk-checkbox&gt;
            &lt;/jk-checkbox-group&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;资金来源&quot; required&gt;
            &lt;jk-radio-group name=&quot;source&quot; validate=&quot;@Global.isRequired('请选择资金来源')&quot;&gt;
                &lt;jk-radio value=&quot;1&quot;&gt;品牌商赞助&lt;/jk-radio&gt;
                &lt;jk-radio value=&quot;2&quot;&gt;线下场地免费&lt;/jk-radio&gt;
                &lt;jk-radio value=&quot;3&quot;&gt;费用均摊&lt;/jk-radio&gt;
            &lt;/jk-radio-group&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动要则&quot; required&gt;
            &lt;jk-textarea
                name=&quot;note&quot;
                validate=&quot;@Global.isRequired()&quot;
                placeholder=&quot;请输入活动要则&quot;
                rows=&quot;2&quot;&gt;&lt;/jk-textarea&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item&gt;
            &lt;jk-button type=&quot;primary&quot; nativeType=&quot;submit&quot;&gt;提交&lt;/jk-button&gt;
        &lt;/jk-form-item&gt;
    &lt;/jk-form&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;

export default class extends Component {
    async handleFormSubmit(e: VNode.Event) {
        console.log(&quot;验证成功&quot;, e.data);
    }
}
&lt;/script&gt;

</code></pre>
</DemoContainer>
<blockquote>
<p>在<code>form-item</code>中配置<code>required</code>只作为是否添加<strong>星号</strong>展示用途，本身不做任何验证操作。</p>
</blockquote>
<h3>内置规则</h3>
<p>内部提供了常用的校验规则，使用<code>validate</code>来进行配置。</p>
<table class="mkd-table">
<thead>
<tr>
<th>规则</th>
<th>说明</th>
<th>值说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Global.isRequired(msg)</code></td>
<td>非空校验</td>
<td>可通过该属性配置错误信息，若未设置则按照<code>placeholder</code>进行错误提示</td>
</tr>
<tr>
<td><code>Global.isInt(msg)</code></td>
<td>正整数校验</td>
<td>错误提示</td>
</tr>
<tr>
<td><code>Global.isNumber(msg)</code></td>
<td>数值校验</td>
<td>错误提示</td>
</tr>
<tr>
<td><code>Global.isPhone(msg)</code></td>
<td>手机号格式校验</td>
<td>错误提示</td>
</tr>
<tr>
<td><code>Global.isEmail(msg)</code></td>
<td>邮箱格式校验</td>
<td>错误提示</td>
</tr>
<tr>
<td><code>Global.isMatched(regex,msg)</code></td>
<td>自定义正则校验</td>
<td>{pattern:string,msg:string}，其中<code>pattern</code>为必填项，用于配置正则规则，<code>msg</code>为错误提示</td>
</tr>
<tr>
<td><code>Global.isLengthInRange(min,max,msg)</code></td>
<td>长度校验</td>
<td><code>（最小值,最大值,错误信息）</code>：可通过数组的方式来设置最大值和最小值</td>
</tr>
</tbody>
</table>
<DemoContainer component="@(components.DEMO_JOKER_demo5)">
<pre><code class="language-html">&lt;template&gt;
    &lt;jk-form ref=&quot;form&quot; labelWidth=&quot;100px&quot; @submit=&quot;handleFormSubmit&quot;&gt;
        &lt;jk-form-item label=&quot;必填验证&quot; required&gt;
            &lt;jk-input name=&quot;v1&quot; validate=&quot;@Global.isRequired()&quot; placeholder=&quot;请输入内容&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;必填验证&quot; required&gt;
            &lt;jk-select name=&quot;v2&quot; validate=&quot;@Global.isRequired()&quot; placeholder=&quot;请选择活动区域&quot;&gt;
                &lt;jk-option label=&quot;山东&quot; value=&quot;shandong&quot; /&gt;
                &lt;jk-option label=&quot;北京&quot; value=&quot;beijing&quot; /&gt;
            &lt;/jk-select&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;正整数验证&quot;&gt;
            &lt;jk-input name=&quot;v3&quot; validate=&quot;@Global.isInt()&quot; placeholder=&quot;请输入内容&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;数值验证&quot;&gt;
            &lt;jk-input name=&quot;v4&quot; validate=&quot;@Global.isNumber()&quot; placeholder=&quot;请输入内容&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;手机号验证&quot;&gt;
            &lt;jk-input name=&quot;v5&quot; validate=&quot;@Global.isPhone()&quot; placeholder=&quot;请输入内容&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;邮箱验证&quot;&gt;
            &lt;jk-input name=&quot;v6&quot; validate=&quot;@Global.isEmail()&quot; placeholder=&quot;请输入内容&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;正则&quot;&gt;
            &lt;jk-input name=&quot;v7&quot; validate=&quot;@Global.isMatched('^\\d+$','请输入0-9的数')&quot; placeholder=&quot;请输入内容&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;长度&quot;&gt;
            &lt;jk-input name=&quot;v8&quot; validate=&quot;@Global.isLengthInRange(3,5)&quot; placeholder=&quot;请输入内容&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;长度&quot;&gt;
            &lt;jk-input name=&quot;v9&quot; validate=&quot;@Global.isLengthInRange(0,5)&quot; placeholder=&quot;请输入内容&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;长度&quot;&gt;
            &lt;jk-input name=&quot;v10&quot; validate=&quot;@Global.isLengthInRange(3,5,'请输入3-5个字')&quot; placeholder=&quot;请输入内容&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item&gt;
            &lt;jk-button type=&quot;primary&quot; nativeType=&quot;submit&quot;&gt;提交&lt;/jk-button&gt;
        &lt;/jk-form-item&gt;
    &lt;/jk-form&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;

export default class extends Component {
    async handleFormSubmit(e: VNode.Event) {
        console.log(&quot;验证成功&quot;, e.data);
    }
}
&lt;/script&gt;

</code></pre>
</DemoContainer>
<p>可通过通过<code>全局方法注册</code>来自定义校验规则。下面是一个内置的检查方法代码，可以参考</p>
<pre><code class="language-ts">registerGlobalFunction({
    isPhone: (message?: string) =&gt; {
        return (value: any) =&gt; {
            if (!value) return;
            if (value.length !== 11) {
                return message || &quot;请输入11位手机号&quot;;
            }

            if (/^1[3456789]\d{9}$/.test(value) === false) {
                return message || &quot;手机号码格式错误，请重新输入&quot;;
            }
        };
    }
});
</code></pre>
<pre><code class="language-html">&lt;input validate=&quot;@Global.isPhone()&quot; /&gt;
</code></pre>
<p>校验的规则是有顺序的：</p>
<ol>
<li><code>控件.beforeValidate()</code></li>
<li><code>控件.ctrlValidate</code></li>
<li><code>控件.props.validate(自定义校验)</code> 支持数组 多项组合校验</li>
</ol>
<h3>自定义验证</h3>
<p>可通过配置组件的<code>validate</code>参数来自定义验证规则，若验证失败返回提示信息即可，若返回值为空则代表验证成功。该方法支持异步校验。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo6)">
<pre><code class="language-html">&lt;template&gt;
    &lt;jk-form ref=&quot;form&quot; @submit=&quot;handleFormSubmit&quot;&gt;
        &lt;jk-form-item label=&quot;年龄&quot;&gt;
            &lt;jk-input
                name=&quot;age&quot;
                status-icon
                validate=&quot;@([Global.isRequired(), Global.isInt(), validateAge])&quot;
                placeholder=&quot;请输入年龄&quot;
            /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;新密码&quot;&gt;
            &lt;jk-input name=&quot;pwd&quot; ref=&quot;pwd&quot; validate=&quot;@([Global.isRequired()])&quot; placeholder=&quot;请输入新密码&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;确认密码&quot;&gt;
            &lt;jk-input
                name=&quot;confirmPwd&quot;
                validate=&quot;@([Global.isRequired(), validateConfirmPwd])&quot;
                placeholder=&quot;请输入确认密码&quot;
            /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item&gt;
            &lt;jk-button type=&quot;primary&quot; nativeType=&quot;submit&quot;&gt;提交&lt;/jk-button&gt;
        &lt;/jk-form-item&gt;
    &lt;/jk-form&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { sleep } from &quot;@joker.front/shared&quot;;

export default class extends Component {
    async validateAge(value: string) {
        //模拟请求，实现异步校验
        await sleep(1500);

        //自定义校验是最后执行，无需考虑非空 &amp;&amp; 正整数
        let age = parseInt(value);

        if (age &lt; 22) {
            return &quot;你的年龄太小了，等22岁之后再来吧&quot;;
        }

        if (age &gt; 30) {
            return &quot;你已经够成熟了，不需要再了解了&quot;;
        }
    }
    validateConfirmPwd(value) {
        let pwd = this.$getRef&lt;VNode.Component&gt;(&quot;pwd&quot;)?.component.value;

        if (pwd !== value) {
            return &quot;两次密码不一致&quot;;
        }
    }

    async handleFormSubmit(e: VNode.Event) {
        console.log(&quot;验证成功&quot;, e.data);
    }
}
&lt;/script&gt;


</code></pre>
</DemoContainer>
<blockquote>
<p>可通过<code>status-icon</code>属性在<code>input</code>组件中展示检验过程状态。</p>
</blockquote>
<h3>尺寸</h3>
<p>可通过在<code>form</code>中配置<code>size</code>属性来对整体表单控件做尺寸设置，若组件已经配置了私有<code>size</code>，则无法进行覆盖。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo7)">
<pre><code class="language-html">&lt;template&gt;
    &lt;DemoRow&gt;
        &lt;jk-radio-group value=&quot;@model.ctrlSize&quot; @change=&quot;handleRadioChange&quot;&gt;
            &lt;jk-radio-button label=&quot;&quot;&gt;default&lt;/jk-radio-button&gt;
            &lt;jk-radio-button label=&quot;medium&quot;&gt;medium&lt;/jk-radio-button&gt;
            &lt;jk-radio-button label=&quot;small&quot;&gt;small&lt;/jk-radio-button&gt;
            &lt;jk-radio-button label=&quot;mini&quot;&gt;mini&lt;/jk-radio-button&gt;
        &lt;/jk-radio-group&gt;
    &lt;/DemoRow&gt;
    &lt;jk-form ref=&quot;form&quot; size=&quot;@model.ctrlSize&quot;&gt;
        &lt;jk-form-item label=&quot;活动名称&quot;&gt;
            &lt;jk-input name=&quot;name&quot; placeholder=&quot;请输入活动名称&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动区域&quot;&gt;
            &lt;jk-select name=&quot;area&quot; placeholder=&quot;请选择活动区域&quot;&gt;
                &lt;jk-option label=&quot;山东&quot; value=&quot;shandong&quot; /&gt;
                &lt;jk-option label=&quot;北京&quot; value=&quot;beijing&quot; /&gt;
            &lt;/jk-select&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动时间&quot;&gt;
            &lt;jk-date-picker
                name=&quot;date&quot;
                type=&quot;daterange&quot;
                range-separator=&quot;至&quot;
                startPlaceholder=&quot;开始日期&quot;
                endPlaceholder=&quot;结束日期&quot;&gt;&lt;/jk-date-picker&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;推广&quot;&gt;
            &lt;jk-switch name=&quot;promotion&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;参与人数&quot;&gt;
            &lt;jk-number name=&quot;userCount&quot; placeholder=&quot;请设置人数&quot; validate=&quot;@Global.isRequired()&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动性质&quot;&gt;
            &lt;jk-checkbox-group name=&quot;type&quot;&gt;
                &lt;jk-checkbox-button label=&quot;自驾游&quot;&gt;&lt;/jk-checkbox-button&gt;
                &lt;jk-checkbox-button label=&quot;发布会&quot;&gt;&lt;/jk-checkbox-button&gt;
                &lt;jk-checkbox-button label=&quot;跟团出行&quot;&gt;&lt;/jk-checkbox-button&gt;
            &lt;/jk-checkbox-group&gt;
            &lt;div style=&quot;margin-top:5px&quot;&gt;
                &lt;jk-alert show-icon title=&quot;自驾游会产生相关费用&quot; type=&quot;info&quot;&gt;&lt;/jk-alert&gt;
            &lt;/div&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;资金来源&quot;&gt;
            &lt;jk-radio-group name=&quot;source&quot;&gt;
                &lt;jk-radio-button value=&quot;1&quot;&gt;品牌商赞助&lt;/jk-radio-button&gt;
                &lt;jk-radio-button value=&quot;2&quot;&gt;线下场地免费&lt;/jk-radio-button&gt;
                &lt;jk-radio-button value=&quot;3&quot;&gt;费用均摊&lt;/jk-radio-button&gt;
            &lt;/jk-radio-group&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;活动要则&quot;&gt;
            &lt;jk-textarea name=&quot;note&quot; placeholder=&quot;请输入内容&quot; rows=&quot;2&quot;&gt;&lt;/jk-textarea&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item&gt;
            &lt;jk-button type=&quot;primary&quot;&gt;提交&lt;/jk-button&gt;
        &lt;/jk-form-item&gt;
    &lt;/jk-form&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;

export default class extends Component {
    model = {
        ctrlSize: &quot;&quot;
    };
    handleRadioChange(e: VNode.Event&lt;string&gt;) {
        this.model.ctrlSize = e.data;
    }
}
&lt;/script&gt;
</code></pre>
</DemoContainer>
<h3>提交</h3>
<p>可以通过调用 form 中的<code>submit</code>事件实现表单的提交，值得注意的是，提交过程只包括表单的验证和表单的值获取，若校验成功后，则会通过<code>submit</code>事件来通知到调用者，并把表单数据一同返回。</p>
<DemoContainer component="@(components.DEMO_JOKER_demo8)">
<pre><code class="language-html">&lt;template&gt;
    &lt;jk-form ref=&quot;form&quot; @submit=&quot;handleFormSubmit&quot;&gt;
        &lt;jk-form-item label=&quot;年龄&quot;&gt;
            &lt;jk-input
                name=&quot;age&quot;
                status-icon
                validate=&quot;@([Global.isRequired(), Global.isInt(), validateAge])&quot;
                placeholder=&quot;请输入年龄&quot;
            /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;新密码&quot;&gt;
            &lt;jk-input name=&quot;pwd&quot; ref=&quot;pwd&quot; validate=&quot;@([Global.isRequired()])&quot; placeholder=&quot;请输入新密码&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;确认密码&quot;&gt;
            &lt;jk-input
                name=&quot;confirmPwd&quot;
                validate=&quot;@([Global.isRequired(), validateConfirmPwd])&quot;
                placeholder=&quot;请输入确认密码&quot;
            /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;区域&quot;&gt;
            &lt;jk-select name=&quot;area&quot; validate=&quot;@([Global.isRequired()])&quot; placeholder=&quot;请选择活动区域&quot;&gt;
                &lt;jk-option label=&quot;山东&quot; value=&quot;shandong&quot; /&gt;
                &lt;jk-option label=&quot;北京&quot; value=&quot;beijing&quot; /&gt;
            &lt;/jk-select&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;推广&quot;&gt;
            &lt;jk-switch name=&quot;promotion&quot; /&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;资金比例&quot;&gt;
            &lt;jk-slider name=&quot;sourcePic&quot; value=&quot;30&quot;&gt;&lt;/jk-slider&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item label=&quot;时间&quot;&gt;
            &lt;jk-date-picker
                name=&quot;date&quot;
                type=&quot;daterange&quot;
                validate=&quot;@([Global.isRequired()])&quot;
                range-separator=&quot;至&quot;
                startPlaceholder=&quot;开始日期&quot;
                endPlaceholder=&quot;结束日期&quot;&gt;&lt;/jk-date-picker&gt;
        &lt;/jk-form-item&gt;
        &lt;jk-form-item&gt;
            &lt;jk-button type=&quot;primary&quot; nativeType=&quot;submit&quot; loading=&quot;@model.loading&quot;&gt;提交&lt;/jk-button&gt;
            &lt;jk-button nativeType=&quot;reset&quot;&gt;重置&lt;/jk-button&gt;
        &lt;/jk-form-item&gt;
    &lt;/jk-form&gt;
&lt;/template&gt;
&lt;script&gt;
import { Component, VNode } from &quot;@joker.front/core&quot;;
import { sleep } from &quot;@joker.front/shared&quot;;
import { Message } from &quot;../../../src&quot;;

export default class extends Component {
    model = {
        loading: false
    };
    async validateAge(value: string) {
        //模拟请求，实现异步校验
        await sleep(1500);

        //自定义校验是最后执行，无需考虑非空 &amp;&amp; 正整数
        let age = parseInt(value);

        if (age &lt; 22) {
            return &quot;你的年龄太小了，等22岁之后再来吧&quot;;
        }

        if (age &gt; 30) {
            return &quot;你已经够成熟了，不需要再了解了&quot;;
        }
    }
    validateConfirmPwd(value) {
        let pwd = this.$getRef&lt;VNode.Component&gt;(&quot;pwd&quot;)?.component.value;

        if (pwd !== value) {
            return &quot;两次密码不一致&quot;;
        }
    }

    //触发提交
    handleSubmitBtnClick(e: VNode.Event) {
        //若传入e，则form会根据触发事件来控制该按钮的loading状态
        this.$getRef&lt;VNode.Component&gt;(&quot;form&quot;)?.component.submit(e);
    }

    //表单提交处理函数
    async handleFormSubmit(e: VNode.Event) {
        this.model.loading = true;
        //验证成功后，才会触发该方法
        //支持异步处理

        //模拟接口请求
        await sleep(1000);

        console.log(e.data);

        Message({
            type: &quot;success&quot;,
            message: &quot;提交成功&quot;
        });

        this.model.loading = false;
    }
}
&lt;/script&gt;


</code></pre>
</DemoContainer>
<blockquote>
<p>在 submit 事件内部处理时，表单会在异步校验过程中，将发起按钮（需是 jk-button）设置为 loading，异步验证成功后解除 loading，转交到 submit 事件自行处理，所以需要调用者自行控制<code>提交</code>过程中的 loading，验证中 loading 则无需关心。</p>
</blockquote>
<h3>表单控件的扩展</h3>
<p>若想添加可被<code>Form</code>表单识别的表单控件，需满足以下几个条件：</p>
<ol>
<li>在 create 时，需要调用<code>registerFormCtrl(this)</code>方法注册表单控件。</li>
<li>需要在 model 中配置 value 属性</li>
<li>需要传入 props.name （根据使用场景区分）</li>
<li>当前控件渲染在 jk-form 组件中（根据使用场景区分）</li>
</ol>
<p>以下是功能性扩展（非强制约束）</p>
<ol>
<li>在合适的时机触发<code>this.$trigger(&quot;validate&quot;)</code>表单校验事件，一般在内容值变更时触发（不强制）。</li>
<li><code>ctrlValidate</code>若组件内存在此方法， 则在表单执行该项校验时，执行自身内置校验。</li>
<li><code>beforeValidate</code>若组件内存在此方法，则在表单执行该项校验前执行一些前置的数据准备工作。</li>
</ol>
<h3>Form Attributes</h3>
<table class="mkd-table">
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
<th>可选值</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>class</td>
<td>自定义 class 样式</td>
<td>string</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>inline</td>
<td>行内表单模式</td>
<td>boolean</td>
<td>—</td>
<td>false</td>
</tr>
<tr>
<td>label-position</td>
<td>表单标签的位置，如果值为 left 或者 right 时，则需要设置 <code>label-width</code></td>
<td>string</td>
<td>right/left/top</td>
<td>right</td>
</tr>
<tr>
<td>label-width</td>
<td>表单标签的宽度，例如 '50px'。作为 Form 直接子元素的 form-item 会继承该值。</td>
<td>string</td>
<td>—</td>
<td>80px</td>
</tr>
<tr>
<td>size</td>
<td>用于控制该表单内组件的尺寸</td>
<td>string</td>
<td>medium / small / mini</td>
<td>—</td>
</tr>
<tr>
<td>showErrorMessage</td>
<td>自定义错误提示展示</td>
<td>Function</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>clearErrorMessage</td>
<td>自定义清空错误提示</td>
<td>Function</td>
<td>-</td>
<td>-</td>
</tr>
</tbody>
</table>
<h3>Form Methods</h3>
<table class="mkd-table">
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>参数</th>
</tr>
</thead>
<tbody>
<tr>
<td>validate</td>
<td>对整个表单进行校验的方法，参数为一个回调函数。该回调函数会在校验结束后被调用，返回一个 promise</td>
<td>Function(string /string[]) 若不传递参数则执行整个表单控件校验，可以传入 name（string / string[]）实现校验指定控件的值</td>
</tr>
<tr>
<td>reset</td>
<td>对整个表单进行重置，将所有字段值重置为初始值并移除校验结果</td>
<td>—</td>
</tr>
<tr>
<td>getData</td>
<td>获取当前表单数据，注意<strong>获取数据未经过表单校验</strong></td>
<td>Function(string / string[])若不传递参数则获取整个表单控件值，可以传入 name（string / string[]）实现获取指定控件的值</td>
</tr>
<tr>
<td>submit</td>
<td>触发表单提交操作</td>
<td>-</td>
</tr>
</tbody>
</table>
<h3>Form Event</h3>
<table class="mkd-table">
<thead>
<tr>
<th>事件名</th>
<th>说明</th>
<th>参数</th>
</tr>
</thead>
<tbody>
<tr>
<td>before-submit</td>
<td>触发表单提交前</td>
<td>-</td>
</tr>
<tr>
<td>submit</td>
<td>触发表单提交操作</td>
<td>表单数据</td>
</tr>
</tbody>
</table>
<h3>Form-Item Attributes</h3>
<table class="mkd-table">
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
<th>可选值</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>class</td>
<td>自定义 class 样式</td>
<td>string</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>label</td>
<td>标签文本</td>
<td>string</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>label-width</td>
<td>表单域标签的的宽度，例如 '50px'。</td>
<td>string</td>
<td>—</td>
<td>80px</td>
</tr>
<tr>
<td>required</td>
<td>是否必填（用于控制是否显示<strong>星号</strong>，不会参与校验规则的制定）</td>
<td>boolean</td>
<td>—</td>
<td>false</td>
</tr>
<tr>
<td>inline</td>
<td>是否采用 inline 布局</td>
<td>boolean</td>
<td>—</td>
<td>false</td>
</tr>
</tbody>
</table>
<h3>Form-Item Section</h3>
<table class="mkd-table">
<thead>
<tr>
<th>name</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>—</td>
<td>Form Item 的内容</td>
</tr>
<tr>
<td>label</td>
<td>标签文本的内容</td>
</tr>
<tr>
<td>error</td>
<td>校验失败内容</td>
</tr>
</tbody>
</table>

<BottomNav />
</div>
</template>
<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../common/components/bottom-nav.joker";
import DEMO_JOKER_demo8 from '../components/form/demo8.joker';
import DEMO_JOKER_demo7 from '../components/form/demo7.joker';
import DEMO_JOKER_demo6 from '../components/form/demo6.joker';
import DEMO_JOKER_demo5 from '../components/form/demo5.joker';
import DEMO_JOKER_demo4 from '../components/form/demo4.joker';
import DEMO_JOKER_demo3 from '../components/form/demo3.joker';
import DEMO_JOKER_demo2 from '../components/form/demo2.joker';
import DEMO_JOKER_demo1 from '../components/form/demo1.joker';
export default class extends Component {
components={
BottomNav,
DEMO_JOKER_demo8,
DEMO_JOKER_demo7,
DEMO_JOKER_demo6,
DEMO_JOKER_demo5,
DEMO_JOKER_demo4,
DEMO_JOKER_demo3,
DEMO_JOKER_demo2,
DEMO_JOKER_demo1
}
mounted(){
let container= this.$getRef('container')?.output!;
container.querySelectorAll('pre code').forEach((el:HTMLElement) => {
        hljs.highlightElement(el);
      });
}
}
</script>